# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class NarrativeMethodStore(object):
    def __init__(
        self,
        url=None,
        timeout=30 * 60,
        user_id=None,
        password=None,
        token=None,
        ignore_authrc=False,
        trust_all_ssl_certificates=False,
        auth_svc="https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login",
    ):
        if url is None:
            raise ValueError("A url is required")
        self._service_ver = None
        self._client = _BaseClient(
            url,
            timeout=timeout,
            user_id=user_id,
            password=password,
            token=token,
            ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc,
        )

    def ver(self, context=None):
        """
        Returns the current running version of the NarrativeMethodStore.
        :returns: instance of String
        """
        return self._client.call_method("NarrativeMethodStore.ver", [], self._service_ver, context)

    def status(self, context=None):
        """
        Simply check the status of this service to see what Spec repository it is
        using, and what commit it is on
        :returns: instance of type "Status" -> structure: parameter
           "git_spec_url" of String, parameter "git_spec_branch" of String,
           parameter "git_spec_commit" of String, parameter "update_interval"
           of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.status", [], self._service_ver, context
        )

    def list_categories(self, params, context=None):
        """
        :param params: instance of type "ListCategoriesParams" (List all the
           categories.  Optionally, if load_methods or load_apps are set to
           1, information about all the methods and apps is provided.  This
           is important load_methods - optional field (default value is 1).
           tag - optional access level for dynamic repos (one of 'dev',
           'beta' or 'release').) -> structure: parameter "load_methods" of
           type "boolean" (@range [0,1]), parameter "load_apps" of type
           "boolean" (@range [0,1]), parameter "load_types" of type "boolean"
           (@range [0,1]), parameter "tag" of String
        :returns: multiple set - (1) parameter "categories" of mapping from
           String to type "Category" -> structure: parameter "id" of String,
           parameter "name" of String, parameter "ver" of String, parameter
           "tooltip" of String, parameter "description" of String, parameter
           "parent_ids" of list of String, parameter "loading_error" of
           String, (2) parameter "methods" of mapping from String to type
           "MethodBriefInfo" (Minimal information about a method suitable for
           displaying the method in a menu or navigator. input_types and
           output_types - sets of valid_ws_types occured in input/output
           parameters. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "icon" of type "Icon" -> structure: parameter "url" of
           type "url", parameter "categories" of list of String, parameter
           "loading_error" of String, parameter "authors" of list of type
           "username", parameter "input_types" of list of String, parameter
           "output_types" of list of String, parameter "app_type" of String,
           (3) parameter "apps" of mapping from String to type "AppBriefInfo"
           -> structure: parameter "id" of String, parameter "name" of
           String, parameter "ver" of String, parameter "subtitle" of String,
           parameter "tooltip" of String, parameter "header" of String,
           parameter "icon" of type "Icon" -> structure: parameter "url" of
           type "url", parameter "categories" of list of String, parameter
           "loading_error" of String, (4) parameter "types" of mapping from
           String to type "TypeInfo" (export_functions - optional mapping
           from UI label to exporter SDK local function. @optional icon
           landing_page_url_prefix loading_error) -> structure: parameter
           "type_name" of String, parameter "name" of String, parameter
           "subtitle" of String, parameter "tooltip" of String, parameter
           "description" of String, parameter "icon" of type "ScreenShot" ->
           structure: parameter "url" of type "url", parameter
           "view_method_ids" of list of String, parameter "import_method_ids"
           of list of String, parameter "export_functions" of mapping from
           String to String, parameter "landing_page_url_prefix" of String,
           parameter "loading_error" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_categories", [params], self._service_ver, context
        )

    def get_category(self, params, context=None):
        """
        :param params: instance of type "GetCategoryParams" -> structure:
           parameter "ids" of list of String
        :returns: instance of list of type "Category" -> structure: parameter
           "id" of String, parameter "name" of String, parameter "ver" of
           String, parameter "tooltip" of String, parameter "description" of
           String, parameter "parent_ids" of list of String, parameter
           "loading_error" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_category", [params], self._service_ver, context
        )

    def list_methods(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "MethodBriefInfo" (Minimal
           information about a method suitable for displaying the method in a
           menu or navigator. input_types and output_types - sets of
           valid_ws_types occured in input/output parameters. git_commit_hash
           - optional repo version defined for dynamically registered
           methods. app_type - is one of: "app", "viewer", "editor".) ->
           structure: parameter "id" of String, parameter "module_name" of
           String, parameter "git_commit_hash" of String, parameter "name" of
           String, parameter "ver" of String, parameter "subtitle" of String,
           parameter "tooltip" of String, parameter "icon" of type "Icon" ->
           structure: parameter "url" of type "url", parameter "categories"
           of list of String, parameter "loading_error" of String, parameter
           "authors" of list of type "username", parameter "input_types" of
           list of String, parameter "output_types" of list of String,
           parameter "app_type" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_methods", [params], self._service_ver, context
        )

    def list_methods_full_info(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "MethodFullInfo" (Full information
           about a method suitable for displaying a method landing page.
           git_commit_hash - optional repo version defined for dynamically
           registered methods. app_type - is one of: "app", "viewer",
           "editor".) -> structure: parameter "id" of String, parameter
           "module_name" of String, parameter "git_commit_hash" of String,
           parameter "name" of String, parameter "ver" of String, parameter
           "authors" of list of type "username", parameter "kb_contributors"
           of list of type "username", parameter "contact" of type "email",
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "description" of String, parameter
           "technical_description" of String, parameter "app_type" of String,
           parameter "suggestions" of type "Suggestions" -> structure:
           parameter "related_methods" of list of String, parameter
           "next_methods" of list of String, parameter "related_apps" of list
           of String, parameter "next_apps" of list of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter "screenshots"
           of list of type "ScreenShot" -> structure: parameter "url" of type
           "url", parameter "publications" of list of type "Publication"
           (Publication info can get complicated.  To keep things simple, we
           only allow a few things now: pmid - pubmed id, if present, we can
           use this id to pull all publication info we want display_text -
           what is shown to the user if there is no pubmed id, or if the
           pubmed id is not valid link - a link to the paper, also not needed
           if pmid is valid, but could be used if pubmed is down) ->
           structure: parameter "pmid" of String, parameter "display_text" of
           String, parameter "link" of type "url"
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_methods_full_info", [params], self._service_ver, context
        )

    def list_methods_spec(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "MethodSpec" (The method
           specification which should provide enough information to render a
           default input widget for the method. replacement_text indicates
           the text that should replace the input boxes after the method has
           run.  You can refer to parameters by putting them in double curly
           braces (on the front end we will use the handlebars library). for
           example:  Ran flux balance analysis on model {{model_param}} with
           parameter 2 set to {{param2}}.) -> structure: parameter "info" of
           type "MethodBriefInfo" (Minimal information about a method
           suitable for displaying the method in a menu or navigator.
           input_types and output_types - sets of valid_ws_types occured in
           input/output parameters. git_commit_hash - optional repo version
           defined for dynamically registered methods. app_type - is one of:
           "app", "viewer", "editor".) -> structure: parameter "id" of
           String, parameter "module_name" of String, parameter
           "git_commit_hash" of String, parameter "name" of String, parameter
           "ver" of String, parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "icon" of type "Icon" -> structure:
           parameter "url" of type "url", parameter "categories" of list of
           String, parameter "loading_error" of String, parameter "authors"
           of list of type "username", parameter "input_types" of list of
           String, parameter "output_types" of list of String, parameter
           "app_type" of String, parameter "replacement_text" of String,
           parameter "widgets" of type "WidgetSpec" (specify the input /
           ouput widgets used for rendering) -> structure: parameter "input"
           of String, parameter "output" of String, parameter "parameters" of
           list of type "MethodParameter" (Description of a method parameter.
           id - id of the parameter, must be unique within the method ui_name
           - short name that is displayed to the user short_hint - short
           phrase or sentence describing the parameter description - longer
           and more technical description of the parameter field_type - one
           of: text | textarea | textsubdata | intslider | floatslider |
           checkbox | dropdown | radio | tab | file | dynamic_dropdown
           allow_mutiple - only supported for field_type text, allows entry
           of a list instead of a single value, default is 0 if set, the
           number of starting boxes will be either 1 or the number of
           elements in the default_values list optional - set to true to make
           the field optional, default is 0 advanced - set to true to make
           this an advanced option, default is 0 if an option is advanced, it
           should also be optional or have a default value disabled   - set
           to true to disable user input, default is 0 if disabled, a default
           value should be provided ui_class  - input | output | parameter
           value is autogenerated based on the specification which determines
           if it is an input parameter, output parameter, or just plain old
           parameter (input is generally an input data object, output is an
           output data object, and plain old parameter is more or less
           numbers, fixed selections, etc) valid_file_types - a list of
           staging area file types that are valid for the method parameter.
           This might apply to a text box, dropdown, dynamic dropdown, etc.
           depending on the context. The file type is available in the
           mappings key of the json response from staging service importer
           mappings endpoint. Each mapping has a file_type key containing the
           type. @optional text_options textarea_options intslider_options
           floatslider_options @optional checkbox_options dropdown_options
           radio_options tab_options dynamic_dropdown_options) -> structure:
           parameter "id" of String, parameter "ui_name" of String, parameter
           "short_hint" of String, parameter "description" of String,
           parameter "field_type" of String, parameter "allow_multiple" of
           type "boolean" (@range [0,1]), parameter "optional" of type
           "boolean" (@range [0,1]), parameter "advanced" of type "boolean"
           (@range [0,1]), parameter "disabled" of type "boolean" (@range
           [0,1]), parameter "ui_class" of String, parameter "default_values"
           of list of String, parameter "valid_file_types" of list of String,
           parameter "text_options" of type "TextOptions" (valid_ws_types  -
           list of valid ws types that can be used for input validate_as
           - int | float | nonnumeric | none is_output_name  - true if the
           user is specifying an output name, false otherwise, default is
           false) -> structure: parameter "valid_ws_types" of list of String,
           parameter "validate_as" of String, parameter "is_output_name" of
           type "boolean" (@range [0,1]), parameter "placeholder" of String,
           parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_float" of Double, parameter "max_float" of Double,
           parameter "regex_constraint" of list of type "RegexMatcher" (regex
           - regular expression in javascript syntax error_text - message
           displayed if the input does not statisfy this constraint match -
           set to 1 to check if the input matches this regex, set to 0 to
           check if input does not match this regex.  default is 1) ->
           structure: parameter "regex" of String, parameter "error_text" of
           String, parameter "match" of type "boolean" (@range [0,1]),
           parameter "textarea_options" of type "TextAreaOptions" ->
           structure: parameter "n_rows" of Long, parameter "placeholder" of
           String, parameter "intslider_options" of type "IntSliderOptions"
           -> structure: parameter "min" of Long, parameter "max" of Long,
           parameter "step" of Long, parameter "floatslider_options" of type
           "FloatSliderOptions" -> structure: parameter "min" of Double,
           parameter "max" of Double, parameter "checkbox_options" of type
           "CheckboxOptions" -> structure: parameter "checked_value" of Long,
           parameter "unchecked_value" of Long, parameter "dropdown_options"
           of type "DropdownOptions" (Defines a parameter field that allows
           users to select from a list of options. It will appear as a
           dropdown (a 'select' HTML element). Parameters: options   - a list
           of maps with keys 'value' and 'display'; 'display' is the text
           presented to the user, and 'value' is what is passed from the
           element when it is submitted. See the DropDownOption type for the
           spec. multiselection - If true, multiple selections are allowed
           from a single field, and the parameter will return a list, rather
           than a single value. This parameter is optional. Default = false)
           -> structure: parameter "options" of list of type "DropdownOption"
           (value is what is passed from the form, display is how the
           selection is shown to the user) -> structure: parameter "value" of
           String, parameter "display" of String, parameter "multiselection"
           of type "boolean" (@range [0,1]), parameter
           "dynamic_dropdown_options" of type "DynamicDropdownOptions"
           (Defines a parameter field that allows autocomplete based on a
           call to a dynamic service. For instance, selection of files from
           the staging_service or from kbase_search. It will appear as a text
           field with dropdown similar to selection of other WS data objects.
           data_source - one of ftp_staging | search | custom. Provides
           sensible defaults to for the following parameters for a common
           type of dropdown which can be overwritten service_function - name
           of SDK method including prefix with SDK module started up as
           dynamic service (it's fully qualified method name where module and
           method are separated by '.'). service_version - optional version
           of module used in service_function (default value is 'release').
           service_params - The parameters that will be supplied to the
           dynamic service call as JSON. The special text
           "{{dynamic_dropdown_input}}" will be replaced by the value of user
           input at call time. selection_id - The value of this key will be
           extracted from the item selected by the user. The item is expected
           to be represented as a map. exact_match_on - if exactly matching
           the user's input to the results from the dynamic service is
           required, this field contains the name of the key in the results
           document that contains the value to which the user's input should
           be matched. May or may not be the same key as 'selection_id'.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the keys in the items as
           variable names) multiselection - If true, then multiple selections
           are allowed in a single input field. This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false query_on_empty_input - true, the default, to send a request
           to the dynamic service even if there is no input.
           result_array_index - The index of the result array returned from
           the dynamic service from where the selection items will be
           extracted. Default 0. path_to_selection_items - The path into the
           result data object to the list of selection items. If missing, the
           data at the specified result array index is used (defaulting to
           the first returned value in the list). The selection items data
           structure must be a list of mappings or structures. As an example
           of correctly specifying where the selection items are within the
           data structure returned from the dynamic service, if the data
           structure is: [ "foo",                # return array position 0 {
           # return array position 1 "interesting_data": [ "baz", "boo", [
           {"id": 1, "name": "foo" }, ... {"id": 42, "name": "wowbagger" } ],
           "bat" ] }, "bar"                # return array position 2 ] Note
           that KBase dynamic services all return an array of values, even
           for single-value returns, as the KIDL spec allows specifying
           multiple return values per function. In this case:
           result_array_index would be 1 path_to_selection_items would be
           ["interesting_data", "2"] selection_id would be "name" The
           selection items would be the 42 items represented by {"id": 1,
           "name": "foo" }, ... {"id": 42, "name": "wowbagger" } Selection
           items must always be a list of maps. The final value returned when
           the user selects a value would be the "name" field - "foo" if the
           first item is selected, and "wowbagger" if the last item is
           selected.) -> structure: parameter "data_source" of String,
           parameter "service_function" of String, parameter
           "service_version" of String, parameter "service_params" of
           unspecified object, parameter "selection_id" of String, parameter
           "exact_match_on" of String, parameter "description_template" of
           String, parameter "multiselection" of type "boolean" (@range
           [0,1]), parameter "query_on_empty_input" of type "boolean" (@range
           [0,1]), parameter "result_array_index" of Long, parameter
           "path_to_selection_items" of list of String, parameter
           "radio_options" of type "RadioOptions" -> structure: parameter
           "id_order" of list of String, parameter "ids_to_options" of
           mapping from String to String, parameter "ids_to_tooltip" of
           mapping from String to String, parameter "tab_options" of type
           "TabOptions" -> structure: parameter "tab_id_order" of list of
           String, parameter "tab_id_to_tab_name" of mapping from String to
           String, parameter "tab_id_to_param_ids" of mapping from String to
           list of String, parameter "textsubdata_options" of type
           "TextSubdataOptions" (Defines a parameter field that allows
           autocomplete based on subdata of an existing object.  For
           instance, selection of feature ids from a Genome object.  It will
           appear as a text field with dropdown similar to selection of other
           WS data objects. placeholder - placeholder text to display in the
           field multiselection - if true, then multiple selections are
           allowed in a single input field.  This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false show_src_obj - if true, then the dropdown will indicate the
           ids along with some text indicating what data object the subdata
           was retrieved from. Default=true allow_custom - if true, then user
           specified inputs not found in the list are accepted.  if false,
           users can only select from the valid list of selections.
           Default=false) -> structure: parameter "placeholder" of String,
           parameter "multiselection" of type "boolean" (@range [0,1]),
           parameter "show_src_obj" of type "boolean" (@range [0,1]),
           parameter "allow_custom" of type "boolean" (@range [0,1]),
           parameter "subdata_selection" of type "SubdataSelection"
           (Information about a subdata selection constant_ref - can be set
           as a fixed reference(s) to data objects so that the dropdown is
           always populated with a particular WS object - useful for say
           populating based on an ontology or some other library of default
           terms, such as compounds parameter_id - pick the terms from a user
           specified parameter in the same method path_to_subdata - specific
           path to a list or map that should be used to populate the fields
           selection_id - If the path_to_subdata is to a list of objects, use
           this to specify which field of that object should be used as the
           primary ID selection_description - Use this to specify (if the
           subdata is a list or map) which fields should be included as a
           short description of the selection.  For features, for instance,
           this may include the feature function, or feature aliases.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the name of items in the
           selection_description list as variable names) service_function -
           optional name of SDK method including prefix with SDK module
           started up as dynamic service (it's fully qualified method name
           where module and method are separated by '.') service_version -
           optional version of module used in service_function (default value
           is 'release').) -> structure: parameter "constant_ref" of list of
           String, parameter "parameter_id" of String, parameter
           "subdata_included" of list of String, parameter "path_to_subdata"
           of list of String, parameter "selection_id" of String, parameter
           "selection_description" of list of String, parameter
           "description_template" of String, parameter "service_function" of
           String, parameter "service_version" of String, parameter
           "fixed_parameters" of list of type "FixedMethodParameter" (a fixed
           parameter that does not appear in the method input forms, but is
           informational for users in describing a backend parameter that
           cannot be changed (e.g. if a service picks a fixed parameter for
           say Blast)) -> structure: parameter "ui_name" of String, parameter
           "description" of String, parameter "parameter_groups" of list of
           type "MethodParameterGroup" (Description of a method parameter. id
           - id of the parameter group, must be unique within the method
           among all parameters and groups, parameter_ids - IDs of parameters
           included in this group, ui_name - short name that is displayed to
           the user, short_hint - short phrase or sentence describing the
           parameter group, description - longer and more technical
           description of the parameter group (long-hint), allow_mutiple -
           allows entry of a list instead of a single structure, default is 0
           if set, the number of starting boxes will be either 1 or the
           number of elements in the default_values list, optional - set to
           true to make the group optional, default is 0, advanced - set to
           true to make this an advanced option, default is 0 if an option is
           advanced, it should also be optional or have a default value,
           id_mapping - optional mapping for parameter IDs used to pack group
           into resulting value structure (not used for non-multiple groups),
           with_border - flag for one-copy groups saying to show these group
           with border. @optional id_mapping) -> structure: parameter "id" of
           String, parameter "parameter_ids" of list of String, parameter
           "ui_name" of String, parameter "short_hint" of String, parameter
           "description" of String, parameter "allow_multiple" of type
           "boolean" (@range [0,1]), parameter "optional" of type "boolean"
           (@range [0,1]), parameter "advanced" of type "boolean" (@range
           [0,1]), parameter "id_mapping" of mapping from String to String,
           parameter "with_border" of type "boolean" (@range [0,1]),
           parameter "behavior" of type "MethodBehavior" (Determines how the
           method is handled when run. kb_service_name - name of service
           which will be part of fully qualified method name, optional field
           (in case it's not defined developer should enter fully qualified
           name with dot into 'kb_service_method'. kb_service_version -
           optional git commit hash defining version of repo registered
           dynamically. kb_service_input_mapping - mapping from input
           parameters to input service method arguments.
           kb_service_output_mapping - mapping from output of service method
           to final output of narrative method. resource_estimator_module -
           optional module for the resource estimator method.
           resource_estimator_method - optional name of method for estimating
           resource requirements. output_mapping - mapping from input to
           final output of narrative method to support steps without back-end
           operations. @optional kb_service_name kb_service_method
           kb_service_input_mapping kb_service_output_mapping
           resource_estimator_module resource_estimator_method) -> structure:
           parameter "kb_service_url" of String, parameter "kb_service_name"
           of String, parameter "kb_service_version" of String, parameter
           "kb_service_method" of String, parameter
           "resource_estimator_module" of String, parameter
           "resource_estimator_method" of String, parameter
           "kb_service_input_mapping" of list of type
           "ServiceMethodInputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set. constant_value -
           constant value, could be even map/array, if not specified then
           'input_parameter' or 'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. generated_value - automatically
           generated value; it could be used as independent mode or when
           another mode finished with empty value (for example in case
           'input_parameter' is defined but value of this parameter is left
           empty by user); so this mode has lower priority when used with
           another mode. target_argument_position - position of argument in
           RPC-method call, optional field, default value is 0.
           target_property - name of field inside structure that will be send
           as argument. Optional field, in case this field is not defined (or
           null) whole object will be sent as method argument instead of
           wrapping it by structure with inner property defined by
           'target_property'. target_type_transform -
           none/string/int/float/ref, optional field, default is 'none' (it's
           in plans to support list<type>, mapping<type> and tuple<t1,t2,...>
           transformations). @optional input_parameter constant_value
           narrative_system_variable generated_value @optional
           target_argument_position target_property target_type_transform) ->
           structure: parameter "input_parameter" of String, parameter
           "constant_value" of unspecified object, parameter
           "narrative_system_variable" of String, parameter "generated_value"
           of type "AutoGeneratedValue" (prefix - optional string
           concatenated before generated part symbols - number of generated
           characters, optional, default is 8 suffix - optional string
           concatenated after generated part @optional prefix symbols suffix)
           -> structure: parameter "prefix" of String, parameter "symbols" of
           Long, parameter "suffix" of String, parameter
           "target_argument_position" of Long, parameter "target_property" of
           String, parameter "target_type_transform" of String, parameter
           "kb_service_output_mapping" of list of type
           "ServiceMethodOutputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set.
           service_method_output_path - list of properties and array element
           positions defining JSON-path traversing through which we can find
           necessary value. constant_value - constant value, could be even
           map/array, if not specified then 'input_parameter' or
           'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. target_property - name of field
           inside structure that will be send as arguement. Optional field,
           in case this field is not defined (or null) whole object will be
           sent as method argument instead of wrapping it by structure with
           inner property defined by 'target_property'. target_type_transform
           - none/string/int/float/list<type>/mapping<type>/ref, optional
           field, default is no transformation. @optional input_parameter
           service_method_output_path constant_value
           narrative_system_variable @optional target_property
           target_type_transform) -> structure: parameter "input_parameter"
           of String, parameter "service_method_output_path" of list of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "output_mapping" of list of type "OutputMapping"
           (This structure should be used in case narrative method doesn't
           run any back-end code. See docs for ServiceMethodOutputMapping
           type for details.) -> structure: parameter "input_parameter" of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "job_id_output_field" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_methods_spec", [params], self._service_ver, context
        )

    def list_method_ids_and_names(self, params, context=None):
        """
        :param params: instance of type "ListMethodIdsAndNamesParams" (tag -
           optional access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "tag" of String
        :returns: instance of mapping from String to String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_method_ids_and_names", [params], self._service_ver, context
        )

    def list_apps(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "AppBriefInfo" -> structure:
           parameter "id" of String, parameter "name" of String, parameter
           "ver" of String, parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "header" of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter
           "loading_error" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_apps", [params], self._service_ver, context
        )

    def list_apps_full_info(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "AppFullInfo" -> structure:
           parameter "id" of String, parameter "name" of String, parameter
           "ver" of String, parameter "authors" of list of type "username",
           parameter "contact" of type "email", parameter "subtitle" of
           String, parameter "tooltip" of String, parameter "header" of
           String, parameter "description" of String, parameter
           "technical_description" of String, parameter "suggestions" of type
           "Suggestions" -> structure: parameter "related_methods" of list of
           String, parameter "next_methods" of list of String, parameter
           "related_apps" of list of String, parameter "next_apps" of list of
           String, parameter "categories" of list of String, parameter "icon"
           of type "Icon" -> structure: parameter "url" of type "url",
           parameter "screenshots" of list of type "ScreenShot" -> structure:
           parameter "url" of type "url"
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_apps_full_info", [params], self._service_ver, context
        )

    def list_apps_spec(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "AppSpec" (typedef structure { }
           AppBehavior;) -> structure: parameter "info" of type
           "AppBriefInfo" -> structure: parameter "id" of String, parameter
           "name" of String, parameter "ver" of String, parameter "subtitle"
           of String, parameter "tooltip" of String, parameter "header" of
           String, parameter "icon" of type "Icon" -> structure: parameter
           "url" of type "url", parameter "categories" of list of String,
           parameter "loading_error" of String, parameter "steps" of list of
           type "AppSteps" -> structure: parameter "step_id" of String,
           parameter "method_id" of String, parameter "input_mapping" of list
           of type "AppStepInputMapping" (Defines how any input to a
           particular step should be populated based step_source - the id of
           the step to pull the parameter from isFromInput - set to true (1)
           to indicate that the input should be pulled from the input
           parameters of the step_source.  This is the only supported option.
           In the future, it may be possible to pull the input from the
           output of the previous step (which would require special handling
           of the app runner). from - the id of the input parameter/output
           field in step_source to retrieve the value to - the name of the
           parameter to automatically populate in this step transformation -
           not supported yet, but may be used to indicate if a transformation
           of the value should occur when mapping the input to this step
           //@optional transformation) -> structure: parameter "step_source"
           of String, parameter "is_from_input" of type "boolean" (@range
           [0,1]), parameter "from" of String, parameter "to" of String,
           parameter "description" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_apps_spec", [params], self._service_ver, context
        )

    def list_app_ids_and_names(self, context=None):
        """
        :returns: instance of mapping from String to String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_app_ids_and_names", [], self._service_ver, context
        )

    def list_types(self, params, context=None):
        """
        :param params: instance of type "ListParams" (These parameters do
           nothing currently, but are a placeholder for future options on
           listing methods or apps limit - optional field (default value is
           0) offset - optional field (default value is 0) tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "limit" of Long, parameter
           "offset" of Long, parameter "tag" of String
        :returns: instance of list of type "TypeInfo" (export_functions -
           optional mapping from UI label to exporter SDK local function.
           @optional icon landing_page_url_prefix loading_error) ->
           structure: parameter "type_name" of String, parameter "name" of
           String, parameter "subtitle" of String, parameter "tooltip" of
           String, parameter "description" of String, parameter "icon" of
           type "ScreenShot" -> structure: parameter "url" of type "url",
           parameter "view_method_ids" of list of String, parameter
           "import_method_ids" of list of String, parameter
           "export_functions" of mapping from String to String, parameter
           "landing_page_url_prefix" of String, parameter "loading_error" of
           String
        """
        return self._client.call_method(
            "NarrativeMethodStore.list_types", [params], self._service_ver, context
        )

    def get_method_brief_info(self, params, context=None):
        """
        :param params: instance of type "GetMethodParams" (tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "ids" of list of String,
           parameter "tag" of String
        :returns: instance of list of type "MethodBriefInfo" (Minimal
           information about a method suitable for displaying the method in a
           menu or navigator. input_types and output_types - sets of
           valid_ws_types occured in input/output parameters. git_commit_hash
           - optional repo version defined for dynamically registered
           methods. app_type - is one of: "app", "viewer", "editor".) ->
           structure: parameter "id" of String, parameter "module_name" of
           String, parameter "git_commit_hash" of String, parameter "name" of
           String, parameter "ver" of String, parameter "subtitle" of String,
           parameter "tooltip" of String, parameter "icon" of type "Icon" ->
           structure: parameter "url" of type "url", parameter "categories"
           of list of String, parameter "loading_error" of String, parameter
           "authors" of list of type "username", parameter "input_types" of
           list of String, parameter "output_types" of list of String,
           parameter "app_type" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_method_brief_info", [params], self._service_ver, context
        )

    def get_method_full_info(self, params, context=None):
        """
        :param params: instance of type "GetMethodParams" (tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "ids" of list of String,
           parameter "tag" of String
        :returns: instance of list of type "MethodFullInfo" (Full information
           about a method suitable for displaying a method landing page.
           git_commit_hash - optional repo version defined for dynamically
           registered methods. app_type - is one of: "app", "viewer",
           "editor".) -> structure: parameter "id" of String, parameter
           "module_name" of String, parameter "git_commit_hash" of String,
           parameter "name" of String, parameter "ver" of String, parameter
           "authors" of list of type "username", parameter "kb_contributors"
           of list of type "username", parameter "contact" of type "email",
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "description" of String, parameter
           "technical_description" of String, parameter "app_type" of String,
           parameter "suggestions" of type "Suggestions" -> structure:
           parameter "related_methods" of list of String, parameter
           "next_methods" of list of String, parameter "related_apps" of list
           of String, parameter "next_apps" of list of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter "screenshots"
           of list of type "ScreenShot" -> structure: parameter "url" of type
           "url", parameter "publications" of list of type "Publication"
           (Publication info can get complicated.  To keep things simple, we
           only allow a few things now: pmid - pubmed id, if present, we can
           use this id to pull all publication info we want display_text -
           what is shown to the user if there is no pubmed id, or if the
           pubmed id is not valid link - a link to the paper, also not needed
           if pmid is valid, but could be used if pubmed is down) ->
           structure: parameter "pmid" of String, parameter "display_text" of
           String, parameter "link" of type "url"
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_method_full_info", [params], self._service_ver, context
        )

    def get_method_spec(self, params, context=None):
        """
        :param params: instance of type "GetMethodParams" (tag - optional
           access level for dynamic repos (one of 'dev', 'beta' or
           'release').) -> structure: parameter "ids" of list of String,
           parameter "tag" of String
        :returns: instance of list of type "MethodSpec" (The method
           specification which should provide enough information to render a
           default input widget for the method. replacement_text indicates
           the text that should replace the input boxes after the method has
           run.  You can refer to parameters by putting them in double curly
           braces (on the front end we will use the handlebars library). for
           example:  Ran flux balance analysis on model {{model_param}} with
           parameter 2 set to {{param2}}.) -> structure: parameter "info" of
           type "MethodBriefInfo" (Minimal information about a method
           suitable for displaying the method in a menu or navigator.
           input_types and output_types - sets of valid_ws_types occured in
           input/output parameters. git_commit_hash - optional repo version
           defined for dynamically registered methods. app_type - is one of:
           "app", "viewer", "editor".) -> structure: parameter "id" of
           String, parameter "module_name" of String, parameter
           "git_commit_hash" of String, parameter "name" of String, parameter
           "ver" of String, parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "icon" of type "Icon" -> structure:
           parameter "url" of type "url", parameter "categories" of list of
           String, parameter "loading_error" of String, parameter "authors"
           of list of type "username", parameter "input_types" of list of
           String, parameter "output_types" of list of String, parameter
           "app_type" of String, parameter "replacement_text" of String,
           parameter "widgets" of type "WidgetSpec" (specify the input /
           ouput widgets used for rendering) -> structure: parameter "input"
           of String, parameter "output" of String, parameter "parameters" of
           list of type "MethodParameter" (Description of a method parameter.
           id - id of the parameter, must be unique within the method ui_name
           - short name that is displayed to the user short_hint - short
           phrase or sentence describing the parameter description - longer
           and more technical description of the parameter field_type - one
           of: text | textarea | textsubdata | intslider | floatslider |
           checkbox | dropdown | radio | tab | file | dynamic_dropdown
           allow_mutiple - only supported for field_type text, allows entry
           of a list instead of a single value, default is 0 if set, the
           number of starting boxes will be either 1 or the number of
           elements in the default_values list optional - set to true to make
           the field optional, default is 0 advanced - set to true to make
           this an advanced option, default is 0 if an option is advanced, it
           should also be optional or have a default value disabled   - set
           to true to disable user input, default is 0 if disabled, a default
           value should be provided ui_class  - input | output | parameter
           value is autogenerated based on the specification which determines
           if it is an input parameter, output parameter, or just plain old
           parameter (input is generally an input data object, output is an
           output data object, and plain old parameter is more or less
           numbers, fixed selections, etc) valid_file_types - a list of
           staging area file types that are valid for the method parameter.
           This might apply to a text box, dropdown, dynamic dropdown, etc.
           depending on the context. The file type is available in the
           mappings key of the json response from staging service importer
           mappings endpoint. Each mapping has a file_type key containing the
           type. @optional text_options textarea_options intslider_options
           floatslider_options @optional checkbox_options dropdown_options
           radio_options tab_options dynamic_dropdown_options) -> structure:
           parameter "id" of String, parameter "ui_name" of String, parameter
           "short_hint" of String, parameter "description" of String,
           parameter "field_type" of String, parameter "allow_multiple" of
           type "boolean" (@range [0,1]), parameter "optional" of type
           "boolean" (@range [0,1]), parameter "advanced" of type "boolean"
           (@range [0,1]), parameter "disabled" of type "boolean" (@range
           [0,1]), parameter "ui_class" of String, parameter "default_values"
           of list of String, parameter "valid_file_types" of list of String,
           parameter "text_options" of type "TextOptions" (valid_ws_types  -
           list of valid ws types that can be used for input validate_as
           - int | float | nonnumeric | none is_output_name  - true if the
           user is specifying an output name, false otherwise, default is
           false) -> structure: parameter "valid_ws_types" of list of String,
           parameter "validate_as" of String, parameter "is_output_name" of
           type "boolean" (@range [0,1]), parameter "placeholder" of String,
           parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_float" of Double, parameter "max_float" of Double,
           parameter "regex_constraint" of list of type "RegexMatcher" (regex
           - regular expression in javascript syntax error_text - message
           displayed if the input does not statisfy this constraint match -
           set to 1 to check if the input matches this regex, set to 0 to
           check if input does not match this regex.  default is 1) ->
           structure: parameter "regex" of String, parameter "error_text" of
           String, parameter "match" of type "boolean" (@range [0,1]),
           parameter "textarea_options" of type "TextAreaOptions" ->
           structure: parameter "n_rows" of Long, parameter "placeholder" of
           String, parameter "intslider_options" of type "IntSliderOptions"
           -> structure: parameter "min" of Long, parameter "max" of Long,
           parameter "step" of Long, parameter "floatslider_options" of type
           "FloatSliderOptions" -> structure: parameter "min" of Double,
           parameter "max" of Double, parameter "checkbox_options" of type
           "CheckboxOptions" -> structure: parameter "checked_value" of Long,
           parameter "unchecked_value" of Long, parameter "dropdown_options"
           of type "DropdownOptions" (Defines a parameter field that allows
           users to select from a list of options. It will appear as a
           dropdown (a 'select' HTML element). Parameters: options   - a list
           of maps with keys 'value' and 'display'; 'display' is the text
           presented to the user, and 'value' is what is passed from the
           element when it is submitted. See the DropDownOption type for the
           spec. multiselection - If true, multiple selections are allowed
           from a single field, and the parameter will return a list, rather
           than a single value. This parameter is optional. Default = false)
           -> structure: parameter "options" of list of type "DropdownOption"
           (value is what is passed from the form, display is how the
           selection is shown to the user) -> structure: parameter "value" of
           String, parameter "display" of String, parameter "multiselection"
           of type "boolean" (@range [0,1]), parameter
           "dynamic_dropdown_options" of type "DynamicDropdownOptions"
           (Defines a parameter field that allows autocomplete based on a
           call to a dynamic service. For instance, selection of files from
           the staging_service or from kbase_search. It will appear as a text
           field with dropdown similar to selection of other WS data objects.
           data_source - one of ftp_staging | search | custom. Provides
           sensible defaults to for the following parameters for a common
           type of dropdown which can be overwritten service_function - name
           of SDK method including prefix with SDK module started up as
           dynamic service (it's fully qualified method name where module and
           method are separated by '.'). service_version - optional version
           of module used in service_function (default value is 'release').
           service_params - The parameters that will be supplied to the
           dynamic service call as JSON. The special text
           "{{dynamic_dropdown_input}}" will be replaced by the value of user
           input at call time. selection_id - The value of this key will be
           extracted from the item selected by the user. The item is expected
           to be represented as a map. exact_match_on - if exactly matching
           the user's input to the results from the dynamic service is
           required, this field contains the name of the key in the results
           document that contains the value to which the user's input should
           be matched. May or may not be the same key as 'selection_id'.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the keys in the items as
           variable names) multiselection - If true, then multiple selections
           are allowed in a single input field. This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false query_on_empty_input - true, the default, to send a request
           to the dynamic service even if there is no input.
           result_array_index - The index of the result array returned from
           the dynamic service from where the selection items will be
           extracted. Default 0. path_to_selection_items - The path into the
           result data object to the list of selection items. If missing, the
           data at the specified result array index is used (defaulting to
           the first returned value in the list). The selection items data
           structure must be a list of mappings or structures. As an example
           of correctly specifying where the selection items are within the
           data structure returned from the dynamic service, if the data
           structure is: [ "foo",                # return array position 0 {
           # return array position 1 "interesting_data": [ "baz", "boo", [
           {"id": 1, "name": "foo" }, ... {"id": 42, "name": "wowbagger" } ],
           "bat" ] }, "bar"                # return array position 2 ] Note
           that KBase dynamic services all return an array of values, even
           for single-value returns, as the KIDL spec allows specifying
           multiple return values per function. In this case:
           result_array_index would be 1 path_to_selection_items would be
           ["interesting_data", "2"] selection_id would be "name" The
           selection items would be the 42 items represented by {"id": 1,
           "name": "foo" }, ... {"id": 42, "name": "wowbagger" } Selection
           items must always be a list of maps. The final value returned when
           the user selects a value would be the "name" field - "foo" if the
           first item is selected, and "wowbagger" if the last item is
           selected.) -> structure: parameter "data_source" of String,
           parameter "service_function" of String, parameter
           "service_version" of String, parameter "service_params" of
           unspecified object, parameter "selection_id" of String, parameter
           "exact_match_on" of String, parameter "description_template" of
           String, parameter "multiselection" of type "boolean" (@range
           [0,1]), parameter "query_on_empty_input" of type "boolean" (@range
           [0,1]), parameter "result_array_index" of Long, parameter
           "path_to_selection_items" of list of String, parameter
           "radio_options" of type "RadioOptions" -> structure: parameter
           "id_order" of list of String, parameter "ids_to_options" of
           mapping from String to String, parameter "ids_to_tooltip" of
           mapping from String to String, parameter "tab_options" of type
           "TabOptions" -> structure: parameter "tab_id_order" of list of
           String, parameter "tab_id_to_tab_name" of mapping from String to
           String, parameter "tab_id_to_param_ids" of mapping from String to
           list of String, parameter "textsubdata_options" of type
           "TextSubdataOptions" (Defines a parameter field that allows
           autocomplete based on subdata of an existing object.  For
           instance, selection of feature ids from a Genome object.  It will
           appear as a text field with dropdown similar to selection of other
           WS data objects. placeholder - placeholder text to display in the
           field multiselection - if true, then multiple selections are
           allowed in a single input field.  This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false show_src_obj - if true, then the dropdown will indicate the
           ids along with some text indicating what data object the subdata
           was retrieved from. Default=true allow_custom - if true, then user
           specified inputs not found in the list are accepted.  if false,
           users can only select from the valid list of selections.
           Default=false) -> structure: parameter "placeholder" of String,
           parameter "multiselection" of type "boolean" (@range [0,1]),
           parameter "show_src_obj" of type "boolean" (@range [0,1]),
           parameter "allow_custom" of type "boolean" (@range [0,1]),
           parameter "subdata_selection" of type "SubdataSelection"
           (Information about a subdata selection constant_ref - can be set
           as a fixed reference(s) to data objects so that the dropdown is
           always populated with a particular WS object - useful for say
           populating based on an ontology or some other library of default
           terms, such as compounds parameter_id - pick the terms from a user
           specified parameter in the same method path_to_subdata - specific
           path to a list or map that should be used to populate the fields
           selection_id - If the path_to_subdata is to a list of objects, use
           this to specify which field of that object should be used as the
           primary ID selection_description - Use this to specify (if the
           subdata is a list or map) which fields should be included as a
           short description of the selection.  For features, for instance,
           this may include the feature function, or feature aliases.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the name of items in the
           selection_description list as variable names) service_function -
           optional name of SDK method including prefix with SDK module
           started up as dynamic service (it's fully qualified method name
           where module and method are separated by '.') service_version -
           optional version of module used in service_function (default value
           is 'release').) -> structure: parameter "constant_ref" of list of
           String, parameter "parameter_id" of String, parameter
           "subdata_included" of list of String, parameter "path_to_subdata"
           of list of String, parameter "selection_id" of String, parameter
           "selection_description" of list of String, parameter
           "description_template" of String, parameter "service_function" of
           String, parameter "service_version" of String, parameter
           "fixed_parameters" of list of type "FixedMethodParameter" (a fixed
           parameter that does not appear in the method input forms, but is
           informational for users in describing a backend parameter that
           cannot be changed (e.g. if a service picks a fixed parameter for
           say Blast)) -> structure: parameter "ui_name" of String, parameter
           "description" of String, parameter "parameter_groups" of list of
           type "MethodParameterGroup" (Description of a method parameter. id
           - id of the parameter group, must be unique within the method
           among all parameters and groups, parameter_ids - IDs of parameters
           included in this group, ui_name - short name that is displayed to
           the user, short_hint - short phrase or sentence describing the
           parameter group, description - longer and more technical
           description of the parameter group (long-hint), allow_mutiple -
           allows entry of a list instead of a single structure, default is 0
           if set, the number of starting boxes will be either 1 or the
           number of elements in the default_values list, optional - set to
           true to make the group optional, default is 0, advanced - set to
           true to make this an advanced option, default is 0 if an option is
           advanced, it should also be optional or have a default value,
           id_mapping - optional mapping for parameter IDs used to pack group
           into resulting value structure (not used for non-multiple groups),
           with_border - flag for one-copy groups saying to show these group
           with border. @optional id_mapping) -> structure: parameter "id" of
           String, parameter "parameter_ids" of list of String, parameter
           "ui_name" of String, parameter "short_hint" of String, parameter
           "description" of String, parameter "allow_multiple" of type
           "boolean" (@range [0,1]), parameter "optional" of type "boolean"
           (@range [0,1]), parameter "advanced" of type "boolean" (@range
           [0,1]), parameter "id_mapping" of mapping from String to String,
           parameter "with_border" of type "boolean" (@range [0,1]),
           parameter "behavior" of type "MethodBehavior" (Determines how the
           method is handled when run. kb_service_name - name of service
           which will be part of fully qualified method name, optional field
           (in case it's not defined developer should enter fully qualified
           name with dot into 'kb_service_method'. kb_service_version -
           optional git commit hash defining version of repo registered
           dynamically. kb_service_input_mapping - mapping from input
           parameters to input service method arguments.
           kb_service_output_mapping - mapping from output of service method
           to final output of narrative method. resource_estimator_module -
           optional module for the resource estimator method.
           resource_estimator_method - optional name of method for estimating
           resource requirements. output_mapping - mapping from input to
           final output of narrative method to support steps without back-end
           operations. @optional kb_service_name kb_service_method
           kb_service_input_mapping kb_service_output_mapping
           resource_estimator_module resource_estimator_method) -> structure:
           parameter "kb_service_url" of String, parameter "kb_service_name"
           of String, parameter "kb_service_version" of String, parameter
           "kb_service_method" of String, parameter
           "resource_estimator_module" of String, parameter
           "resource_estimator_method" of String, parameter
           "kb_service_input_mapping" of list of type
           "ServiceMethodInputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set. constant_value -
           constant value, could be even map/array, if not specified then
           'input_parameter' or 'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. generated_value - automatically
           generated value; it could be used as independent mode or when
           another mode finished with empty value (for example in case
           'input_parameter' is defined but value of this parameter is left
           empty by user); so this mode has lower priority when used with
           another mode. target_argument_position - position of argument in
           RPC-method call, optional field, default value is 0.
           target_property - name of field inside structure that will be send
           as argument. Optional field, in case this field is not defined (or
           null) whole object will be sent as method argument instead of
           wrapping it by structure with inner property defined by
           'target_property'. target_type_transform -
           none/string/int/float/ref, optional field, default is 'none' (it's
           in plans to support list<type>, mapping<type> and tuple<t1,t2,...>
           transformations). @optional input_parameter constant_value
           narrative_system_variable generated_value @optional
           target_argument_position target_property target_type_transform) ->
           structure: parameter "input_parameter" of String, parameter
           "constant_value" of unspecified object, parameter
           "narrative_system_variable" of String, parameter "generated_value"
           of type "AutoGeneratedValue" (prefix - optional string
           concatenated before generated part symbols - number of generated
           characters, optional, default is 8 suffix - optional string
           concatenated after generated part @optional prefix symbols suffix)
           -> structure: parameter "prefix" of String, parameter "symbols" of
           Long, parameter "suffix" of String, parameter
           "target_argument_position" of Long, parameter "target_property" of
           String, parameter "target_type_transform" of String, parameter
           "kb_service_output_mapping" of list of type
           "ServiceMethodOutputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set.
           service_method_output_path - list of properties and array element
           positions defining JSON-path traversing through which we can find
           necessary value. constant_value - constant value, could be even
           map/array, if not specified then 'input_parameter' or
           'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. target_property - name of field
           inside structure that will be send as arguement. Optional field,
           in case this field is not defined (or null) whole object will be
           sent as method argument instead of wrapping it by structure with
           inner property defined by 'target_property'. target_type_transform
           - none/string/int/float/list<type>/mapping<type>/ref, optional
           field, default is no transformation. @optional input_parameter
           service_method_output_path constant_value
           narrative_system_variable @optional target_property
           target_type_transform) -> structure: parameter "input_parameter"
           of String, parameter "service_method_output_path" of list of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "output_mapping" of list of type "OutputMapping"
           (This structure should be used in case narrative method doesn't
           run any back-end code. See docs for ServiceMethodOutputMapping
           type for details.) -> structure: parameter "input_parameter" of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "job_id_output_field" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_method_spec", [params], self._service_ver, context
        )

    def get_app_brief_info(self, params, context=None):
        """
        :param params: instance of type "GetAppParams" -> structure:
           parameter "ids" of list of String
        :returns: instance of list of type "AppBriefInfo" -> structure:
           parameter "id" of String, parameter "name" of String, parameter
           "ver" of String, parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "header" of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter
           "loading_error" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_app_brief_info", [params], self._service_ver, context
        )

    def get_app_full_info(self, params, context=None):
        """
        :param params: instance of type "GetAppParams" -> structure:
           parameter "ids" of list of String
        :returns: instance of list of type "AppFullInfo" -> structure:
           parameter "id" of String, parameter "name" of String, parameter
           "ver" of String, parameter "authors" of list of type "username",
           parameter "contact" of type "email", parameter "subtitle" of
           String, parameter "tooltip" of String, parameter "header" of
           String, parameter "description" of String, parameter
           "technical_description" of String, parameter "suggestions" of type
           "Suggestions" -> structure: parameter "related_methods" of list of
           String, parameter "next_methods" of list of String, parameter
           "related_apps" of list of String, parameter "next_apps" of list of
           String, parameter "categories" of list of String, parameter "icon"
           of type "Icon" -> structure: parameter "url" of type "url",
           parameter "screenshots" of list of type "ScreenShot" -> structure:
           parameter "url" of type "url"
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_app_full_info", [params], self._service_ver, context
        )

    def get_app_spec(self, params, context=None):
        """
        :param params: instance of type "GetAppParams" -> structure:
           parameter "ids" of list of String
        :returns: instance of list of type "AppSpec" (typedef structure { }
           AppBehavior;) -> structure: parameter "info" of type
           "AppBriefInfo" -> structure: parameter "id" of String, parameter
           "name" of String, parameter "ver" of String, parameter "subtitle"
           of String, parameter "tooltip" of String, parameter "header" of
           String, parameter "icon" of type "Icon" -> structure: parameter
           "url" of type "url", parameter "categories" of list of String,
           parameter "loading_error" of String, parameter "steps" of list of
           type "AppSteps" -> structure: parameter "step_id" of String,
           parameter "method_id" of String, parameter "input_mapping" of list
           of type "AppStepInputMapping" (Defines how any input to a
           particular step should be populated based step_source - the id of
           the step to pull the parameter from isFromInput - set to true (1)
           to indicate that the input should be pulled from the input
           parameters of the step_source.  This is the only supported option.
           In the future, it may be possible to pull the input from the
           output of the previous step (which would require special handling
           of the app runner). from - the id of the input parameter/output
           field in step_source to retrieve the value to - the name of the
           parameter to automatically populate in this step transformation -
           not supported yet, but may be used to indicate if a transformation
           of the value should occur when mapping the input to this step
           //@optional transformation) -> structure: parameter "step_source"
           of String, parameter "is_from_input" of type "boolean" (@range
           [0,1]), parameter "from" of String, parameter "to" of String,
           parameter "description" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_app_spec", [params], self._service_ver, context
        )

    def get_type_info(self, params, context=None):
        """
        :param params: instance of type "GetTypeParams" -> structure:
           parameter "type_names" of list of String
        :returns: instance of list of type "TypeInfo" (export_functions -
           optional mapping from UI label to exporter SDK local function.
           @optional icon landing_page_url_prefix loading_error) ->
           structure: parameter "type_name" of String, parameter "name" of
           String, parameter "subtitle" of String, parameter "tooltip" of
           String, parameter "description" of String, parameter "icon" of
           type "ScreenShot" -> structure: parameter "url" of type "url",
           parameter "view_method_ids" of list of String, parameter
           "import_method_ids" of list of String, parameter
           "export_functions" of mapping from String to String, parameter
           "landing_page_url_prefix" of String, parameter "loading_error" of
           String
        """
        return self._client.call_method(
            "NarrativeMethodStore.get_type_info", [params], self._service_ver, context
        )

    def validate_method(self, params, context=None):
        """
        :param params: instance of type "ValidateMethodParams" (verbose -
           flag for adding more details into error messages (like stack
           traces).) -> structure: parameter "id" of String, parameter
           "spec_json" of String, parameter "display_yaml" of String,
           parameter "extra_files" of mapping from String to String,
           parameter "verbose" of type "boolean" (@range [0,1])
        :returns: instance of type "ValidationResults" -> structure:
           parameter "is_valid" of type "boolean" (@range [0,1]), parameter
           "errors" of list of String, parameter "warnings" of list of
           String, parameter "app_full_info" of type "AppFullInfo" ->
           structure: parameter "id" of String, parameter "name" of String,
           parameter "ver" of String, parameter "authors" of list of type
           "username", parameter "contact" of type "email", parameter
           "subtitle" of String, parameter "tooltip" of String, parameter
           "header" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "suggestions" of type
           "Suggestions" -> structure: parameter "related_methods" of list of
           String, parameter "next_methods" of list of String, parameter
           "related_apps" of list of String, parameter "next_apps" of list of
           String, parameter "categories" of list of String, parameter "icon"
           of type "Icon" -> structure: parameter "url" of type "url",
           parameter "screenshots" of list of type "ScreenShot" -> structure:
           parameter "url" of type "url", parameter "app_spec" of type
           "AppSpec" (typedef structure { } AppBehavior;) -> structure:
           parameter "info" of type "AppBriefInfo" -> structure: parameter
           "id" of String, parameter "name" of String, parameter "ver" of
           String, parameter "subtitle" of String, parameter "tooltip" of
           String, parameter "header" of String, parameter "icon" of type
           "Icon" -> structure: parameter "url" of type "url", parameter
           "categories" of list of String, parameter "loading_error" of
           String, parameter "steps" of list of type "AppSteps" -> structure:
           parameter "step_id" of String, parameter "method_id" of String,
           parameter "input_mapping" of list of type "AppStepInputMapping"
           (Defines how any input to a particular step should be populated
           based step_source - the id of the step to pull the parameter from
           isFromInput - set to true (1) to indicate that the input should be
           pulled from the input parameters of the step_source.  This is the
           only supported option.  In the future, it may be possible to pull
           the input from the output of the previous step (which would
           require special handling of the app runner). from - the id of the
           input parameter/output field in step_source to retrieve the value
           to - the name of the parameter to automatically populate in this
           step transformation - not supported yet, but may be used to
           indicate if a transformation of the value should occur when
           mapping the input to this step //@optional transformation) ->
           structure: parameter "step_source" of String, parameter
           "is_from_input" of type "boolean" (@range [0,1]), parameter "from"
           of String, parameter "to" of String, parameter "description" of
           String, parameter "method_full_info" of type "MethodFullInfo"
           (Full information about a method suitable for displaying a method
           landing page. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "authors" of list of type "username", parameter
           "kb_contributors" of list of type "username", parameter "contact"
           of type "email", parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "app_type" of String,
           parameter "suggestions" of type "Suggestions" -> structure:
           parameter "related_methods" of list of String, parameter
           "next_methods" of list of String, parameter "related_apps" of list
           of String, parameter "next_apps" of list of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter "screenshots"
           of list of type "ScreenShot" -> structure: parameter "url" of type
           "url", parameter "publications" of list of type "Publication"
           (Publication info can get complicated.  To keep things simple, we
           only allow a few things now: pmid - pubmed id, if present, we can
           use this id to pull all publication info we want display_text -
           what is shown to the user if there is no pubmed id, or if the
           pubmed id is not valid link - a link to the paper, also not needed
           if pmid is valid, but could be used if pubmed is down) ->
           structure: parameter "pmid" of String, parameter "display_text" of
           String, parameter "link" of type "url", parameter "method_spec" of
           type "MethodSpec" (The method specification which should provide
           enough information to render a default input widget for the
           method. replacement_text indicates the text that should replace
           the input boxes after the method has run.  You can refer to
           parameters by putting them in double curly braces (on the front
           end we will use the handlebars library). for example:  Ran flux
           balance analysis on model {{model_param}} with parameter 2 set to
           {{param2}}.) -> structure: parameter "info" of type
           "MethodBriefInfo" (Minimal information about a method suitable for
           displaying the method in a menu or navigator. input_types and
           output_types - sets of valid_ws_types occured in input/output
           parameters. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "icon" of type "Icon" -> structure: parameter "url" of
           type "url", parameter "categories" of list of String, parameter
           "loading_error" of String, parameter "authors" of list of type
           "username", parameter "input_types" of list of String, parameter
           "output_types" of list of String, parameter "app_type" of String,
           parameter "replacement_text" of String, parameter "widgets" of
           type "WidgetSpec" (specify the input / ouput widgets used for
           rendering) -> structure: parameter "input" of String, parameter
           "output" of String, parameter "parameters" of list of type
           "MethodParameter" (Description of a method parameter. id - id of
           the parameter, must be unique within the method ui_name - short
           name that is displayed to the user short_hint - short phrase or
           sentence describing the parameter description - longer and more
           technical description of the parameter field_type - one of: text |
           textarea | textsubdata | intslider | floatslider | checkbox |
           dropdown | radio | tab | file | dynamic_dropdown allow_mutiple -
           only supported for field_type text, allows entry of a list instead
           of a single value, default is 0 if set, the number of starting
           boxes will be either 1 or the number of elements in the
           default_values list optional - set to true to make the field
           optional, default is 0 advanced - set to true to make this an
           advanced option, default is 0 if an option is advanced, it should
           also be optional or have a default value disabled   - set to true
           to disable user input, default is 0 if disabled, a default value
           should be provided ui_class  - input | output | parameter value is
           autogenerated based on the specification which determines if it is
           an input parameter, output parameter, or just plain old parameter
           (input is generally an input data object, output is an output data
           object, and plain old parameter is more or less numbers, fixed
           selections, etc) valid_file_types - a list of staging area file
           types that are valid for the method parameter. This might apply to
           a text box, dropdown, dynamic dropdown, etc. depending on the
           context. The file type is available in the mappings key of the
           json response from staging service importer mappings endpoint.
           Each mapping has a file_type key containing the type. @optional
           text_options textarea_options intslider_options
           floatslider_options @optional checkbox_options dropdown_options
           radio_options tab_options dynamic_dropdown_options) -> structure:
           parameter "id" of String, parameter "ui_name" of String, parameter
           "short_hint" of String, parameter "description" of String,
           parameter "field_type" of String, parameter "allow_multiple" of
           type "boolean" (@range [0,1]), parameter "optional" of type
           "boolean" (@range [0,1]), parameter "advanced" of type "boolean"
           (@range [0,1]), parameter "disabled" of type "boolean" (@range
           [0,1]), parameter "ui_class" of String, parameter "default_values"
           of list of String, parameter "valid_file_types" of list of String,
           parameter "text_options" of type "TextOptions" (valid_ws_types  -
           list of valid ws types that can be used for input validate_as
           - int | float | nonnumeric | none is_output_name  - true if the
           user is specifying an output name, false otherwise, default is
           false) -> structure: parameter "valid_ws_types" of list of String,
           parameter "validate_as" of String, parameter "is_output_name" of
           type "boolean" (@range [0,1]), parameter "placeholder" of String,
           parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_float" of Double, parameter "max_float" of Double,
           parameter "regex_constraint" of list of type "RegexMatcher" (regex
           - regular expression in javascript syntax error_text - message
           displayed if the input does not statisfy this constraint match -
           set to 1 to check if the input matches this regex, set to 0 to
           check if input does not match this regex.  default is 1) ->
           structure: parameter "regex" of String, parameter "error_text" of
           String, parameter "match" of type "boolean" (@range [0,1]),
           parameter "textarea_options" of type "TextAreaOptions" ->
           structure: parameter "n_rows" of Long, parameter "placeholder" of
           String, parameter "intslider_options" of type "IntSliderOptions"
           -> structure: parameter "min" of Long, parameter "max" of Long,
           parameter "step" of Long, parameter "floatslider_options" of type
           "FloatSliderOptions" -> structure: parameter "min" of Double,
           parameter "max" of Double, parameter "checkbox_options" of type
           "CheckboxOptions" -> structure: parameter "checked_value" of Long,
           parameter "unchecked_value" of Long, parameter "dropdown_options"
           of type "DropdownOptions" (Defines a parameter field that allows
           users to select from a list of options. It will appear as a
           dropdown (a 'select' HTML element). Parameters: options   - a list
           of maps with keys 'value' and 'display'; 'display' is the text
           presented to the user, and 'value' is what is passed from the
           element when it is submitted. See the DropDownOption type for the
           spec. multiselection - If true, multiple selections are allowed
           from a single field, and the parameter will return a list, rather
           than a single value. This parameter is optional. Default = false)
           -> structure: parameter "options" of list of type "DropdownOption"
           (value is what is passed from the form, display is how the
           selection is shown to the user) -> structure: parameter "value" of
           String, parameter "display" of String, parameter "multiselection"
           of type "boolean" (@range [0,1]), parameter
           "dynamic_dropdown_options" of type "DynamicDropdownOptions"
           (Defines a parameter field that allows autocomplete based on a
           call to a dynamic service. For instance, selection of files from
           the staging_service or from kbase_search. It will appear as a text
           field with dropdown similar to selection of other WS data objects.
           data_source - one of ftp_staging | search | custom. Provides
           sensible defaults to for the following parameters for a common
           type of dropdown which can be overwritten service_function - name
           of SDK method including prefix with SDK module started up as
           dynamic service (it's fully qualified method name where module and
           method are separated by '.'). service_version - optional version
           of module used in service_function (default value is 'release').
           service_params - The parameters that will be supplied to the
           dynamic service call as JSON. The special text
           "{{dynamic_dropdown_input}}" will be replaced by the value of user
           input at call time. selection_id - The value of this key will be
           extracted from the item selected by the user. The item is expected
           to be represented as a map. exact_match_on - if exactly matching
           the user's input to the results from the dynamic service is
           required, this field contains the name of the key in the results
           document that contains the value to which the user's input should
           be matched. May or may not be the same key as 'selection_id'.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the keys in the items as
           variable names) multiselection - If true, then multiple selections
           are allowed in a single input field. This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false query_on_empty_input - true, the default, to send a request
           to the dynamic service even if there is no input.
           result_array_index - The index of the result array returned from
           the dynamic service from where the selection items will be
           extracted. Default 0. path_to_selection_items - The path into the
           result data object to the list of selection items. If missing, the
           data at the specified result array index is used (defaulting to
           the first returned value in the list). The selection items data
           structure must be a list of mappings or structures. As an example
           of correctly specifying where the selection items are within the
           data structure returned from the dynamic service, if the data
           structure is: [ "foo",                # return array position 0 {
           # return array position 1 "interesting_data": [ "baz", "boo", [
           {"id": 1, "name": "foo" }, ... {"id": 42, "name": "wowbagger" } ],
           "bat" ] }, "bar"                # return array position 2 ] Note
           that KBase dynamic services all return an array of values, even
           for single-value returns, as the KIDL spec allows specifying
           multiple return values per function. In this case:
           result_array_index would be 1 path_to_selection_items would be
           ["interesting_data", "2"] selection_id would be "name" The
           selection items would be the 42 items represented by {"id": 1,
           "name": "foo" }, ... {"id": 42, "name": "wowbagger" } Selection
           items must always be a list of maps. The final value returned when
           the user selects a value would be the "name" field - "foo" if the
           first item is selected, and "wowbagger" if the last item is
           selected.) -> structure: parameter "data_source" of String,
           parameter "service_function" of String, parameter
           "service_version" of String, parameter "service_params" of
           unspecified object, parameter "selection_id" of String, parameter
           "exact_match_on" of String, parameter "description_template" of
           String, parameter "multiselection" of type "boolean" (@range
           [0,1]), parameter "query_on_empty_input" of type "boolean" (@range
           [0,1]), parameter "result_array_index" of Long, parameter
           "path_to_selection_items" of list of String, parameter
           "radio_options" of type "RadioOptions" -> structure: parameter
           "id_order" of list of String, parameter "ids_to_options" of
           mapping from String to String, parameter "ids_to_tooltip" of
           mapping from String to String, parameter "tab_options" of type
           "TabOptions" -> structure: parameter "tab_id_order" of list of
           String, parameter "tab_id_to_tab_name" of mapping from String to
           String, parameter "tab_id_to_param_ids" of mapping from String to
           list of String, parameter "textsubdata_options" of type
           "TextSubdataOptions" (Defines a parameter field that allows
           autocomplete based on subdata of an existing object.  For
           instance, selection of feature ids from a Genome object.  It will
           appear as a text field with dropdown similar to selection of other
           WS data objects. placeholder - placeholder text to display in the
           field multiselection - if true, then multiple selections are
           allowed in a single input field.  This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false show_src_obj - if true, then the dropdown will indicate the
           ids along with some text indicating what data object the subdata
           was retrieved from. Default=true allow_custom - if true, then user
           specified inputs not found in the list are accepted.  if false,
           users can only select from the valid list of selections.
           Default=false) -> structure: parameter "placeholder" of String,
           parameter "multiselection" of type "boolean" (@range [0,1]),
           parameter "show_src_obj" of type "boolean" (@range [0,1]),
           parameter "allow_custom" of type "boolean" (@range [0,1]),
           parameter "subdata_selection" of type "SubdataSelection"
           (Information about a subdata selection constant_ref - can be set
           as a fixed reference(s) to data objects so that the dropdown is
           always populated with a particular WS object - useful for say
           populating based on an ontology or some other library of default
           terms, such as compounds parameter_id - pick the terms from a user
           specified parameter in the same method path_to_subdata - specific
           path to a list or map that should be used to populate the fields
           selection_id - If the path_to_subdata is to a list of objects, use
           this to specify which field of that object should be used as the
           primary ID selection_description - Use this to specify (if the
           subdata is a list or map) which fields should be included as a
           short description of the selection.  For features, for instance,
           this may include the feature function, or feature aliases.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the name of items in the
           selection_description list as variable names) service_function -
           optional name of SDK method including prefix with SDK module
           started up as dynamic service (it's fully qualified method name
           where module and method are separated by '.') service_version -
           optional version of module used in service_function (default value
           is 'release').) -> structure: parameter "constant_ref" of list of
           String, parameter "parameter_id" of String, parameter
           "subdata_included" of list of String, parameter "path_to_subdata"
           of list of String, parameter "selection_id" of String, parameter
           "selection_description" of list of String, parameter
           "description_template" of String, parameter "service_function" of
           String, parameter "service_version" of String, parameter
           "fixed_parameters" of list of type "FixedMethodParameter" (a fixed
           parameter that does not appear in the method input forms, but is
           informational for users in describing a backend parameter that
           cannot be changed (e.g. if a service picks a fixed parameter for
           say Blast)) -> structure: parameter "ui_name" of String, parameter
           "description" of String, parameter "parameter_groups" of list of
           type "MethodParameterGroup" (Description of a method parameter. id
           - id of the parameter group, must be unique within the method
           among all parameters and groups, parameter_ids - IDs of parameters
           included in this group, ui_name - short name that is displayed to
           the user, short_hint - short phrase or sentence describing the
           parameter group, description - longer and more technical
           description of the parameter group (long-hint), allow_mutiple -
           allows entry of a list instead of a single structure, default is 0
           if set, the number of starting boxes will be either 1 or the
           number of elements in the default_values list, optional - set to
           true to make the group optional, default is 0, advanced - set to
           true to make this an advanced option, default is 0 if an option is
           advanced, it should also be optional or have a default value,
           id_mapping - optional mapping for parameter IDs used to pack group
           into resulting value structure (not used for non-multiple groups),
           with_border - flag for one-copy groups saying to show these group
           with border. @optional id_mapping) -> structure: parameter "id" of
           String, parameter "parameter_ids" of list of String, parameter
           "ui_name" of String, parameter "short_hint" of String, parameter
           "description" of String, parameter "allow_multiple" of type
           "boolean" (@range [0,1]), parameter "optional" of type "boolean"
           (@range [0,1]), parameter "advanced" of type "boolean" (@range
           [0,1]), parameter "id_mapping" of mapping from String to String,
           parameter "with_border" of type "boolean" (@range [0,1]),
           parameter "behavior" of type "MethodBehavior" (Determines how the
           method is handled when run. kb_service_name - name of service
           which will be part of fully qualified method name, optional field
           (in case it's not defined developer should enter fully qualified
           name with dot into 'kb_service_method'. kb_service_version -
           optional git commit hash defining version of repo registered
           dynamically. kb_service_input_mapping - mapping from input
           parameters to input service method arguments.
           kb_service_output_mapping - mapping from output of service method
           to final output of narrative method. resource_estimator_module -
           optional module for the resource estimator method.
           resource_estimator_method - optional name of method for estimating
           resource requirements. output_mapping - mapping from input to
           final output of narrative method to support steps without back-end
           operations. @optional kb_service_name kb_service_method
           kb_service_input_mapping kb_service_output_mapping
           resource_estimator_module resource_estimator_method) -> structure:
           parameter "kb_service_url" of String, parameter "kb_service_name"
           of String, parameter "kb_service_version" of String, parameter
           "kb_service_method" of String, parameter
           "resource_estimator_module" of String, parameter
           "resource_estimator_method" of String, parameter
           "kb_service_input_mapping" of list of type
           "ServiceMethodInputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set. constant_value -
           constant value, could be even map/array, if not specified then
           'input_parameter' or 'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. generated_value - automatically
           generated value; it could be used as independent mode or when
           another mode finished with empty value (for example in case
           'input_parameter' is defined but value of this parameter is left
           empty by user); so this mode has lower priority when used with
           another mode. target_argument_position - position of argument in
           RPC-method call, optional field, default value is 0.
           target_property - name of field inside structure that will be send
           as argument. Optional field, in case this field is not defined (or
           null) whole object will be sent as method argument instead of
           wrapping it by structure with inner property defined by
           'target_property'. target_type_transform -
           none/string/int/float/ref, optional field, default is 'none' (it's
           in plans to support list<type>, mapping<type> and tuple<t1,t2,...>
           transformations). @optional input_parameter constant_value
           narrative_system_variable generated_value @optional
           target_argument_position target_property target_type_transform) ->
           structure: parameter "input_parameter" of String, parameter
           "constant_value" of unspecified object, parameter
           "narrative_system_variable" of String, parameter "generated_value"
           of type "AutoGeneratedValue" (prefix - optional string
           concatenated before generated part symbols - number of generated
           characters, optional, default is 8 suffix - optional string
           concatenated after generated part @optional prefix symbols suffix)
           -> structure: parameter "prefix" of String, parameter "symbols" of
           Long, parameter "suffix" of String, parameter
           "target_argument_position" of Long, parameter "target_property" of
           String, parameter "target_type_transform" of String, parameter
           "kb_service_output_mapping" of list of type
           "ServiceMethodOutputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set.
           service_method_output_path - list of properties and array element
           positions defining JSON-path traversing through which we can find
           necessary value. constant_value - constant value, could be even
           map/array, if not specified then 'input_parameter' or
           'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. target_property - name of field
           inside structure that will be send as arguement. Optional field,
           in case this field is not defined (or null) whole object will be
           sent as method argument instead of wrapping it by structure with
           inner property defined by 'target_property'. target_type_transform
           - none/string/int/float/list<type>/mapping<type>/ref, optional
           field, default is no transformation. @optional input_parameter
           service_method_output_path constant_value
           narrative_system_variable @optional target_property
           target_type_transform) -> structure: parameter "input_parameter"
           of String, parameter "service_method_output_path" of list of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "output_mapping" of list of type "OutputMapping"
           (This structure should be used in case narrative method doesn't
           run any back-end code. See docs for ServiceMethodOutputMapping
           type for details.) -> structure: parameter "input_parameter" of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "job_id_output_field" of String, parameter
           "type_info" of type "TypeInfo" (export_functions - optional
           mapping from UI label to exporter SDK local function. @optional
           icon landing_page_url_prefix loading_error) -> structure:
           parameter "type_name" of String, parameter "name" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "description" of String, parameter "icon" of type
           "ScreenShot" -> structure: parameter "url" of type "url",
           parameter "view_method_ids" of list of String, parameter
           "import_method_ids" of list of String, parameter
           "export_functions" of mapping from String to String, parameter
           "landing_page_url_prefix" of String, parameter "loading_error" of
           String
        """
        return self._client.call_method(
            "NarrativeMethodStore.validate_method", [params], self._service_ver, context
        )

    def validate_app(self, params, context=None):
        """
        :param params: instance of type "ValidateAppParams" -> structure:
           parameter "id" of String, parameter "spec_json" of String,
           parameter "display_yaml" of String, parameter "extra_files" of
           mapping from String to String
        :returns: instance of type "ValidationResults" -> structure:
           parameter "is_valid" of type "boolean" (@range [0,1]), parameter
           "errors" of list of String, parameter "warnings" of list of
           String, parameter "app_full_info" of type "AppFullInfo" ->
           structure: parameter "id" of String, parameter "name" of String,
           parameter "ver" of String, parameter "authors" of list of type
           "username", parameter "contact" of type "email", parameter
           "subtitle" of String, parameter "tooltip" of String, parameter
           "header" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "suggestions" of type
           "Suggestions" -> structure: parameter "related_methods" of list of
           String, parameter "next_methods" of list of String, parameter
           "related_apps" of list of String, parameter "next_apps" of list of
           String, parameter "categories" of list of String, parameter "icon"
           of type "Icon" -> structure: parameter "url" of type "url",
           parameter "screenshots" of list of type "ScreenShot" -> structure:
           parameter "url" of type "url", parameter "app_spec" of type
           "AppSpec" (typedef structure { } AppBehavior;) -> structure:
           parameter "info" of type "AppBriefInfo" -> structure: parameter
           "id" of String, parameter "name" of String, parameter "ver" of
           String, parameter "subtitle" of String, parameter "tooltip" of
           String, parameter "header" of String, parameter "icon" of type
           "Icon" -> structure: parameter "url" of type "url", parameter
           "categories" of list of String, parameter "loading_error" of
           String, parameter "steps" of list of type "AppSteps" -> structure:
           parameter "step_id" of String, parameter "method_id" of String,
           parameter "input_mapping" of list of type "AppStepInputMapping"
           (Defines how any input to a particular step should be populated
           based step_source - the id of the step to pull the parameter from
           isFromInput - set to true (1) to indicate that the input should be
           pulled from the input parameters of the step_source.  This is the
           only supported option.  In the future, it may be possible to pull
           the input from the output of the previous step (which would
           require special handling of the app runner). from - the id of the
           input parameter/output field in step_source to retrieve the value
           to - the name of the parameter to automatically populate in this
           step transformation - not supported yet, but may be used to
           indicate if a transformation of the value should occur when
           mapping the input to this step //@optional transformation) ->
           structure: parameter "step_source" of String, parameter
           "is_from_input" of type "boolean" (@range [0,1]), parameter "from"
           of String, parameter "to" of String, parameter "description" of
           String, parameter "method_full_info" of type "MethodFullInfo"
           (Full information about a method suitable for displaying a method
           landing page. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "authors" of list of type "username", parameter
           "kb_contributors" of list of type "username", parameter "contact"
           of type "email", parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "app_type" of String,
           parameter "suggestions" of type "Suggestions" -> structure:
           parameter "related_methods" of list of String, parameter
           "next_methods" of list of String, parameter "related_apps" of list
           of String, parameter "next_apps" of list of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter "screenshots"
           of list of type "ScreenShot" -> structure: parameter "url" of type
           "url", parameter "publications" of list of type "Publication"
           (Publication info can get complicated.  To keep things simple, we
           only allow a few things now: pmid - pubmed id, if present, we can
           use this id to pull all publication info we want display_text -
           what is shown to the user if there is no pubmed id, or if the
           pubmed id is not valid link - a link to the paper, also not needed
           if pmid is valid, but could be used if pubmed is down) ->
           structure: parameter "pmid" of String, parameter "display_text" of
           String, parameter "link" of type "url", parameter "method_spec" of
           type "MethodSpec" (The method specification which should provide
           enough information to render a default input widget for the
           method. replacement_text indicates the text that should replace
           the input boxes after the method has run.  You can refer to
           parameters by putting them in double curly braces (on the front
           end we will use the handlebars library). for example:  Ran flux
           balance analysis on model {{model_param}} with parameter 2 set to
           {{param2}}.) -> structure: parameter "info" of type
           "MethodBriefInfo" (Minimal information about a method suitable for
           displaying the method in a menu or navigator. input_types and
           output_types - sets of valid_ws_types occured in input/output
           parameters. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "icon" of type "Icon" -> structure: parameter "url" of
           type "url", parameter "categories" of list of String, parameter
           "loading_error" of String, parameter "authors" of list of type
           "username", parameter "input_types" of list of String, parameter
           "output_types" of list of String, parameter "app_type" of String,
           parameter "replacement_text" of String, parameter "widgets" of
           type "WidgetSpec" (specify the input / ouput widgets used for
           rendering) -> structure: parameter "input" of String, parameter
           "output" of String, parameter "parameters" of list of type
           "MethodParameter" (Description of a method parameter. id - id of
           the parameter, must be unique within the method ui_name - short
           name that is displayed to the user short_hint - short phrase or
           sentence describing the parameter description - longer and more
           technical description of the parameter field_type - one of: text |
           textarea | textsubdata | intslider | floatslider | checkbox |
           dropdown | radio | tab | file | dynamic_dropdown allow_mutiple -
           only supported for field_type text, allows entry of a list instead
           of a single value, default is 0 if set, the number of starting
           boxes will be either 1 or the number of elements in the
           default_values list optional - set to true to make the field
           optional, default is 0 advanced - set to true to make this an
           advanced option, default is 0 if an option is advanced, it should
           also be optional or have a default value disabled   - set to true
           to disable user input, default is 0 if disabled, a default value
           should be provided ui_class  - input | output | parameter value is
           autogenerated based on the specification which determines if it is
           an input parameter, output parameter, or just plain old parameter
           (input is generally an input data object, output is an output data
           object, and plain old parameter is more or less numbers, fixed
           selections, etc) valid_file_types - a list of staging area file
           types that are valid for the method parameter. This might apply to
           a text box, dropdown, dynamic dropdown, etc. depending on the
           context. The file type is available in the mappings key of the
           json response from staging service importer mappings endpoint.
           Each mapping has a file_type key containing the type. @optional
           text_options textarea_options intslider_options
           floatslider_options @optional checkbox_options dropdown_options
           radio_options tab_options dynamic_dropdown_options) -> structure:
           parameter "id" of String, parameter "ui_name" of String, parameter
           "short_hint" of String, parameter "description" of String,
           parameter "field_type" of String, parameter "allow_multiple" of
           type "boolean" (@range [0,1]), parameter "optional" of type
           "boolean" (@range [0,1]), parameter "advanced" of type "boolean"
           (@range [0,1]), parameter "disabled" of type "boolean" (@range
           [0,1]), parameter "ui_class" of String, parameter "default_values"
           of list of String, parameter "valid_file_types" of list of String,
           parameter "text_options" of type "TextOptions" (valid_ws_types  -
           list of valid ws types that can be used for input validate_as
           - int | float | nonnumeric | none is_output_name  - true if the
           user is specifying an output name, false otherwise, default is
           false) -> structure: parameter "valid_ws_types" of list of String,
           parameter "validate_as" of String, parameter "is_output_name" of
           type "boolean" (@range [0,1]), parameter "placeholder" of String,
           parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_float" of Double, parameter "max_float" of Double,
           parameter "regex_constraint" of list of type "RegexMatcher" (regex
           - regular expression in javascript syntax error_text - message
           displayed if the input does not statisfy this constraint match -
           set to 1 to check if the input matches this regex, set to 0 to
           check if input does not match this regex.  default is 1) ->
           structure: parameter "regex" of String, parameter "error_text" of
           String, parameter "match" of type "boolean" (@range [0,1]),
           parameter "textarea_options" of type "TextAreaOptions" ->
           structure: parameter "n_rows" of Long, parameter "placeholder" of
           String, parameter "intslider_options" of type "IntSliderOptions"
           -> structure: parameter "min" of Long, parameter "max" of Long,
           parameter "step" of Long, parameter "floatslider_options" of type
           "FloatSliderOptions" -> structure: parameter "min" of Double,
           parameter "max" of Double, parameter "checkbox_options" of type
           "CheckboxOptions" -> structure: parameter "checked_value" of Long,
           parameter "unchecked_value" of Long, parameter "dropdown_options"
           of type "DropdownOptions" (Defines a parameter field that allows
           users to select from a list of options. It will appear as a
           dropdown (a 'select' HTML element). Parameters: options   - a list
           of maps with keys 'value' and 'display'; 'display' is the text
           presented to the user, and 'value' is what is passed from the
           element when it is submitted. See the DropDownOption type for the
           spec. multiselection - If true, multiple selections are allowed
           from a single field, and the parameter will return a list, rather
           than a single value. This parameter is optional. Default = false)
           -> structure: parameter "options" of list of type "DropdownOption"
           (value is what is passed from the form, display is how the
           selection is shown to the user) -> structure: parameter "value" of
           String, parameter "display" of String, parameter "multiselection"
           of type "boolean" (@range [0,1]), parameter
           "dynamic_dropdown_options" of type "DynamicDropdownOptions"
           (Defines a parameter field that allows autocomplete based on a
           call to a dynamic service. For instance, selection of files from
           the staging_service or from kbase_search. It will appear as a text
           field with dropdown similar to selection of other WS data objects.
           data_source - one of ftp_staging | search | custom. Provides
           sensible defaults to for the following parameters for a common
           type of dropdown which can be overwritten service_function - name
           of SDK method including prefix with SDK module started up as
           dynamic service (it's fully qualified method name where module and
           method are separated by '.'). service_version - optional version
           of module used in service_function (default value is 'release').
           service_params - The parameters that will be supplied to the
           dynamic service call as JSON. The special text
           "{{dynamic_dropdown_input}}" will be replaced by the value of user
           input at call time. selection_id - The value of this key will be
           extracted from the item selected by the user. The item is expected
           to be represented as a map. exact_match_on - if exactly matching
           the user's input to the results from the dynamic service is
           required, this field contains the name of the key in the results
           document that contains the value to which the user's input should
           be matched. May or may not be the same key as 'selection_id'.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the keys in the items as
           variable names) multiselection - If true, then multiple selections
           are allowed in a single input field. This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false query_on_empty_input - true, the default, to send a request
           to the dynamic service even if there is no input.
           result_array_index - The index of the result array returned from
           the dynamic service from where the selection items will be
           extracted. Default 0. path_to_selection_items - The path into the
           result data object to the list of selection items. If missing, the
           data at the specified result array index is used (defaulting to
           the first returned value in the list). The selection items data
           structure must be a list of mappings or structures. As an example
           of correctly specifying where the selection items are within the
           data structure returned from the dynamic service, if the data
           structure is: [ "foo",                # return array position 0 {
           # return array position 1 "interesting_data": [ "baz", "boo", [
           {"id": 1, "name": "foo" }, ... {"id": 42, "name": "wowbagger" } ],
           "bat" ] }, "bar"                # return array position 2 ] Note
           that KBase dynamic services all return an array of values, even
           for single-value returns, as the KIDL spec allows specifying
           multiple return values per function. In this case:
           result_array_index would be 1 path_to_selection_items would be
           ["interesting_data", "2"] selection_id would be "name" The
           selection items would be the 42 items represented by {"id": 1,
           "name": "foo" }, ... {"id": 42, "name": "wowbagger" } Selection
           items must always be a list of maps. The final value returned when
           the user selects a value would be the "name" field - "foo" if the
           first item is selected, and "wowbagger" if the last item is
           selected.) -> structure: parameter "data_source" of String,
           parameter "service_function" of String, parameter
           "service_version" of String, parameter "service_params" of
           unspecified object, parameter "selection_id" of String, parameter
           "exact_match_on" of String, parameter "description_template" of
           String, parameter "multiselection" of type "boolean" (@range
           [0,1]), parameter "query_on_empty_input" of type "boolean" (@range
           [0,1]), parameter "result_array_index" of Long, parameter
           "path_to_selection_items" of list of String, parameter
           "radio_options" of type "RadioOptions" -> structure: parameter
           "id_order" of list of String, parameter "ids_to_options" of
           mapping from String to String, parameter "ids_to_tooltip" of
           mapping from String to String, parameter "tab_options" of type
           "TabOptions" -> structure: parameter "tab_id_order" of list of
           String, parameter "tab_id_to_tab_name" of mapping from String to
           String, parameter "tab_id_to_param_ids" of mapping from String to
           list of String, parameter "textsubdata_options" of type
           "TextSubdataOptions" (Defines a parameter field that allows
           autocomplete based on subdata of an existing object.  For
           instance, selection of feature ids from a Genome object.  It will
           appear as a text field with dropdown similar to selection of other
           WS data objects. placeholder - placeholder text to display in the
           field multiselection - if true, then multiple selections are
           allowed in a single input field.  This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false show_src_obj - if true, then the dropdown will indicate the
           ids along with some text indicating what data object the subdata
           was retrieved from. Default=true allow_custom - if true, then user
           specified inputs not found in the list are accepted.  if false,
           users can only select from the valid list of selections.
           Default=false) -> structure: parameter "placeholder" of String,
           parameter "multiselection" of type "boolean" (@range [0,1]),
           parameter "show_src_obj" of type "boolean" (@range [0,1]),
           parameter "allow_custom" of type "boolean" (@range [0,1]),
           parameter "subdata_selection" of type "SubdataSelection"
           (Information about a subdata selection constant_ref - can be set
           as a fixed reference(s) to data objects so that the dropdown is
           always populated with a particular WS object - useful for say
           populating based on an ontology or some other library of default
           terms, such as compounds parameter_id - pick the terms from a user
           specified parameter in the same method path_to_subdata - specific
           path to a list or map that should be used to populate the fields
           selection_id - If the path_to_subdata is to a list of objects, use
           this to specify which field of that object should be used as the
           primary ID selection_description - Use this to specify (if the
           subdata is a list or map) which fields should be included as a
           short description of the selection.  For features, for instance,
           this may include the feature function, or feature aliases.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the name of items in the
           selection_description list as variable names) service_function -
           optional name of SDK method including prefix with SDK module
           started up as dynamic service (it's fully qualified method name
           where module and method are separated by '.') service_version -
           optional version of module used in service_function (default value
           is 'release').) -> structure: parameter "constant_ref" of list of
           String, parameter "parameter_id" of String, parameter
           "subdata_included" of list of String, parameter "path_to_subdata"
           of list of String, parameter "selection_id" of String, parameter
           "selection_description" of list of String, parameter
           "description_template" of String, parameter "service_function" of
           String, parameter "service_version" of String, parameter
           "fixed_parameters" of list of type "FixedMethodParameter" (a fixed
           parameter that does not appear in the method input forms, but is
           informational for users in describing a backend parameter that
           cannot be changed (e.g. if a service picks a fixed parameter for
           say Blast)) -> structure: parameter "ui_name" of String, parameter
           "description" of String, parameter "parameter_groups" of list of
           type "MethodParameterGroup" (Description of a method parameter. id
           - id of the parameter group, must be unique within the method
           among all parameters and groups, parameter_ids - IDs of parameters
           included in this group, ui_name - short name that is displayed to
           the user, short_hint - short phrase or sentence describing the
           parameter group, description - longer and more technical
           description of the parameter group (long-hint), allow_mutiple -
           allows entry of a list instead of a single structure, default is 0
           if set, the number of starting boxes will be either 1 or the
           number of elements in the default_values list, optional - set to
           true to make the group optional, default is 0, advanced - set to
           true to make this an advanced option, default is 0 if an option is
           advanced, it should also be optional or have a default value,
           id_mapping - optional mapping for parameter IDs used to pack group
           into resulting value structure (not used for non-multiple groups),
           with_border - flag for one-copy groups saying to show these group
           with border. @optional id_mapping) -> structure: parameter "id" of
           String, parameter "parameter_ids" of list of String, parameter
           "ui_name" of String, parameter "short_hint" of String, parameter
           "description" of String, parameter "allow_multiple" of type
           "boolean" (@range [0,1]), parameter "optional" of type "boolean"
           (@range [0,1]), parameter "advanced" of type "boolean" (@range
           [0,1]), parameter "id_mapping" of mapping from String to String,
           parameter "with_border" of type "boolean" (@range [0,1]),
           parameter "behavior" of type "MethodBehavior" (Determines how the
           method is handled when run. kb_service_name - name of service
           which will be part of fully qualified method name, optional field
           (in case it's not defined developer should enter fully qualified
           name with dot into 'kb_service_method'. kb_service_version -
           optional git commit hash defining version of repo registered
           dynamically. kb_service_input_mapping - mapping from input
           parameters to input service method arguments.
           kb_service_output_mapping - mapping from output of service method
           to final output of narrative method. resource_estimator_module -
           optional module for the resource estimator method.
           resource_estimator_method - optional name of method for estimating
           resource requirements. output_mapping - mapping from input to
           final output of narrative method to support steps without back-end
           operations. @optional kb_service_name kb_service_method
           kb_service_input_mapping kb_service_output_mapping
           resource_estimator_module resource_estimator_method) -> structure:
           parameter "kb_service_url" of String, parameter "kb_service_name"
           of String, parameter "kb_service_version" of String, parameter
           "kb_service_method" of String, parameter
           "resource_estimator_module" of String, parameter
           "resource_estimator_method" of String, parameter
           "kb_service_input_mapping" of list of type
           "ServiceMethodInputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set. constant_value -
           constant value, could be even map/array, if not specified then
           'input_parameter' or 'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. generated_value - automatically
           generated value; it could be used as independent mode or when
           another mode finished with empty value (for example in case
           'input_parameter' is defined but value of this parameter is left
           empty by user); so this mode has lower priority when used with
           another mode. target_argument_position - position of argument in
           RPC-method call, optional field, default value is 0.
           target_property - name of field inside structure that will be send
           as argument. Optional field, in case this field is not defined (or
           null) whole object will be sent as method argument instead of
           wrapping it by structure with inner property defined by
           'target_property'. target_type_transform -
           none/string/int/float/ref, optional field, default is 'none' (it's
           in plans to support list<type>, mapping<type> and tuple<t1,t2,...>
           transformations). @optional input_parameter constant_value
           narrative_system_variable generated_value @optional
           target_argument_position target_property target_type_transform) ->
           structure: parameter "input_parameter" of String, parameter
           "constant_value" of unspecified object, parameter
           "narrative_system_variable" of String, parameter "generated_value"
           of type "AutoGeneratedValue" (prefix - optional string
           concatenated before generated part symbols - number of generated
           characters, optional, default is 8 suffix - optional string
           concatenated after generated part @optional prefix symbols suffix)
           -> structure: parameter "prefix" of String, parameter "symbols" of
           Long, parameter "suffix" of String, parameter
           "target_argument_position" of Long, parameter "target_property" of
           String, parameter "target_type_transform" of String, parameter
           "kb_service_output_mapping" of list of type
           "ServiceMethodOutputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set.
           service_method_output_path - list of properties and array element
           positions defining JSON-path traversing through which we can find
           necessary value. constant_value - constant value, could be even
           map/array, if not specified then 'input_parameter' or
           'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. target_property - name of field
           inside structure that will be send as arguement. Optional field,
           in case this field is not defined (or null) whole object will be
           sent as method argument instead of wrapping it by structure with
           inner property defined by 'target_property'. target_type_transform
           - none/string/int/float/list<type>/mapping<type>/ref, optional
           field, default is no transformation. @optional input_parameter
           service_method_output_path constant_value
           narrative_system_variable @optional target_property
           target_type_transform) -> structure: parameter "input_parameter"
           of String, parameter "service_method_output_path" of list of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "output_mapping" of list of type "OutputMapping"
           (This structure should be used in case narrative method doesn't
           run any back-end code. See docs for ServiceMethodOutputMapping
           type for details.) -> structure: parameter "input_parameter" of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "job_id_output_field" of String, parameter
           "type_info" of type "TypeInfo" (export_functions - optional
           mapping from UI label to exporter SDK local function. @optional
           icon landing_page_url_prefix loading_error) -> structure:
           parameter "type_name" of String, parameter "name" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "description" of String, parameter "icon" of type
           "ScreenShot" -> structure: parameter "url" of type "url",
           parameter "view_method_ids" of list of String, parameter
           "import_method_ids" of list of String, parameter
           "export_functions" of mapping from String to String, parameter
           "landing_page_url_prefix" of String, parameter "loading_error" of
           String
        """
        return self._client.call_method(
            "NarrativeMethodStore.validate_app", [params], self._service_ver, context
        )

    def validate_type(self, params, context=None):
        """
        :param params: instance of type "ValidateTypeParams" -> structure:
           parameter "id" of String, parameter "spec_json" of String,
           parameter "display_yaml" of String, parameter "extra_files" of
           mapping from String to String
        :returns: instance of type "ValidationResults" -> structure:
           parameter "is_valid" of type "boolean" (@range [0,1]), parameter
           "errors" of list of String, parameter "warnings" of list of
           String, parameter "app_full_info" of type "AppFullInfo" ->
           structure: parameter "id" of String, parameter "name" of String,
           parameter "ver" of String, parameter "authors" of list of type
           "username", parameter "contact" of type "email", parameter
           "subtitle" of String, parameter "tooltip" of String, parameter
           "header" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "suggestions" of type
           "Suggestions" -> structure: parameter "related_methods" of list of
           String, parameter "next_methods" of list of String, parameter
           "related_apps" of list of String, parameter "next_apps" of list of
           String, parameter "categories" of list of String, parameter "icon"
           of type "Icon" -> structure: parameter "url" of type "url",
           parameter "screenshots" of list of type "ScreenShot" -> structure:
           parameter "url" of type "url", parameter "app_spec" of type
           "AppSpec" (typedef structure { } AppBehavior;) -> structure:
           parameter "info" of type "AppBriefInfo" -> structure: parameter
           "id" of String, parameter "name" of String, parameter "ver" of
           String, parameter "subtitle" of String, parameter "tooltip" of
           String, parameter "header" of String, parameter "icon" of type
           "Icon" -> structure: parameter "url" of type "url", parameter
           "categories" of list of String, parameter "loading_error" of
           String, parameter "steps" of list of type "AppSteps" -> structure:
           parameter "step_id" of String, parameter "method_id" of String,
           parameter "input_mapping" of list of type "AppStepInputMapping"
           (Defines how any input to a particular step should be populated
           based step_source - the id of the step to pull the parameter from
           isFromInput - set to true (1) to indicate that the input should be
           pulled from the input parameters of the step_source.  This is the
           only supported option.  In the future, it may be possible to pull
           the input from the output of the previous step (which would
           require special handling of the app runner). from - the id of the
           input parameter/output field in step_source to retrieve the value
           to - the name of the parameter to automatically populate in this
           step transformation - not supported yet, but may be used to
           indicate if a transformation of the value should occur when
           mapping the input to this step //@optional transformation) ->
           structure: parameter "step_source" of String, parameter
           "is_from_input" of type "boolean" (@range [0,1]), parameter "from"
           of String, parameter "to" of String, parameter "description" of
           String, parameter "method_full_info" of type "MethodFullInfo"
           (Full information about a method suitable for displaying a method
           landing page. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "authors" of list of type "username", parameter
           "kb_contributors" of list of type "username", parameter "contact"
           of type "email", parameter "subtitle" of String, parameter
           "tooltip" of String, parameter "description" of String, parameter
           "technical_description" of String, parameter "app_type" of String,
           parameter "suggestions" of type "Suggestions" -> structure:
           parameter "related_methods" of list of String, parameter
           "next_methods" of list of String, parameter "related_apps" of list
           of String, parameter "next_apps" of list of String, parameter
           "icon" of type "Icon" -> structure: parameter "url" of type "url",
           parameter "categories" of list of String, parameter "screenshots"
           of list of type "ScreenShot" -> structure: parameter "url" of type
           "url", parameter "publications" of list of type "Publication"
           (Publication info can get complicated.  To keep things simple, we
           only allow a few things now: pmid - pubmed id, if present, we can
           use this id to pull all publication info we want display_text -
           what is shown to the user if there is no pubmed id, or if the
           pubmed id is not valid link - a link to the paper, also not needed
           if pmid is valid, but could be used if pubmed is down) ->
           structure: parameter "pmid" of String, parameter "display_text" of
           String, parameter "link" of type "url", parameter "method_spec" of
           type "MethodSpec" (The method specification which should provide
           enough information to render a default input widget for the
           method. replacement_text indicates the text that should replace
           the input boxes after the method has run.  You can refer to
           parameters by putting them in double curly braces (on the front
           end we will use the handlebars library). for example:  Ran flux
           balance analysis on model {{model_param}} with parameter 2 set to
           {{param2}}.) -> structure: parameter "info" of type
           "MethodBriefInfo" (Minimal information about a method suitable for
           displaying the method in a menu or navigator. input_types and
           output_types - sets of valid_ws_types occured in input/output
           parameters. git_commit_hash - optional repo version defined for
           dynamically registered methods. app_type - is one of: "app",
           "viewer", "editor".) -> structure: parameter "id" of String,
           parameter "module_name" of String, parameter "git_commit_hash" of
           String, parameter "name" of String, parameter "ver" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "icon" of type "Icon" -> structure: parameter "url" of
           type "url", parameter "categories" of list of String, parameter
           "loading_error" of String, parameter "authors" of list of type
           "username", parameter "input_types" of list of String, parameter
           "output_types" of list of String, parameter "app_type" of String,
           parameter "replacement_text" of String, parameter "widgets" of
           type "WidgetSpec" (specify the input / ouput widgets used for
           rendering) -> structure: parameter "input" of String, parameter
           "output" of String, parameter "parameters" of list of type
           "MethodParameter" (Description of a method parameter. id - id of
           the parameter, must be unique within the method ui_name - short
           name that is displayed to the user short_hint - short phrase or
           sentence describing the parameter description - longer and more
           technical description of the parameter field_type - one of: text |
           textarea | textsubdata | intslider | floatslider | checkbox |
           dropdown | radio | tab | file | dynamic_dropdown allow_mutiple -
           only supported for field_type text, allows entry of a list instead
           of a single value, default is 0 if set, the number of starting
           boxes will be either 1 or the number of elements in the
           default_values list optional - set to true to make the field
           optional, default is 0 advanced - set to true to make this an
           advanced option, default is 0 if an option is advanced, it should
           also be optional or have a default value disabled   - set to true
           to disable user input, default is 0 if disabled, a default value
           should be provided ui_class  - input | output | parameter value is
           autogenerated based on the specification which determines if it is
           an input parameter, output parameter, or just plain old parameter
           (input is generally an input data object, output is an output data
           object, and plain old parameter is more or less numbers, fixed
           selections, etc) valid_file_types - a list of staging area file
           types that are valid for the method parameter. This might apply to
           a text box, dropdown, dynamic dropdown, etc. depending on the
           context. The file type is available in the mappings key of the
           json response from staging service importer mappings endpoint.
           Each mapping has a file_type key containing the type. @optional
           text_options textarea_options intslider_options
           floatslider_options @optional checkbox_options dropdown_options
           radio_options tab_options dynamic_dropdown_options) -> structure:
           parameter "id" of String, parameter "ui_name" of String, parameter
           "short_hint" of String, parameter "description" of String,
           parameter "field_type" of String, parameter "allow_multiple" of
           type "boolean" (@range [0,1]), parameter "optional" of type
           "boolean" (@range [0,1]), parameter "advanced" of type "boolean"
           (@range [0,1]), parameter "disabled" of type "boolean" (@range
           [0,1]), parameter "ui_class" of String, parameter "default_values"
           of list of String, parameter "valid_file_types" of list of String,
           parameter "text_options" of type "TextOptions" (valid_ws_types  -
           list of valid ws types that can be used for input validate_as
           - int | float | nonnumeric | none is_output_name  - true if the
           user is specifying an output name, false otherwise, default is
           false) -> structure: parameter "valid_ws_types" of list of String,
           parameter "validate_as" of String, parameter "is_output_name" of
           type "boolean" (@range [0,1]), parameter "placeholder" of String,
           parameter "min_int" of Long, parameter "max_int" of Long,
           parameter "min_float" of Double, parameter "max_float" of Double,
           parameter "regex_constraint" of list of type "RegexMatcher" (regex
           - regular expression in javascript syntax error_text - message
           displayed if the input does not statisfy this constraint match -
           set to 1 to check if the input matches this regex, set to 0 to
           check if input does not match this regex.  default is 1) ->
           structure: parameter "regex" of String, parameter "error_text" of
           String, parameter "match" of type "boolean" (@range [0,1]),
           parameter "textarea_options" of type "TextAreaOptions" ->
           structure: parameter "n_rows" of Long, parameter "placeholder" of
           String, parameter "intslider_options" of type "IntSliderOptions"
           -> structure: parameter "min" of Long, parameter "max" of Long,
           parameter "step" of Long, parameter "floatslider_options" of type
           "FloatSliderOptions" -> structure: parameter "min" of Double,
           parameter "max" of Double, parameter "checkbox_options" of type
           "CheckboxOptions" -> structure: parameter "checked_value" of Long,
           parameter "unchecked_value" of Long, parameter "dropdown_options"
           of type "DropdownOptions" (Defines a parameter field that allows
           users to select from a list of options. It will appear as a
           dropdown (a 'select' HTML element). Parameters: options   - a list
           of maps with keys 'value' and 'display'; 'display' is the text
           presented to the user, and 'value' is what is passed from the
           element when it is submitted. See the DropDownOption type for the
           spec. multiselection - If true, multiple selections are allowed
           from a single field, and the parameter will return a list, rather
           than a single value. This parameter is optional. Default = false)
           -> structure: parameter "options" of list of type "DropdownOption"
           (value is what is passed from the form, display is how the
           selection is shown to the user) -> structure: parameter "value" of
           String, parameter "display" of String, parameter "multiselection"
           of type "boolean" (@range [0,1]), parameter
           "dynamic_dropdown_options" of type "DynamicDropdownOptions"
           (Defines a parameter field that allows autocomplete based on a
           call to a dynamic service. For instance, selection of files from
           the staging_service or from kbase_search. It will appear as a text
           field with dropdown similar to selection of other WS data objects.
           data_source - one of ftp_staging | search | custom. Provides
           sensible defaults to for the following parameters for a common
           type of dropdown which can be overwritten service_function - name
           of SDK method including prefix with SDK module started up as
           dynamic service (it's fully qualified method name where module and
           method are separated by '.'). service_version - optional version
           of module used in service_function (default value is 'release').
           service_params - The parameters that will be supplied to the
           dynamic service call as JSON. The special text
           "{{dynamic_dropdown_input}}" will be replaced by the value of user
           input at call time. selection_id - The value of this key will be
           extracted from the item selected by the user. The item is expected
           to be represented as a map. exact_match_on - if exactly matching
           the user's input to the results from the dynamic service is
           required, this field contains the name of the key in the results
           document that contains the value to which the user's input should
           be matched. May or may not be the same key as 'selection_id'.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the keys in the items as
           variable names) multiselection - If true, then multiple selections
           are allowed in a single input field. This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false query_on_empty_input - true, the default, to send a request
           to the dynamic service even if there is no input.
           result_array_index - The index of the result array returned from
           the dynamic service from where the selection items will be
           extracted. Default 0. path_to_selection_items - The path into the
           result data object to the list of selection items. If missing, the
           data at the specified result array index is used (defaulting to
           the first returned value in the list). The selection items data
           structure must be a list of mappings or structures. As an example
           of correctly specifying where the selection items are within the
           data structure returned from the dynamic service, if the data
           structure is: [ "foo",                # return array position 0 {
           # return array position 1 "interesting_data": [ "baz", "boo", [
           {"id": 1, "name": "foo" }, ... {"id": 42, "name": "wowbagger" } ],
           "bat" ] }, "bar"                # return array position 2 ] Note
           that KBase dynamic services all return an array of values, even
           for single-value returns, as the KIDL spec allows specifying
           multiple return values per function. In this case:
           result_array_index would be 1 path_to_selection_items would be
           ["interesting_data", "2"] selection_id would be "name" The
           selection items would be the 42 items represented by {"id": 1,
           "name": "foo" }, ... {"id": 42, "name": "wowbagger" } Selection
           items must always be a list of maps. The final value returned when
           the user selects a value would be the "name" field - "foo" if the
           first item is selected, and "wowbagger" if the last item is
           selected.) -> structure: parameter "data_source" of String,
           parameter "service_function" of String, parameter
           "service_version" of String, parameter "service_params" of
           unspecified object, parameter "selection_id" of String, parameter
           "exact_match_on" of String, parameter "description_template" of
           String, parameter "multiselection" of type "boolean" (@range
           [0,1]), parameter "query_on_empty_input" of type "boolean" (@range
           [0,1]), parameter "result_array_index" of Long, parameter
           "path_to_selection_items" of list of String, parameter
           "radio_options" of type "RadioOptions" -> structure: parameter
           "id_order" of list of String, parameter "ids_to_options" of
           mapping from String to String, parameter "ids_to_tooltip" of
           mapping from String to String, parameter "tab_options" of type
           "TabOptions" -> structure: parameter "tab_id_order" of list of
           String, parameter "tab_id_to_tab_name" of mapping from String to
           String, parameter "tab_id_to_param_ids" of mapping from String to
           list of String, parameter "textsubdata_options" of type
           "TextSubdataOptions" (Defines a parameter field that allows
           autocomplete based on subdata of an existing object.  For
           instance, selection of feature ids from a Genome object.  It will
           appear as a text field with dropdown similar to selection of other
           WS data objects. placeholder - placeholder text to display in the
           field multiselection - if true, then multiple selections are
           allowed in a single input field.  This will override the
           allow_multiple option (which allows user addition) of additional
           fields.  If true, then this parameter will return a list. Default=
           false show_src_obj - if true, then the dropdown will indicate the
           ids along with some text indicating what data object the subdata
           was retrieved from. Default=true allow_custom - if true, then user
           specified inputs not found in the list are accepted.  if false,
           users can only select from the valid list of selections.
           Default=false) -> structure: parameter "placeholder" of String,
           parameter "multiselection" of type "boolean" (@range [0,1]),
           parameter "show_src_obj" of type "boolean" (@range [0,1]),
           parameter "allow_custom" of type "boolean" (@range [0,1]),
           parameter "subdata_selection" of type "SubdataSelection"
           (Information about a subdata selection constant_ref - can be set
           as a fixed reference(s) to data objects so that the dropdown is
           always populated with a particular WS object - useful for say
           populating based on an ontology or some other library of default
           terms, such as compounds parameter_id - pick the terms from a user
           specified parameter in the same method path_to_subdata - specific
           path to a list or map that should be used to populate the fields
           selection_id - If the path_to_subdata is to a list of objects, use
           this to specify which field of that object should be used as the
           primary ID selection_description - Use this to specify (if the
           subdata is a list or map) which fields should be included as a
           short description of the selection.  For features, for instance,
           this may include the feature function, or feature aliases.
           description_template - Defines how the description of items is
           rendered using Handlebar templates (use the name of items in the
           selection_description list as variable names) service_function -
           optional name of SDK method including prefix with SDK module
           started up as dynamic service (it's fully qualified method name
           where module and method are separated by '.') service_version -
           optional version of module used in service_function (default value
           is 'release').) -> structure: parameter "constant_ref" of list of
           String, parameter "parameter_id" of String, parameter
           "subdata_included" of list of String, parameter "path_to_subdata"
           of list of String, parameter "selection_id" of String, parameter
           "selection_description" of list of String, parameter
           "description_template" of String, parameter "service_function" of
           String, parameter "service_version" of String, parameter
           "fixed_parameters" of list of type "FixedMethodParameter" (a fixed
           parameter that does not appear in the method input forms, but is
           informational for users in describing a backend parameter that
           cannot be changed (e.g. if a service picks a fixed parameter for
           say Blast)) -> structure: parameter "ui_name" of String, parameter
           "description" of String, parameter "parameter_groups" of list of
           type "MethodParameterGroup" (Description of a method parameter. id
           - id of the parameter group, must be unique within the method
           among all parameters and groups, parameter_ids - IDs of parameters
           included in this group, ui_name - short name that is displayed to
           the user, short_hint - short phrase or sentence describing the
           parameter group, description - longer and more technical
           description of the parameter group (long-hint), allow_mutiple -
           allows entry of a list instead of a single structure, default is 0
           if set, the number of starting boxes will be either 1 or the
           number of elements in the default_values list, optional - set to
           true to make the group optional, default is 0, advanced - set to
           true to make this an advanced option, default is 0 if an option is
           advanced, it should also be optional or have a default value,
           id_mapping - optional mapping for parameter IDs used to pack group
           into resulting value structure (not used for non-multiple groups),
           with_border - flag for one-copy groups saying to show these group
           with border. @optional id_mapping) -> structure: parameter "id" of
           String, parameter "parameter_ids" of list of String, parameter
           "ui_name" of String, parameter "short_hint" of String, parameter
           "description" of String, parameter "allow_multiple" of type
           "boolean" (@range [0,1]), parameter "optional" of type "boolean"
           (@range [0,1]), parameter "advanced" of type "boolean" (@range
           [0,1]), parameter "id_mapping" of mapping from String to String,
           parameter "with_border" of type "boolean" (@range [0,1]),
           parameter "behavior" of type "MethodBehavior" (Determines how the
           method is handled when run. kb_service_name - name of service
           which will be part of fully qualified method name, optional field
           (in case it's not defined developer should enter fully qualified
           name with dot into 'kb_service_method'. kb_service_version -
           optional git commit hash defining version of repo registered
           dynamically. kb_service_input_mapping - mapping from input
           parameters to input service method arguments.
           kb_service_output_mapping - mapping from output of service method
           to final output of narrative method. resource_estimator_module -
           optional module for the resource estimator method.
           resource_estimator_method - optional name of method for estimating
           resource requirements. output_mapping - mapping from input to
           final output of narrative method to support steps without back-end
           operations. @optional kb_service_name kb_service_method
           kb_service_input_mapping kb_service_output_mapping
           resource_estimator_module resource_estimator_method) -> structure:
           parameter "kb_service_url" of String, parameter "kb_service_name"
           of String, parameter "kb_service_version" of String, parameter
           "kb_service_method" of String, parameter
           "resource_estimator_module" of String, parameter
           "resource_estimator_method" of String, parameter
           "kb_service_input_mapping" of list of type
           "ServiceMethodInputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set. constant_value -
           constant value, could be even map/array, if not specified then
           'input_parameter' or 'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. generated_value - automatically
           generated value; it could be used as independent mode or when
           another mode finished with empty value (for example in case
           'input_parameter' is defined but value of this parameter is left
           empty by user); so this mode has lower priority when used with
           another mode. target_argument_position - position of argument in
           RPC-method call, optional field, default value is 0.
           target_property - name of field inside structure that will be send
           as argument. Optional field, in case this field is not defined (or
           null) whole object will be sent as method argument instead of
           wrapping it by structure with inner property defined by
           'target_property'. target_type_transform -
           none/string/int/float/ref, optional field, default is 'none' (it's
           in plans to support list<type>, mapping<type> and tuple<t1,t2,...>
           transformations). @optional input_parameter constant_value
           narrative_system_variable generated_value @optional
           target_argument_position target_property target_type_transform) ->
           structure: parameter "input_parameter" of String, parameter
           "constant_value" of unspecified object, parameter
           "narrative_system_variable" of String, parameter "generated_value"
           of type "AutoGeneratedValue" (prefix - optional string
           concatenated before generated part symbols - number of generated
           characters, optional, default is 8 suffix - optional string
           concatenated after generated part @optional prefix symbols suffix)
           -> structure: parameter "prefix" of String, parameter "symbols" of
           Long, parameter "suffix" of String, parameter
           "target_argument_position" of Long, parameter "target_property" of
           String, parameter "target_type_transform" of String, parameter
           "kb_service_output_mapping" of list of type
           "ServiceMethodOutputMapping" (input_parameter - parameter_id, if
           not specified then one of 'constant_value' or
           'narrative_system_variable' should be set.
           service_method_output_path - list of properties and array element
           positions defining JSON-path traversing through which we can find
           necessary value. constant_value - constant value, could be even
           map/array, if not specified then 'input_parameter' or
           'narrative_system_variable' should be set.
           narrative_system_variable - name of internal narrative framework
           property, currently only these names are supported: 'workspace',
           'token', 'user_id'; if not specified then one of 'input_parameter'
           or 'constant_value' should be set. target_property - name of field
           inside structure that will be send as arguement. Optional field,
           in case this field is not defined (or null) whole object will be
           sent as method argument instead of wrapping it by structure with
           inner property defined by 'target_property'. target_type_transform
           - none/string/int/float/list<type>/mapping<type>/ref, optional
           field, default is no transformation. @optional input_parameter
           service_method_output_path constant_value
           narrative_system_variable @optional target_property
           target_type_transform) -> structure: parameter "input_parameter"
           of String, parameter "service_method_output_path" of list of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "output_mapping" of list of type "OutputMapping"
           (This structure should be used in case narrative method doesn't
           run any back-end code. See docs for ServiceMethodOutputMapping
           type for details.) -> structure: parameter "input_parameter" of
           String, parameter "constant_value" of unspecified object,
           parameter "narrative_system_variable" of String, parameter
           "target_property" of String, parameter "target_type_transform" of
           String, parameter "job_id_output_field" of String, parameter
           "type_info" of type "TypeInfo" (export_functions - optional
           mapping from UI label to exporter SDK local function. @optional
           icon landing_page_url_prefix loading_error) -> structure:
           parameter "type_name" of String, parameter "name" of String,
           parameter "subtitle" of String, parameter "tooltip" of String,
           parameter "description" of String, parameter "icon" of type
           "ScreenShot" -> structure: parameter "url" of type "url",
           parameter "view_method_ids" of list of String, parameter
           "import_method_ids" of list of String, parameter
           "export_functions" of mapping from String to String, parameter
           "landing_page_url_prefix" of String, parameter "loading_error" of
           String
        """
        return self._client.call_method(
            "NarrativeMethodStore.validate_type", [params], self._service_ver, context
        )

    def load_widget_java_script(self, params, context=None):
        """
        :param params: instance of type "LoadWidgetParams" (Describes how to
           find repository widget JavaScript. module_name - name of module
           defined in kbase.yaml; version - optional parameter limiting
           search by certain version timestamp; widget_id - name of
           java-script file stored in repo's 'ui/widgets' folder. tag -
           optional access level for dynamic repos (one of 'dev', 'beta',
           'release').) -> structure: parameter "module_name" of String,
           parameter "version" of Long, parameter "widget_id" of String,
           parameter "tag" of String
        :returns: instance of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.load_widget_java_script", [params], self._service_ver, context
        )

    def register_repo(self, params, context=None):
        """
        :param params: instance of type "RegisterRepoParams"
           (***************************** Dynamic Repos API
           ******************************) -> structure: parameter "git_url"
           of String, parameter "git_commit_hash" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.register_repo", [params], self._service_ver, context
        )

    def disable_repo(self, params, context=None):
        """
        :param params: instance of type "DisableRepoParams" -> structure:
           parameter "module_name" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.disable_repo", [params], self._service_ver, context
        )

    def enable_repo(self, params, context=None):
        """
        :param params: instance of type "EnableRepoParams" -> structure:
           parameter "module_name" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.enable_repo", [params], self._service_ver, context
        )

    def push_repo_to_tag(self, params, context=None):
        """
        :param params: instance of type "PushRepoToTagParams" (tag - one of
           two values: 'beta' or 'release'.) -> structure: parameter
           "module_name" of String, parameter "tag" of String
        """
        return self._client.call_method(
            "NarrativeMethodStore.push_repo_to_tag", [params], self._service_ver, context
        )
