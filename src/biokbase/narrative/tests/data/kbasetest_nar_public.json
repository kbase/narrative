{"info": [1, "Invocation_Code_Cell_Example", "KBaseNarrative.Narrative-3.0", "2015-07-07T20:55:35+0000", 12, "kbasetest", 1315, "gavinws", "1eb41e70cfaeb436c3c49ec25a0fcaae", 7348, {"methods": "{\"ipython\": {\"code\": 6, \"markdown\": 8}, \"output\": 0, \"app\": {}, \"method\": {}}", "format": "ipynb", "description": "", "creator": "kbasetest", "job_info": "{\"queue_time\": 0, \"running\": 0, \"completed\": 0, \"run_time\": 0, \"error\": 0}", "data_dependencies": "[]", "ws_name": "gavinws", "type": "KBaseNarrative.Narrative", "name": "Invocation Code Cell Example"}], "created": "2015-07-07T20:55:35+0000", "refs": [], "provenance": [{"input_ws_objects": [], "description": "saved through the narrative interface", "external_data": [], "service": "narrative", "resolved_ws_objects": []}], "creator": "kbasetest", "copy_source_inaccessible": 0, "data": {"nbformat": 3, "nbformat_minor": 0, "worksheets": [{"cells": [{"source": "## Using Scripting Commands in the Narrative\nThis brief tutorial will introduce the Narrative code cell. It will show how to:\n1. Use invocation service commands\n2. Use Python client commands\n\nThis particular narrative will use the invocation service to fetch all genomes from the Central Store, pull them into the Python kernel, and create and use a Python FBA client to import them into your workspace and create genomes from them.\n\n**This is not meant to be the only way to do this!** If you would rather use pure invocation service commands to do all of this, or just use Python clients to run everything, you're completely free to do so. This particular tutorial demonstrates both.", "cell_type": "markdown", "metadata": {}}, {"source": "**1.a. Magic for script command**\nThe %inv_run IPython magic emulates a string on the command line. For the Invocation Service technically minded folks, everything after that command gets pushed into the run_pipeline() command.", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [{"output_type": "pyout", "prompt_number": 65, "text": "[u'kb|g.0\\t4309\\t170\\tEscherichia coli K12\\t1\\t1\\t4639221\\t1\\tBacteria\\t11\\t50.7888716661698\\t\\tb4ff0a0fea9686b26b4e2a3cf7b6adbf\\t83333.1\\n']", "metadata": {}}], "collapsed": false, "prompt_number": 65, "input": "%inv_run echo \"kb|g.0\" | get_entity_Genome -a", "metadata": {}}, {"source": "**1.b. Fetch all genomes**\n\nThe \"icmd\" object is short for \"invocation command\". This is a simple way to invoke the various invocation service commands.\nAs you drill down, it will tab-complete to the nearest command.\n\nWhen you run a command, this uses your current login information to make an invocation service session, then runs your command in your environment.\n\nThe following command fetches all genome IDs from the central store and puts them in a file called **all_genomes**.", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [{"output_type": "pyout", "prompt_number": 2, "text": "[]", "metadata": {}}], "collapsed": false, "prompt_number": 2, "input": "icmd.er.all_entities_Genome(\"> all_genomes\")", "metadata": {}}, {"source": "**2. Show your files**\n\nBelow is an IPython \"magic\". This particular command invokes an \"ls\" command on the invocation service. The **all_genomes** file should be in your list. Type \"inv\" and hit tab to see a few of these.", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [{"output_type": "stream", "stream": "stdout", "text": "\n       23760   Sep 18 2013 17:57:54   ws-list\n    67702116   May 15 2014 13:18:44   foo.txt\n           4   Jun 19 2013 18:26:57   mystuff.txt\n      139482   May 20 2014 07:05:05   all_genomes\n           5   Mar 25 2014 15:40:28   test.file\n        6480   May 15 2014 13:07:14   history\n         355   Aug 01 2013 22:29:46   something.fa\n        2626   Sep 04 2013 14:53:11   all_strep\n"}, {"output_type": "pyout", "prompt_number": 38, "text": "[[],\n [{u'full_path': u'//ws-list',\n   u'mod_date': u'Sep 18 2013 17:57:54',\n   u'name': u'ws-list',\n   u'size': 23760},\n  {u'full_path': u'//foo.txt',\n   u'mod_date': u'May 15 2014 13:18:44',\n   u'name': u'foo.txt',\n   u'size': 67702116},\n  {u'full_path': u'//mystuff.txt',\n   u'mod_date': u'Jun 19 2013 18:26:57',\n   u'name': u'mystuff.txt',\n   u'size': 4},\n  {u'full_path': u'//all_genomes',\n   u'mod_date': u'May 20 2014 07:05:05',\n   u'name': u'all_genomes',\n   u'size': 139482},\n  {u'full_path': u'//test.file',\n   u'mod_date': u'Mar 25 2014 15:40:28',\n   u'name': u'test.file',\n   u'size': 5},\n  {u'full_path': u'//history',\n   u'mod_date': u'May 15 2014 13:07:14',\n   u'name': u'history',\n   u'size': 6480},\n  {u'full_path': u'//something.fa',\n   u'mod_date': u'Aug 01 2013 22:29:46',\n   u'name': u'something.fa',\n   u'size': 355},\n  {u'full_path': u'//all_strep',\n   u'mod_date': u'Sep 04 2013 14:53:11',\n   u'name': u'all_strep',\n   u'size': 2626}]]", "metadata": {}}], "collapsed": false, "prompt_number": 38, "input": "%inv_ls", "metadata": {}}, {"source": "**3. Get your list of genomes into the Python kernel**\n\nNow we're preparing to use the Python clients to run FBA commands. This short block fetches the files from the invocation service and parses them into a list in the Python kernel. We end by printing the number of genomes and the whole list of them.", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [], "collapsed": false, "input": "all_genomes = %inv_get_file all_genomes\nall_genomes = all_genomes.split(\"\\n\")\nprint size(all_genomes)\nfor genome in all_genomes:\n    print genome", "metadata": {}}, {"source": "**4. Initialize the FBA client** \n\nNow we have the list of genomes in the \"all_genomes\" variable. This next bit takes a break and initializes the FBA services client. Just for fun, it displays its URL at the end.\n\nAdmittedly, this is a little clunky right now, in that you need to know the URL of the service endpoint. An upcoming version will manage that for you.\n\nNote a few things here:\n\n1. os.environ : this is the IPython environment variable and contains your current workspace ID and auth token.<br>\n2. Tab completion: once a client is initialized, and you type it in the code cell, you can hit tab to see the available functions it exports.", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [{"output_type": "pyout", "prompt_number": 44, "text": "'https://www.kbase.us/services/fba_model_services'", "metadata": {}}], "collapsed": false, "prompt_number": 44, "input": "import os\ncurWs = os.environ['KB_WORKSPACE_ID']\nauthToken = os.environ['KB_AUTH_TOKEN']\n\nfrom biokbase.fbaModelServices.Client import fbaModelServices\nfbaClient = fbaModelServices(\"https://www.kbase.us/services/fba_model_services\", token=authToken)\n\nfbaClient.url", "metadata": {}}, {"source": "**5. Import some genomes into your workspace and make draft models from them**\n\nFinally, let's make a simple loop to fetch a few genomes into your workspace and build draft FBA models out of them.\n\nI don't recommend using all genomes for this (note that there's only a small array slice in this code cell) in your workspace, because Chris might not appreciate it. :)", "cell_type": "markdown", "metadata": {}}, {"cell_type": "code", "language": "python", "outputs": [], "collapsed": false, "prompt_number": 32, "input": "for genome in all_genomes[0:2]:\n    fbaClient.genome_to_workspace({\"genome\" : genome, \"workspace\" : curWs})\n    fbaClient.genome_to_fbamodel({\"genome\" : genome, \n                                  \"genome_workspace\" : curWs, \n                                  \"model\" : genome + \"_draft_model\", \n                                  \"workspace\" : curWs})", "metadata": {}}, {"source": "**Future work...**\n\nNext steps will include invoking vis widgets from code cells using data either here or (more likely) from workspace object ids.", "cell_type": "markdown", "metadata": {}}], "metadata": {}}], "metadata": {"name": "Invocation Code Cell Example", "format": "ipynb", "creator": "kbasetest", "data_dependencies": [], "ws_name": "gavinws", "type": "KBaseNarrative.Narrative", "job_ids": {"job_usage": {"queue_time": 0, "run_time": 0}, "apps": [], "methods": []}, "description": ""}}, "extracted_ids": {}}