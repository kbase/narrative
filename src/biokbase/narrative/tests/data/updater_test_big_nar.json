{"info": [1, "Narrative.1447873317286", "KBaseNarrative.Narrative-4.0", "2016-06-14T00:58:07+0000", 14, "wjriehl", 2795, "wjriehl:1447873317286", "83dd50e967f6f04067bb1c139974392f", 439974, {"method.onerepotest/send_data_sync/b7636c3f8d16491593900dd5cc89897b54e7856a": "1", "ws_name": "wjriehl:1447873317286", "method.genome_util_blastp_seq_against_genome/": "1", "creator": "wjriehl", "viewer": "1", "method.RSContigThing/filter_contigs/ecaaad932f995d61db10d03649ba9bd30baa6944": "1", "method.expression_toolkit_reconnect_to_genome/": "1", "jupyter.code": "8", "method.fba_tools/compare_fba_solutions/12d84163e243733f1f8616672ca528963be29f8d": "1", "method.MegaHit/run_megahit/74be37bbcb2c117d7af12344617569cdd6c77ed2": "1", "method.CoExpression/expression_toolkit_cluster_WGCNA/82b1be5e133a18e45f48c11d83b2ba5f500cd66a": "1", "app.communities_build_taxonomic_profile/": "1", "format": "ipynb", "method.genome_util_blastoutput_to_featureset/": "1", "method.align_reads_using_tophat/": "1", "job_info": "{\"queue_time\": 0, \"running\": 0, \"completed\": 0, \"run_time\": 0, \"error\": 0}", "method.reannotate_microbial_genome/": "1", "method.KBaseRNASeq/align_reads_using_bowtie2/": "1", "method.genome_util_index_genomes/": "1", "method.MsneddonContigFilter/filter_contigs/10100999595c9031e51a877a8a278d2e06583f3a": "1", "app.community_fba_modeling/": "1", "app.build_plant_metabolic_model/": "1", "type": "KBaseNarrative.Narrative", "method.annotate_contigset/": "1", "method.genome_util_blastn_seq_against_genome/": "1", "method.PangenomeOrthomcl/build_pangenome_with_orthomcl/93b84e4cbb0c20021580600b76fffda37832dbd8": "1", "description": "", "method.fba_tools/build_metabolic_model/12d84163e243733f1f8616672ca528963be29f8d": "1", "method.build_genome_set_from_tree_generic/": "1", "method.annotate_metagenome/": "1", "app.genome_comparison/": "1", "method.kb_cummerbund/create_expression_matrix/8532cc959c48626552041962b0b9e2e4cf99922c": "1", "app.build_species_tree/": "1", "method.genome_util_blastn_seq_against_seq/": "1", "method.KBaseRNASeq/align_reads_using_tophat/": "1", "name": "Lots of Cells", "method.build_feature_set/": "1", "method.fba_tools/compare_flux_with_expression/12d84163e243733f1f8616672ca528963be29f8d": "1", "method.KBaseRNASeq/build_bowtie2_index/2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c": "1", "app.communities_build_functional_profile/": "1", "method.annotate_plant_transcripts/": "1", "app.genome_assembly/": "1", "data_dependencies": "[]", "method.onerepotest/send_data/b7636c3f8d16491593900dd5cc89897b54e7856a": "1", "method.build_expression_submatrix/": "1", "app.build_fba_model/": "6", "method.associate_metadata_to_reads/": "1"}], "orig_wsid": 2795, "created": "2016-06-14T00:58:07+0000", "refs": [], "provenance": [{"input_ws_objects": [], "description": "Saved by KBase Narrative Interface", "service": "narrative", "resolved_ws_objects": [], "external_data": [], "custom": {}, "service_ver": "2.0.7", "subactions": []}], "epoch": 1465865887813, "creator": "wjriehl", "copy_source_inaccessible": 0, "data": {"nbformat_minor": 0, "nbformat": 4, "cells": [{"source": "<div id='kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047'></div>\n<script>$('#kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"genome_assembly\",\"name\":\"Assemble and Annotate Microbial Genome\",\"ver\":\"0.1.0\",\"subtitle\":\"Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\\n\",\"tooltip\":\"Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\\n\",\"header\":\"<p>The Assemble and Annotate Microbial Genome app assembles a set of Next-Generation Sequencing (NGS) short reads into contigs and then annotates the assembled contigs, calling genes and other genomic features and assigning biological functions. The user supplies a set of FASTA or FASTQ files of short reads and chooses from one of a variety of assembly algorithms. After the assembly, the contigs are automatically annotated by the KBase annotation pipeline, which includes assignment of biological functions derived from RAST (Rapid Annotations using Subsystems Technology). The resulting annotated genome can be exported in GenBank or FASTA format or used as input to other KBase apps such as Reconstruct Genome-scale Metabolic Model.</p>\\n\\n<p><a href=&quot;http://kbase.us/assemble-and-annotate-microbial-genome-app/&quot; target=&quot;_blank&quot;>Tutorial for Assemble and Annotate Microbial Genome App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"assemble_contigset_from_reads\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"annotate_contigset\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_contigset\",\"to\":\"input_contigset\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Assemble and Annotate Microbial Genome", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\n", "name": "Assemble and Annotate Microbial Genome", "tooltip": "Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\n", "header": "<p>The Assemble and Annotate Microbial Genome app assembles a set of Next-Generation Sequencing (NGS) short reads into contigs and then annotates the assembled contigs, calling genes and other genomic features and assigning biological functions. The user supplies a set of FASTA or FASTQ files of short reads and chooses from one of a variety of assembly algorithms. After the assembly, the contigs are automatically annotated by the KBase annotation pipeline, which includes assignment of biological functions derived from RAST (Rapid Annotations using Subsystems Technology). The resulting annotated genome can be exported in GenBank or FASTA format or used as input to other KBase apps such as Reconstruct Genome-scale Metabolic Model.</p>\n\n<p><a href=\"http://kbase.us/assemble-and-annotate-microbial-genome-app/\" target=\"_blank\">Tutorial for Assemble and Annotate Microbial Genome App</a></p>\n", "ver": "0.1.0", "id": "genome_assembly", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "assemble_contigset_from_reads", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "annotate_contigset", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_contigset", "is_from_input": 1, "from": "output_contigset", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"pipeline": null, "assembly_input": null, "description": null, "reference": null, "read_library": null, "assembler": null, "recipe": "auto", "output_contigset": ""}}, "step_2": {"inputState": {"domain": "B", "kmer_v1_parameters": 1, "genetic_code": "11", "call_features_CDS_prodigal": 1, "call_features_rRNA_SEED": 1, "call_features_insertion_sequences": 0, "call_features_strep_pneumo_repeat": 1, "call_selenoproteins": 1, "annotate_proteins_similarity": 1, "scientific_name": "", "find_close_neighbors": 1, "call_features_repeat_region_SEED": 1, "call_pyrrolysoproteins": 1, "call_features_strep_suis_repeat": 1, "call_features_crispr": 1, "annotate_proteins_kmer_v2": 1, "call_features_prophage_phispy": 0, "call_features_tRNA_trnascan": 1, "input_contigset": "", "call_features_CDS_glimmer3": 1, "output_genome": "", "resolve_overlapping_features": 1}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886168}, {"state": {"step": {"step_1": {"inputState": {"pipeline": null, "assembly_input": null, "description": null, "reference": null, "read_library": null, "assembler": null, "recipe": "auto", "output_contigset": ""}}, "step_2": {"inputState": {"domain": "B", "kmer_v1_parameters": 1, "genetic_code": "11", "call_features_CDS_prodigal": 1, "call_features_rRNA_SEED": 1, "call_features_insertion_sequences": 0, "call_features_strep_pneumo_repeat": 1, "call_selenoproteins": 1, "annotate_proteins_similarity": 1, "scientific_name": "", "find_close_neighbors": 1, "call_features_repeat_region_SEED": 1, "call_pyrrolysoproteins": 1, "call_features_strep_suis_repeat": 1, "call_features_crispr": 1, "annotate_proteins_kmer_v2": 1, "call_features_prophage_phispy": 0, "call_features_tRNA_trnascan": 1, "input_contigset": "", "call_features_CDS_glimmer3": 1, "output_genome": "", "resolve_overlapping_features": 1}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447631}]}}}, {"source": "<div id='kb-cell-32-0b686c12-a235-4185-9f27-6e1c0239bd89'></div>\n<script>$('#kb-cell-32-0b686c12-a235-4185-9f27-6e1c0239bd89').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"MegaHit/run_megahit\",\"module_name\":\"MegaHit\",\"git_commit_hash\":\"74be37bbcb2c117d7af12344617569cdd6c77ed2\",\"name\":\"MegaHit\",\"ver\":\"1.0.0\",\"subtitle\":\"Run megahit for metagenome assembly\\n\",\"tooltip\":\"Run megahit for metagenome assembly\\n\",\"icon\":{\"url\":\"img?method_id=MegaHit/run_megahit&image_name=kb_logo.png&tag=release\"},\"categories\":[\"active\"],\"authors\":[\"msneddon\"],\"input_types\":[\"KBaseAssembly.PairedEndLibrary\",\"KBaseFile.PairedEndLibrary\"],\"output_types\":[\"KBaseGenomes.ContigSet\"],\"namespace\":\"MegaHit\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseReportView\"},\"parameters\":[{\"id\":\"read_library_name\",\"ui_name\":\"Read Library\",\"short_hint\":\"Read library (only PairedEnd Libs supported now)\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseAssembly.PairedEndLibrary\",\"KBaseFile.PairedEndLibrary\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_contigset_name\",\"ui_name\":\"Output ContigSet name\",\"short_hint\":\"Enter a name for the assembled contigs data object\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"MegaHit.contigs\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.ContigSet\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"megahit_parameter_preset\",\"ui_name\":\"Parameter preset\",\"short_hint\":\"Select a megahit parameter preset\",\"description\":\"This option overrides a group of parameters.\\nmeta            &apos;--min-count 2 --k-list 21,41,61,81,99&apos;\\nmeta-sensitive  &apos;--min-count 2 --k-list 21,31,41,51,61,71,81,91,99&apos;\\nmeta-large      &apos;--min-count 2 --k-list 27,37,47,57,67,77,87&apos;\\nbulk            &apos;--min-count 3 --k-list 31,51,71,91,99 --no-mercy&apos;\\nsingle-cell     &apos;--min-count 3 --k-list 21,33,55,77,99,121 --merge_level 20,0.96&apos;\\n\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"dropdown_options\":{\"options\":[{\"value\":\"meta\",\"display\":\"meta - General metagenome assembly, e.g. gut\"},{\"value\":\"meta-sensitive\",\"display\":\"meta-sensitive - More sensitive assembly, but slower\"},{\"value\":\"meta-large\",\"display\":\"meta-large - Large and complex assembly, e.g. soil\"},{\"value\":\"bulk\",\"display\":\"bulk - (experimental) bulk sequencing assembly\"},{\"value\":\"single-cell\",\"display\":\"single-cell - (experimental) single-cell assembly\"}]}},{\"id\":\"min_count\",\"ui_name\":\"--min-count\",\"short_hint\":\"minimum multiplicity for filtering (k_min+1)-mers, default 2\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"k_min\",\"ui_name\":\"--k-min\",\"short_hint\":\"minimum kmer size (<= 127), must be odd number, default 21\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"max_int\":127,\"regex_constraint\":[]}},{\"id\":\"k_max\",\"ui_name\":\"--k-max\",\"short_hint\":\"maximum kmer size (<= 127), must be odd number, default 99\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"max_int\":127,\"regex_constraint\":[]}},{\"id\":\"k_step\",\"ui_name\":\"--k-step\",\"short_hint\":\"minimum multiplicity for filtering (k_min+1)-mers, default 2\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"max_int\":28,\"regex_constraint\":[]}},{\"id\":\"k_list\",\"ui_name\":\"--k-list\",\"short_hint\":\"list of kmer size (all must be odd, in the range 15-127, increment <= 28)\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":15,\"max_int\":127,\"regex_constraint\":[]}},{\"id\":\"min_contig_len\",\"ui_name\":\"--min-contig-len\",\"short_hint\":\"minimum length of contigs to output, default 200\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"MegaHit\",\"kb_service_version\":\"74be37bbcb2c117d7af12344617569cdd6c77ed2\",\"kb_service_method\":\"run_megahit\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"input_parameter\":\"read_library_name\",\"target_property\":\"read_library_name\"},{\"input_parameter\":\"output_contigset_name\",\"target_property\":\"output_contigset_name\"},{\"input_parameter\":\"megahit_parameter_preset\",\"target_property\":\"megahit_parameter_preset\"},{\"input_parameter\":\"min_count\",\"target_property\":\"min_count\"},{\"input_parameter\":\"k_min\",\"target_property\":\"k_min\"},{\"input_parameter\":\"k_max\",\"target_property\":\"k_max\"},{\"input_parameter\":\"k_step\",\"target_property\":\"k_step\"},{\"input_parameter\":\"k_list\",\"target_property\":\"k_list\"},{\"input_parameter\":\"min_contig_len\",\"target_property\":\"min_contig_len\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"service_method_output_path\":[\"0\",\"report_name\"],\"target_property\":\"report_name\"},{\"service_method_output_path\":[\"0\",\"report_ref\"],\"target_property\":\"report_ref\"},{\"constant_value\":\"16\",\"target_property\":\"report_window_line_height\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-32-0b686c12-a235-4185-9f27-6e1c0239bd89'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "MegaHit", "selected": false, "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=MegaHit/run_megahit&amp;image_name=kb_logo.png&amp;tag=release\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"output_contigset_name": "", "k_list": null, "megahit_parameter_preset": null, "min_contig_len": null, "k_step": null, "k_min": null, "k_max": null, "read_library_name": "", "min_count": null}}, "time": 1465865886168}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"output_contigset_name": "", "k_list": null, "megahit_parameter_preset": null, "min_contig_len": null, "k_step": null, "k_min": null, "k_max": null, "read_library_name": "", "min_count": null}}, "time": 1455837447631}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Run megahit for metagenome assembly\n", "name": "MegaHit", "output_types": ["KBaseGenomes.ContigSet"], "namespace": "MegaHit", "tooltip": "Run megahit for metagenome assembly\n", "git_commit_hash": "74be37bbcb2c117d7af12344617569cdd6c77ed2", "input_types": ["KBaseAssembly.PairedEndLibrary", "KBaseFile.PairedEndLibrary"], "authors": ["msneddon"], "module_name": "MegaHit", "ver": "1.0.0", "id": "MegaHit/run_megahit", "categories": ["active"], "icon": {"url": "img?method_id=MegaHit/run_megahit&image_name=kb_logo.png&tag=release"}}, "parameters": [{"field_type": "text", "ui_name": "Read Library", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseAssembly.PairedEndLibrary", "KBaseFile.PairedEndLibrary"]}, "disabled": 0, "short_hint": "Read library (only PairedEnd Libs supported now)", "default_values": [""], "ui_class": "input", "optional": 0, "id": "read_library_name", "advanced": 0}, {"field_type": "text", "ui_name": "Output ContigSet name", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.ContigSet"]}, "disabled": 0, "short_hint": "Enter a name for the assembled contigs data object", "default_values": ["MegaHit.contigs"], "ui_class": "output", "optional": 0, "id": "output_contigset_name", "advanced": 0}, {"field_type": "dropdown", "ui_name": "Parameter preset", "allow_multiple": 0, "description": "This option overrides a group of parameters.\nmeta            '--min-count 2 --k-list 21,41,61,81,99'\nmeta-sensitive  '--min-count 2 --k-list 21,31,41,51,61,71,81,91,99'\nmeta-large      '--min-count 2 --k-list 27,37,47,57,67,77,87'\nbulk            '--min-count 3 --k-list 31,51,71,91,99 --no-mercy'\nsingle-cell     '--min-count 3 --k-list 21,33,55,77,99,121 --merge_level 20,0.96'\n", "dropdown_options": {"options": [{"display": "meta - General metagenome assembly, e.g. gut", "value": "meta"}, {"display": "meta-sensitive - More sensitive assembly, but slower", "value": "meta-sensitive"}, {"display": "meta-large - Large and complex assembly, e.g. soil", "value": "meta-large"}, {"display": "bulk - (experimental) bulk sequencing assembly", "value": "bulk"}, {"display": "single-cell - (experimental) single-cell assembly", "value": "single-cell"}]}, "disabled": 0, "short_hint": "Select a megahit parameter preset", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "megahit_parameter_preset", "advanced": 0}, {"field_type": "text", "ui_name": "--min-count", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "minimum multiplicity for filtering (k_min+1)-mers, default 2", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "min_count", "advanced": 1}, {"field_type": "text", "ui_name": "--k-min", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "max_int": 127, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": ""}, "disabled": 0, "short_hint": "minimum kmer size (<= 127), must be odd number, default 21", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "k_min", "advanced": 1}, {"field_type": "text", "ui_name": "--k-max", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "max_int": 127, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": ""}, "disabled": 0, "short_hint": "maximum kmer size (<= 127), must be odd number, default 99", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "k_max", "advanced": 1}, {"field_type": "text", "ui_name": "--k-step", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "max_int": 28, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": ""}, "disabled": 0, "short_hint": "minimum multiplicity for filtering (k_min+1)-mers, default 2", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "k_step", "advanced": 1}, {"field_type": "text", "ui_name": "--k-list", "allow_multiple": 1, "description": "", "text_options": {"is_output_name": 0, "max_int": 127, "min_int": 15, "regex_constraint": [], "validate_as": "int", "placeholder": ""}, "disabled": 0, "short_hint": "list of kmer size (all must be odd, in the range 15-127, increment <= 28)", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "k_list", "advanced": 1}, {"field_type": "text", "ui_name": "--min-contig-len", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "min_int": 1, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "minimum length of contigs to output, default 200", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "min_contig_len", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "run_megahit", "kb_service_version": "74be37bbcb2c117d7af12344617569cdd6c77ed2", "kb_service_output_mapping": [{"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "report_name", "service_method_output_path": ["0", "report_name"]}, {"target_property": "report_ref", "service_method_output_path": ["0", "report_ref"]}, {"target_property": "report_window_line_height", "constant_value": "16"}], "kb_service_url": "", "kb_service_name": "MegaHit", "kb_service_input_mapping": [{"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "read_library_name", "input_parameter": "read_library_name"}, {"target_property": "output_contigset_name", "input_parameter": "output_contigset_name"}, {"target_property": "megahit_parameter_preset", "input_parameter": "megahit_parameter_preset"}, {"target_property": "min_count", "input_parameter": "min_count"}, {"target_property": "k_min", "input_parameter": "k_min"}, {"target_property": "k_max", "input_parameter": "k_max"}, {"target_property": "k_step", "input_parameter": "k_step"}, {"target_property": "k_list", "input_parameter": "k_list"}, {"target_property": "min_contig_len", "input_parameter": "min_contig_len"}]}, "widgets": {"input": "null", "output": "kbaseReportView"}}}}}, {"source": "<div id='kb-cell-33-d7dfea3a-27a1-464c-a0c4-716239f03c30'></div>\n<script>$('#kb-cell-33-d7dfea3a-27a1-464c-a0c4-716239f03c30').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"onerepotest/send_data\",\"module_name\":\"onerepotest\",\"git_commit_hash\":\"b7636c3f8d16491593900dd5cc89897b54e7856a\",\"name\":\"Async Docker Test\",\"ver\":\"1.0.0\",\"subtitle\":\"Perform Async Docker Test.\\n\",\"tooltip\":\"Perform Async Docker Test.\\n\",\"icon\":{\"url\":\"img?method_id=onerepotest/send_data&image_name=icon.png&tag=dev\"},\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.Genome\"],\"output_types\":[],\"namespace\":\"onerepotest\"},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"param0\",\"ui_name\":\"Genome1 ID\\n\",\"short_hint\":\"Source genome 1\\n\",\"description\":\"Source genome 1\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"param1\",\"ui_name\":\"Genome2 ID\\n\",\"short_hint\":\"Source genome 2\\n\",\"description\":\"Source genome 2\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"onerepotest\",\"kb_service_version\":\"b7636c3f8d16491593900dd5cc89897b54e7856a\",\"kb_service_method\":\"send_data\",\"kb_service_input_mapping\":[{\"input_parameter\":\"param0\",\"target_property\":\"genomeA\"},{\"input_parameter\":\"param1\",\"target_property\":\"genomeB\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[],\"target_property\":\"output\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-33-d7dfea3a-27a1-464c-a0c4-716239f03c30'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Async Docker Test", "selected": false, "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=onerepotest/send_data&amp;image_name=icon.png&amp;tag=dev\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1465865886168}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1455837447631}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Perform Async Docker Test.\n", "name": "Async Docker Test", "output_types": [], "namespace": "onerepotest", "tooltip": "Perform Async Docker Test.\n", "git_commit_hash": "b7636c3f8d16491593900dd5cc89897b54e7856a", "input_types": ["KBaseGenomes.Genome"], "authors": [], "module_name": "onerepotest", "ver": "1.0.0", "id": "onerepotest/send_data", "categories": ["active"], "icon": {"url": "img?method_id=onerepotest/send_data&image_name=icon.png&tag=dev"}}, "parameters": [{"field_type": "text", "ui_name": "Genome1 ID\n", "allow_multiple": 0, "description": "Source genome 1\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Source genome 1\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "param0", "advanced": 0}, {"field_type": "text", "ui_name": "Genome2 ID\n", "allow_multiple": 0, "description": "Source genome 2\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Source genome 2\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "param1", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "send_data", "kb_service_version": "b7636c3f8d16491593900dd5cc89897b54e7856a", "kb_service_output_mapping": [{"target_property": "output", "service_method_output_path": []}], "kb_service_url": "", "kb_service_name": "onerepotest", "kb_service_input_mapping": [{"target_property": "genomeA", "input_parameter": "param0"}, {"target_property": "genomeB", "input_parameter": "param1"}]}, "widgets": {"input": "null", "output": "null"}}}}}, {"source": "<div id='kb-cell-34-b7f2c809-4a14-46c2-b6c2-b0f7d7541bb0'></div>\n<script>$('#kb-cell-34-b7f2c809-4a14-46c2-b6c2-b0f7d7541bb0').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"onerepotest/send_data_sync\",\"module_name\":\"onerepotest\",\"git_commit_hash\":\"b7636c3f8d16491593900dd5cc89897b54e7856a\",\"name\":\"Async Docker Test (sync)\",\"ver\":\"1.0.0\",\"subtitle\":\"Perform Async Docker Test.\\n\",\"tooltip\":\"Perform Async Docker Test.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.Genome\"],\"output_types\":[],\"namespace\":\"onerepotest\"},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"param0\",\"ui_name\":\"Genome1 ID\\n\",\"short_hint\":\"Source genome 1\\n\",\"description\":\"Source genome 1\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"param1\",\"ui_name\":\"Genome2 ID\\n\",\"short_hint\":\"Source genome 2\\n\",\"description\":\"Source genome 2\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"https://ci.kbase.us/services/onerepotest\",\"kb_service_name\":\"onerepotest\",\"kb_service_version\":\"b7636c3f8d16491593900dd5cc89897b54e7856a\",\"kb_service_method\":\"send_data\",\"kb_service_input_mapping\":[{\"input_parameter\":\"param0\",\"target_property\":\"genomeA\"},{\"input_parameter\":\"param1\",\"target_property\":\"genomeB\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[],\"target_property\":\"output\"}]}}', 'cellId' : 'kb-cell-34-b7f2c809-4a14-46c2-b6c2-b0f7d7541bb0'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Async Docker Test (sync)", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1465865886169}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1455837447632}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Perform Async Docker Test.\n", "name": "Async Docker Test (sync)", "output_types": [], "namespace": "onerepotest", "tooltip": "Perform Async Docker Test.\n", "git_commit_hash": "b7636c3f8d16491593900dd5cc89897b54e7856a", "input_types": ["KBaseGenomes.Genome"], "authors": [], "module_name": "onerepotest", "id": "onerepotest/send_data_sync", "categories": ["active"], "ver": "1.0.0"}, "widgets": {"input": "null", "output": "null"}, "parameters": [{"field_type": "text", "ui_name": "Genome1 ID\n", "allow_multiple": 0, "description": "Source genome 1\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Source genome 1\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "param0", "advanced": 0}, {"field_type": "text", "ui_name": "Genome2 ID\n", "allow_multiple": 0, "description": "Source genome 2\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Source genome 2\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "param1", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_method": "send_data", "kb_service_version": "b7636c3f8d16491593900dd5cc89897b54e7856a", "kb_service_output_mapping": [{"target_property": "output", "service_method_output_path": []}], "kb_service_url": "https://ci.kbase.us/services/onerepotest", "kb_service_name": "onerepotest", "kb_service_input_mapping": [{"target_property": "genomeA", "input_parameter": "param0"}, {"target_property": "genomeB", "input_parameter": "param1"}]}}}}}, {"source": "<div id='kb-cell-35-77c63c01-49c1-4e36-ad3b-d1bdfac87636'></div>\n<script>$('#kb-cell-35-77c63c01-49c1-4e36-ad3b-d1bdfac87636').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"build_feature_set\",\"name\":\"Build a FeatureSet from a Genome\",\"ver\":\"1.0.0\",\"subtitle\":\"Create a new FeatureSet by selecting features from a Genome.\\n\",\"tooltip\":\"Create a new FeatureSet by selecting features from a Genome.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseCollections.FeatureSet\",\"KBaseGenomes.Genome\"],\"output_types\":[\"KBaseCollections.FeatureSet\"],\"namespace\":null},\"replacement_text\":\"Created a new FeatureSet with Features from {{{input_genome}}}\",\"widgets\":{\"input\":\"null\",\"output\":\"kbaseFeatureSet\"},\"parameters\":[{\"id\":\"input_genome\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"The Genome to select the Features from\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_feature_ids\",\"ui_name\":\"Feature IDs\\n\",\"short_hint\":\"Select Features from the Genome to include\\n\",\"description\":\"\",\"field_type\":\"textsubdata\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textsubdata_options\":{\"placeholder\":\"\",\"multiselection\":1,\"show_src_obj\":1,\"allow_custom\":0,\"subdata_selection\":{\"parameter_id\":\"input_genome\",\"subdata_included\":[\"features/[*]/id\",\"features/[*]/aliases\",\"features/[*]/function\"],\"path_to_subdata\":[\"features\"],\"selection_id\":\"id\",\"selection_description\":[\"aliases\",\"function\"],\"description_template\":\"{{#if aliases.length}} ({{aliases}}){{/if}}{{#if function}} - {{function}}{{/if}}\"}}},{\"id\":\"base_feature_set\",\"ui_name\":\"Base FeatureSet\\n\",\"short_hint\":\"If provided, the new features will be combined with this existing FeatureSet\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseCollections.FeatureSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_feature_ids_custom\",\"ui_name\":\"Opt. Feature IDs\\n\",\"short_hint\":\"Fill in comma-separated Feature IDs from the Genome to include\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"output_feature_set\",\"ui_name\":\"Output FeatureSet\\n\",\"short_hint\":\"Name for the new FeatureSet\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"NewFeatureSet\"],\"text_options\":{\"valid_ws_types\":[\"KBaseCollections.FeatureSet\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"description\",\"ui_name\":\"Description\\n\",\"short_hint\":\"Free text description of the contents or purpose of this FeatureSet\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":2,\"placeholder\":\"\"}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"https://ci.kbase.us/services/feature_values/jsonrpc\",\"kb_service_name\":\"KBaseFeatureValues\",\"kb_service_method\":\"build_feature_set\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_genome\",\"target_property\":\"genome\",\"target_type_transform\":\"ref\"},{\"input_parameter\":\"input_feature_ids\",\"target_property\":\"feature_ids\"},{\"input_parameter\":\"input_feature_ids_custom\",\"target_property\":\"feature_ids_custom\"},{\"input_parameter\":\"description\",\"target_property\":\"description\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"out_workspace\"},{\"input_parameter\":\"base_feature_set\",\"target_property\":\"base_feature_set\",\"target_type_transform\":\"ref\"},{\"input_parameter\":\"output_feature_set\",\"target_property\":\"output_feature_set\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"output_feature_set\",\"target_property\":\"featureset_name\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"service_method_output_path\":[],\"target_property\":\"job_id\"}]},\"job_id_output_field\":\"job_id\"}', 'cellId' : 'kb-cell-35-77c63c01-49c1-4e36-ad3b-d1bdfac87636'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build a FeatureSet from a Genome", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"description": null, "base_feature_set": null, "output_feature_set": "", "input_feature_ids_custom": null, "input_genome": "", "input_feature_ids": ""}}, "time": 1465865886169}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"description": null, "base_feature_set": null, "output_feature_set": "", "input_feature_ids_custom": null, "input_genome": "", "input_feature_ids": ""}}, "time": 1455837447633}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Create a new FeatureSet by selecting features from a Genome.\n", "name": "Build a FeatureSet from a Genome", "output_types": ["KBaseCollections.FeatureSet"], "namespace": null, "tooltip": "Create a new FeatureSet by selecting features from a Genome.\n", "input_types": ["KBaseCollections.FeatureSet", "KBaseGenomes.Genome"], "authors": [], "ver": "1.0.0", "id": "build_feature_set", "categories": ["active"]}, "parameters": [{"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "The Genome to select the Features from\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_genome", "advanced": 0}, {"field_type": "textsubdata", "ui_name": "Feature IDs\n", "allow_multiple": 0, "description": "", "textsubdata_options": {"subdata_selection": {"subdata_included": ["features/[*]/id", "features/[*]/aliases", "features/[*]/function"], "path_to_subdata": ["features"], "parameter_id": "input_genome", "selection_id": "id", "selection_description": ["aliases", "function"], "description_template": "{{#if aliases.length}} ({{aliases}}){{/if}}{{#if function}} - {{function}}{{/if}}"}, "multiselection": 1, "show_src_obj": 1, "placeholder": "", "allow_custom": 0}, "disabled": 0, "short_hint": "Select Features from the Genome to include\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "input_feature_ids", "advanced": 0}, {"field_type": "text", "ui_name": "Base FeatureSet\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseCollections.FeatureSet"]}, "disabled": 0, "short_hint": "If provided, the new features will be combined with this existing FeatureSet\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "base_feature_set", "advanced": 0}, {"field_type": "textarea", "ui_name": "Opt. Feature IDs\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Fill in comma-separated Feature IDs from the Genome to include\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "input_feature_ids_custom", "advanced": 1}, {"field_type": "text", "ui_name": "Output FeatureSet\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseCollections.FeatureSet"]}, "disabled": 0, "short_hint": "Name for the new FeatureSet\n", "default_values": ["NewFeatureSet"], "ui_class": "output", "optional": 0, "id": "output_feature_set", "advanced": 0}, {"field_type": "textarea", "ui_name": "Description\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Free text description of the contents or purpose of this FeatureSet\n", "textarea_options": {"n_rows": 2, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "description", "advanced": 0}], "job_id_output_field": "job_id", "fixed_parameters": [], "replacement_text": "Created a new FeatureSet with Features from {{{input_genome}}}", "behavior": {"kb_service_name": "KBaseFeatureValues", "kb_service_url": "https://ci.kbase.us/services/feature_values/jsonrpc", "kb_service_method": "build_feature_set", "kb_service_input_mapping": [{"target_property": "genome", "input_parameter": "input_genome", "target_type_transform": "ref"}, {"target_property": "feature_ids", "input_parameter": "input_feature_ids"}, {"target_property": "feature_ids_custom", "input_parameter": "input_feature_ids_custom"}, {"target_property": "description", "input_parameter": "description"}, {"target_property": "out_workspace", "narrative_system_variable": "workspace"}, {"target_property": "base_feature_set", "input_parameter": "base_feature_set", "target_type_transform": "ref"}, {"target_property": "output_feature_set", "input_parameter": "output_feature_set"}], "kb_service_output_mapping": [{"target_property": "featureset_name", "input_parameter": "output_feature_set"}, {"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "job_id", "service_method_output_path": []}]}, "widgets": {"input": "null", "output": "kbaseFeatureSet"}}}}}, {"source": "<div id='kb-cell-36-3d9bd1eb-6a94-491a-a6ce-6fc52978ac88'></div>\n<script>$('#kb-cell-36-3d9bd1eb-6a94-491a-a6ce-6fc52978ac88').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"KBaseRNASeq/build_bowtie2_index\",\"module_name\":\"KBaseRNASeq\",\"git_commit_hash\":\"2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c\",\"name\":\"Build Bowtie2 Index\",\"ver\":\"1.0.0\",\"subtitle\":\"Build Bowtie2 index for a given genome\\n\",\"tooltip\":\"Build Bowtie2 index for a given genome\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.ContigSet\",\"KBaseGenomes.Genome\"],\"output_types\":[],\"namespace\":\"KBaseRNASeq\"},\"replacement_text\":\"Creates a new bowtie2 Index  for {{{input_genome}}}\",\"widgets\":{\"input\":\"null\",\"output\":\"kbaseReportView\"},\"parameters\":[{\"id\":\"input_genome\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"The input genome to be indexed \\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.ContigSet\",\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"out_index_name\",\"ui_name\":\"Indexed Genome\\n\",\"short_hint\":\"The indexed genome as output\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseRNASeq\",\"kb_service_version\":\"2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c\",\"kb_service_method\":\"BuildBowtie2Index\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"input_genome\",\"target_property\":\"reference\"},{\"input_parameter\":\"out_index_name\",\"target_property\":\"output_obj_name\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\",\"report_name\"],\"target_property\":\"report_name\"},{\"service_method_output_path\":[\"0\",\"report_ref\"],\"target_property\":\"report_ref\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"constant_value\":\"5\",\"target_property\":\"report_window_line_height\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-36-3d9bd1eb-6a94-491a-a6ce-6fc52978ac88'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Bowtie2 Index", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_genome": "", "out_index_name": ""}}, "time": 1465865886169}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_genome": "", "out_index_name": ""}}, "time": 1455837447633}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Build Bowtie2 index for a given genome\n", "name": "Build Bowtie2 Index", "output_types": [], "namespace": "KBaseRNASeq", "tooltip": "Build Bowtie2 index for a given genome\n", "git_commit_hash": "2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c", "input_types": ["KBaseGenomes.ContigSet", "KBaseGenomes.Genome"], "authors": [], "module_name": "KBaseRNASeq", "id": "KBaseRNASeq/build_bowtie2_index", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.ContigSet", "KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "The input genome to be indexed \n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_genome", "advanced": 0}, {"field_type": "text", "ui_name": "Indexed Genome\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "The indexed genome as output\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "out_index_name", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "replacement_text": "Creates a new bowtie2 Index  for {{{input_genome}}}", "behavior": {"kb_service_method": "BuildBowtie2Index", "kb_service_version": "2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c", "kb_service_output_mapping": [{"target_property": "report_name", "service_method_output_path": ["0", "report_name"]}, {"target_property": "report_ref", "service_method_output_path": ["0", "report_ref"]}, {"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "report_window_line_height", "constant_value": "5"}], "kb_service_url": "", "kb_service_name": "KBaseRNASeq", "kb_service_input_mapping": [{"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "reference", "input_parameter": "input_genome"}, {"target_property": "output_obj_name", "input_parameter": "out_index_name"}]}, "widgets": {"input": "null", "output": "kbaseReportView"}}}}}, {"source": "<div id='kb-cell-37-c1f38855-1c5b-4f58-8891-85bfb21ae550'></div>\n<script>$('#kb-cell-37-c1f38855-1c5b-4f58-8891-85bfb21ae550').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"fba_tools/build_metabolic_model\",\"module_name\":\"fba_tools\",\"git_commit_hash\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"name\":\"Build metabolic model\",\"ver\":\"1.0.0\",\"subtitle\":\"Generate a draft metabolic model based on an annotated genome.\\n\",\"tooltip\":\"Generate a draft metabolic model based on an annotated genome.\\n\",\"categories\":[\"active\"],\"authors\":[\"chenry\"],\"input_types\":[\"KBaseBiochem.Media\",\"KBaseFBA.FBAModelTemplate\",\"KBaseFeatureValues.ExpressionMatrix\",\"KBaseGenomes.Genome\"],\"output_types\":[\"KBaseFBA.FBAModel\"],\"namespace\":\"fba_tools\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseTabTable\"},\"parameters\":[{\"id\":\"genome_id\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"A genome with functional annotations generated by Kbase\\n\",\"description\":\"A genome with functional annotations generated by Kbase\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"Genome ID for modeling\\n\",\"regex_constraint\":[]}},{\"id\":\"media_id\",\"ui_name\":\"Media\\n\",\"short_hint\":\"Media specifies the set of chemical compounds organism can use for its growth. In this function, the media is used as the growth condition for gapfilling, if gapfilling is performed.\\n\",\"description\":\"Media specifies the set of chemical compounds organism can use for its growth. In this function, the media is used as the growth condition for gapfilling, if gapfilling is performed.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseBiochem.Media\"],\"is_output_name\":0,\"placeholder\":\"Growth condition for gapfilling\\n\",\"regex_constraint\":[]}},{\"id\":\"fbamodel_output_id\",\"ui_name\":\"Output model\\n\",\"short_hint\":\"Enter a name for the metabolic model to be created\\n\",\"description\":\"Enter a name for the metabolic model to be created\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBAModel\"],\"is_output_name\":1,\"placeholder\":\"Output metabolic model name\\n\",\"regex_constraint\":[]}},{\"id\":\"template_id\",\"ui_name\":\"Template model\\n\",\"short_hint\":\"Models are generated based on a default template model in KBase. Template models capture the necessary biochemical information based on user-defined scope. KBase primarily uses four template models: (i) Gram positive microbe, (ii) Gram negative microbe, (iii) Core pathways microbe, and (iv) Plant. These template models differ from each other by biomass composition and biochemical reaction functional associations.\\n\",\"description\":\"Models are generated based on a default template model in KBase. Template models capture the necessary biochemical information based on user-defined scope. KBase primarily uses four template models: (i) Gram positive microbe, (ii) Gram negative microbe, (iii) Core pathways microbe, and (iv) Plant. These template models differ from each other by biomass composition and biochemical reaction functional associations.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBAModelTemplate\"],\"is_output_name\":0,\"placeholder\":\"Template model name\\n\",\"regex_constraint\":[]}},{\"id\":\"gapfill_model\",\"ui_name\":\"Gapfill model?\\n\",\"short_hint\":\"Identify the minimal set of biochemical reactions to add to a draft metabolic model to enable it to produce biomass in a specified media.\\n\",\"description\":\"Identify the minimal set of biochemical reactions to add to a draft metabolic model to enable it to produce biomass in a specified media.\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"thermodynamic_constraints\",\"ui_name\":\"Thermodynamic constraints?\\n\",\"short_hint\":\"Check this box to enable the use of thermodynamic constraints to enforce the thermodynamic feasibility of all active reactions in the flux solution\\n\",\"description\":\"Check this box to enable the use of thermodynamic constraints to enforce the thermodynamic feasibility of all active reactions in the flux solution\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"comprehensive_gapfill\",\"ui_name\":\"Comprehensive Gapfill\\n\",\"short_hint\":\"Check this box to activate as many reactions as possible, rather than just the biomass objective function\\n\",\"description\":\"Check this box to activate as many reactions as possible, rather than just the biomass objective function\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"custom_bound_list\",\"ui_name\":\"Custom flux bounds\\n\",\"short_hint\":\"Custom bounds on reaction or exchange flux (e.g. 0;rxn00001;5, 0;cpd00001_e0;5)\\n\",\"description\":\"Custom bounds on reaction or exchange flux (e.g. 0;rxn00001;5, 0;cpd00001_e0;5)\\n\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"e.g. 0;rxn00001;5\\n\",\"regex_constraint\":[]}},{\"id\":\"media_supplement_list\",\"ui_name\":\"Media supplement\\n\",\"short_hint\":\"Specify additional compounds to add to media one at a time by using  add another media supplement  button\\n\",\"description\":\"Specify additional compounds to add to media one at a time by using  add another media supplement  button\\n\",\"field_type\":\"textsubdata\",\"allow_multiple\":1,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"textsubdata_options\":{\"placeholder\":\"\",\"multiselection\":0,\"show_src_obj\":1,\"allow_custom\":0,\"subdata_selection\":{\"parameter_id\":\"fbamodel_id\",\"subdata_included\":[\"modelcompounds/[*]/id\",\"modelcompounds/[*]/name\"],\"path_to_subdata\":[\"modelcompounds\"],\"selection_id\":\"id\",\"selection_description\":[\"name\"],\"description_template\":\"- {{name}}\"}}},{\"id\":\"expseries_id\",\"ui_name\":\"Expression data set\\n\",\"short_hint\":\"An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be used to constrain reaction activity in FBA\\n\",\"description\":\"An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be used to constrain reaction activity in FBA\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"expression_condition\",\"ui_name\":\"Expression condition\\n\",\"short_hint\":\"Specific condition in expression matrix to which reaction activity in FBA should be fit\\n\",\"description\":\"Specific condition in expression matrix to which reaction activity in FBA should be fit\\n\",\"field_type\":\"textsubdata\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"textsubdata_options\":{\"placeholder\":\"\",\"multiselection\":0,\"show_src_obj\":1,\"allow_custom\":0,\"subdata_selection\":{\"parameter_id\":\"expseries_id\",\"subdata_included\":[\"data/col_ids\"],\"path_to_subdata\":[\"data\",\"col_ids\"],\"selection_id\":\"id\"}}},{\"id\":\"exp_threshold_percentile\",\"ui_name\":\"Expression threshold\\n\",\"short_hint\":\"Reactions with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\\n\",\"description\":\"Reactions with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.5\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"exp_threshold_margin\",\"ui_name\":\"Expression uncertainty\\n\",\"short_hint\":\"Range of uncertainty for classification of reaction activity based on expression threshold\\n\",\"description\":\"Range of uncertainty for classification of reaction activity based on expression threshold\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.1\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"activation_coefficient\",\"ui_name\":\"Activation coefficient\\n\",\"short_hint\":\"What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\\n\",\"description\":\"What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.5\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"objective_fraction\",\"ui_name\":\"Objective constraint\\n\",\"short_hint\":\"What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\\n\",\"description\":\"What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.1\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"minimum_target_flux\",\"ui_name\":\"Minimum reaction flux\\n\",\"short_hint\":\"The minimum flux that the target reaction will have when the gapfilling is performed\\n\",\"description\":\"The minimum flux that the target reaction will have when the gapfilling is performed\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.1\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"number_of_solutions\",\"ui_name\":\"Number of solutions\\n\",\"short_hint\":\"An integer indicating how many solutions should be generated by the gapfilling\\n\",\"description\":\"An integer indicating how many solutions should be generated by the gapfilling\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"fba_tools\",\"kb_service_version\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"kb_service_method\":\"build_metabolic_model\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"},{\"input_parameter\":\"genome_id\",\"target_property\":\"genome_id\"},{\"input_parameter\":\"media_id\",\"target_property\":\"media_id\"},{\"input_parameter\":\"fbamodel_output_id\",\"target_property\":\"fbamodel_output_id\"},{\"input_parameter\":\"template_id\",\"target_property\":\"template_id\"},{\"input_parameter\":\"gapfill_model\",\"target_property\":\"gapfill_model\"},{\"input_parameter\":\"thermodynamic_constraints\",\"target_property\":\"thermodynamic_constraints\"},{\"input_parameter\":\"comprehensive_gapfill\",\"target_property\":\"comprehensive_gapfill\"},{\"input_parameter\":\"custom_bound_list\",\"target_property\":\"custom_bound_list\"},{\"input_parameter\":\"media_supplement_list\",\"target_property\":\"media_supplement_list\"},{\"input_parameter\":\"expseries_id\",\"target_property\":\"expseries_id\"},{\"input_parameter\":\"expression_condition\",\"target_property\":\"expression_condition\"},{\"input_parameter\":\"exp_threshold_percentile\",\"target_property\":\"exp_threshold_percentile\"},{\"input_parameter\":\"exp_threshold_margin\",\"target_property\":\"exp_threshold_margin\"},{\"input_parameter\":\"activation_coefficient\",\"target_property\":\"activation_coefficient\"},{\"input_parameter\":\"objective_fraction\",\"target_property\":\"objective_fraction\"},{\"input_parameter\":\"minimum_target_flux\",\"target_property\":\"minimum_target_flux\"},{\"input_parameter\":\"number_of_solutions\",\"target_property\":\"number_of_solutions\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"},{\"constant_value\":\"KBaseFBA.FBAModel\",\"target_property\":\"type\"},{\"input_parameter\":\"fbamodel_output_id\",\"target_property\":\"obj\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-37-c1f38855-1c5b-4f58-8891-85bfb21ae550'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build metabolic model", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"comprehensive_gapfill": 0, "expression_condition": null, "fbamodel_output_id": "", "media_supplement_list": null, "genome_id": "", "exp_threshold_margin": "0.1", "thermodynamic_constraints": 0, "exp_threshold_percentile": "0.5", "objective_fraction": "0.1", "custom_bound_list": null, "minimum_target_flux": "0.1", "activation_coefficient": "0.5", "media_id": null, "number_of_solutions": "1", "gapfill_model": 1, "template_id": null, "expseries_id": null}}, "time": 1465865886170}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"comprehensive_gapfill": 0, "expression_condition": null, "fbamodel_output_id": "", "media_supplement_list": null, "genome_id": "", "exp_threshold_margin": "0.1", "thermodynamic_constraints": 0, "exp_threshold_percentile": "0.5", "objective_fraction": "0.1", "custom_bound_list": null, "minimum_target_flux": "0.1", "activation_coefficient": "0.5", "media_id": null, "number_of_solutions": "1", "gapfill_model": 1, "template_id": null, "expseries_id": null}}, "time": 1455837447634}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Generate a draft metabolic model based on an annotated genome.\n", "name": "Build metabolic model", "output_types": ["KBaseFBA.FBAModel"], "namespace": "fba_tools", "tooltip": "Generate a draft metabolic model based on an annotated genome.\n", "git_commit_hash": "12d84163e243733f1f8616672ca528963be29f8d", "input_types": ["KBaseBiochem.Media", "KBaseFBA.FBAModelTemplate", "KBaseFeatureValues.ExpressionMatrix", "KBaseGenomes.Genome"], "authors": ["chenry"], "module_name": "fba_tools", "id": "fba_tools/build_metabolic_model", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 0, "description": "A genome with functional annotations generated by Kbase\n", "text_options": {"is_output_name": 0, "placeholder": "Genome ID for modeling\n", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "A genome with functional annotations generated by Kbase\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "genome_id", "advanced": 0}, {"field_type": "text", "ui_name": "Media\n", "allow_multiple": 0, "description": "Media specifies the set of chemical compounds organism can use for its growth. In this function, the media is used as the growth condition for gapfilling, if gapfilling is performed.\n", "text_options": {"is_output_name": 0, "placeholder": "Growth condition for gapfilling\n", "regex_constraint": [], "valid_ws_types": ["KBaseBiochem.Media"]}, "disabled": 0, "short_hint": "Media specifies the set of chemical compounds organism can use for its growth. In this function, the media is used as the growth condition for gapfilling, if gapfilling is performed.\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "media_id", "advanced": 0}, {"field_type": "text", "ui_name": "Output model\n", "allow_multiple": 0, "description": "Enter a name for the metabolic model to be created\n", "text_options": {"is_output_name": 1, "placeholder": "Output metabolic model name\n", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBAModel"]}, "disabled": 0, "short_hint": "Enter a name for the metabolic model to be created\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "fbamodel_output_id", "advanced": 0}, {"field_type": "text", "ui_name": "Template model\n", "allow_multiple": 0, "description": "Models are generated based on a default template model in KBase. Template models capture the necessary biochemical information based on user-defined scope. KBase primarily uses four template models: (i) Gram positive microbe, (ii) Gram negative microbe, (iii) Core pathways microbe, and (iv) Plant. These template models differ from each other by biomass composition and biochemical reaction functional associations.\n", "text_options": {"is_output_name": 0, "placeholder": "Template model name\n", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBAModelTemplate"]}, "disabled": 0, "short_hint": "Models are generated based on a default template model in KBase. Template models capture the necessary biochemical information based on user-defined scope. KBase primarily uses four template models: (i) Gram positive microbe, (ii) Gram negative microbe, (iii) Core pathways microbe, and (iv) Plant. These template models differ from each other by biomass composition and biochemical reaction functional associations.\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "template_id", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Gapfill model?\n", "allow_multiple": 0, "description": "Identify the minimal set of biochemical reactions to add to a draft metabolic model to enable it to produce biomass in a specified media.\n", "optional": 0, "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Identify the minimal set of biochemical reactions to add to a draft metabolic model to enable it to produce biomass in a specified media.\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "gapfill_model", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Thermodynamic constraints?\n", "allow_multiple": 0, "description": "Check this box to enable the use of thermodynamic constraints to enforce the thermodynamic feasibility of all active reactions in the flux solution\n", "optional": 0, "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Check this box to enable the use of thermodynamic constraints to enforce the thermodynamic feasibility of all active reactions in the flux solution\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "thermodynamic_constraints", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Comprehensive Gapfill\n", "allow_multiple": 0, "description": "Check this box to activate as many reactions as possible, rather than just the biomass objective function\n", "optional": 0, "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Check this box to activate as many reactions as possible, rather than just the biomass objective function\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "comprehensive_gapfill", "advanced": 1}, {"field_type": "text", "ui_name": "Custom flux bounds\n", "allow_multiple": 1, "description": "Custom bounds on reaction or exchange flux (e.g. 0;rxn00001;5, 0;cpd00001_e0;5)\n", "text_options": {"is_output_name": 0, "placeholder": "e.g. 0;rxn00001;5\n", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Custom bounds on reaction or exchange flux (e.g. 0;rxn00001;5, 0;cpd00001_e0;5)\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "custom_bound_list", "advanced": 1}, {"field_type": "textsubdata", "ui_name": "Media supplement\n", "allow_multiple": 1, "description": "Specify additional compounds to add to media one at a time by using  add another media supplement  button\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "textsubdata_options": {"subdata_selection": {"subdata_included": ["modelcompounds/[*]/id", "modelcompounds/[*]/name"], "path_to_subdata": ["modelcompounds"], "parameter_id": "fbamodel_id", "selection_id": "id", "selection_description": ["name"], "description_template": "- {{name}}"}, "multiselection": 0, "show_src_obj": 1, "placeholder": "", "allow_custom": 0}, "disabled": 0, "short_hint": "Specify additional compounds to add to media one at a time by using  add another media supplement  button\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "media_supplement_list", "advanced": 1}, {"field_type": "text", "ui_name": "Expression data set\n", "allow_multiple": 0, "description": "An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be used to constrain reaction activity in FBA\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be used to constrain reaction activity in FBA\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "expseries_id", "advanced": 1}, {"field_type": "textsubdata", "ui_name": "Expression condition\n", "allow_multiple": 0, "description": "Specific condition in expression matrix to which reaction activity in FBA should be fit\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "textsubdata_options": {"subdata_selection": {"subdata_included": ["data/col_ids"], "parameter_id": "expseries_id", "selection_id": "id", "path_to_subdata": ["data", "col_ids"]}, "multiselection": 0, "show_src_obj": 1, "placeholder": "", "allow_custom": 0}, "disabled": 0, "short_hint": "Specific condition in expression matrix to which reaction activity in FBA should be fit\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "expression_condition", "advanced": 1}, {"field_type": "text", "ui_name": "Expression threshold\n", "allow_multiple": 0, "description": "Reactions with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Reactions with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\n", "default_values": ["0.5"], "ui_class": "parameter", "optional": 0, "id": "exp_threshold_percentile", "advanced": 1}, {"field_type": "text", "ui_name": "Expression uncertainty\n", "allow_multiple": 0, "description": "Range of uncertainty for classification of reaction activity based on expression threshold\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Range of uncertainty for classification of reaction activity based on expression threshold\n", "default_values": ["0.1"], "ui_class": "parameter", "optional": 0, "id": "exp_threshold_margin", "advanced": 1}, {"field_type": "text", "ui_name": "Activation coefficient\n", "allow_multiple": 0, "description": "What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\n", "default_values": ["0.5"], "ui_class": "parameter", "optional": 0, "id": "activation_coefficient", "advanced": 1}, {"field_type": "text", "ui_name": "Objective constraint\n", "allow_multiple": 0, "description": "What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "What fraction of the optimal objective value should analyses like FVA, single gene knockout, and transcriptomic FBA be constrained at? Values between 0 and 1.\n", "default_values": ["0.1"], "ui_class": "parameter", "optional": 0, "id": "objective_fraction", "advanced": 1}, {"field_type": "text", "ui_name": "Minimum reaction flux\n", "allow_multiple": 0, "description": "The minimum flux that the target reaction will have when the gapfilling is performed\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "The minimum flux that the target reaction will have when the gapfilling is performed\n", "default_values": ["0.1"], "ui_class": "parameter", "optional": 0, "id": "minimum_target_flux", "advanced": 1}, {"field_type": "text", "ui_name": "Number of solutions\n", "allow_multiple": 0, "description": "An integer indicating how many solutions should be generated by the gapfilling\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "An integer indicating how many solutions should be generated by the gapfilling\n", "default_values": ["1"], "ui_class": "parameter", "optional": 0, "id": "number_of_solutions", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "build_metabolic_model", "kb_service_version": "12d84163e243733f1f8616672ca528963be29f8d", "kb_service_output_mapping": [{"target_property": "ws", "narrative_system_variable": "workspace"}, {"target_property": "type", "constant_value": "KBaseFBA.FBAModel"}, {"target_property": "obj", "input_parameter": "fbamodel_output_id"}], "kb_service_url": "", "kb_service_name": "fba_tools", "kb_service_input_mapping": [{"target_property": "workspace", "narrative_system_variable": "workspace"}, {"target_property": "genome_id", "input_parameter": "genome_id"}, {"target_property": "media_id", "input_parameter": "media_id"}, {"target_property": "fbamodel_output_id", "input_parameter": "fbamodel_output_id"}, {"target_property": "template_id", "input_parameter": "template_id"}, {"target_property": "gapfill_model", "input_parameter": "gapfill_model"}, {"target_property": "thermodynamic_constraints", "input_parameter": "thermodynamic_constraints"}, {"target_property": "comprehensive_gapfill", "input_parameter": "comprehensive_gapfill"}, {"target_property": "custom_bound_list", "input_parameter": "custom_bound_list"}, {"target_property": "media_supplement_list", "input_parameter": "media_supplement_list"}, {"target_property": "expseries_id", "input_parameter": "expseries_id"}, {"target_property": "expression_condition", "input_parameter": "expression_condition"}, {"target_property": "exp_threshold_percentile", "input_parameter": "exp_threshold_percentile"}, {"target_property": "exp_threshold_margin", "input_parameter": "exp_threshold_margin"}, {"target_property": "activation_coefficient", "input_parameter": "activation_coefficient"}, {"target_property": "objective_fraction", "input_parameter": "objective_fraction"}, {"target_property": "minimum_target_flux", "input_parameter": "minimum_target_flux"}, {"target_property": "number_of_solutions", "input_parameter": "number_of_solutions"}]}, "widgets": {"input": "null", "output": "kbaseTabTable"}}}}}, {"source": "<div id='kb-cell-38-0d54c870-99a6-4002-967a-37eda020c035'></div>\n<script>$('#kb-cell-38-0d54c870-99a6-4002-967a-37eda020c035').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"PangenomeOrthomcl/build_pangenome_with_orthomcl\",\"module_name\":\"PangenomeOrthomcl\",\"git_commit_hash\":\"93b84e4cbb0c20021580600b76fffda37832dbd8\",\"name\":\"Build Pangenome with OrthoMCL\",\"ver\":\"0.0.1\",\"subtitle\":\"Perform OrthoMCL orthologous groups construction\\n\",\"tooltip\":\"Perform OrthoMCL orthologous groups construction\\n\",\"categories\":[\"active\"],\"authors\":[\"rsutormin\"],\"input_types\":[\"KBaseSearch.GenomeSet\"],\"output_types\":[\"KBaseGenomes.Genome\",\"KBaseGenomes.Pangenome\"],\"namespace\":\"PangenomeOrthomcl\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbasePanGenome\"},\"parameters\":[{\"id\":\"input_genomeset\",\"ui_name\":\"Genome Set\\n\",\"short_hint\":\"A set of references to genomes stored in KBase\\n\",\"description\":\"A set of references to genomes stored in KBase\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseSearch.GenomeSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_genomes\",\"ui_name\":\"Genomes\\n\",\"short_hint\":\"A list of references to genomes stored in KBase\\n\",\"description\":\"A list of references to genomes stored in KBase\\n\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_pangenome\",\"ui_name\":\"Pangenome ID\\n\",\"short_hint\":\"A list of all distinct protein families identified in input genome set\\n\",\"description\":\"A list of all distinct protein families identified by OrthoMCL tool in a set of input genome sequences, as well as the IDs of the proteins present in each family\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Pangenome\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"num_descriptions\",\"ui_name\":\"num_descriptions\\n\",\"short_hint\":\"Store one-line descriptions for this number of database sequences\\n\",\"description\":\"[blastp, -v] Store one-line descriptions for this number of database sequences. Default value is 100000.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"regex_constraint\":[]}},{\"id\":\"num_alignments\",\"ui_name\":\"num_alignments\\n\",\"short_hint\":\"Store alignments for this number of database sequences\\n\",\"description\":\"[blastp, -b] Store alignments for this number of \\ndatabase sequences. Default value is 100000.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"regex_constraint\":[]}},{\"id\":\"evalue\",\"ui_name\":\"evalue\\n\",\"short_hint\":\"Expect value (E) for saving hits\\n\",\"description\":\"[blastp, -e] Expect value (E) for saving hits. Default value is 1e-5.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"word_size\",\"ui_name\":\"word_size\\n\",\"short_hint\":\"Word size of initial match\\n\",\"description\":\"[blastp, -W] Word size of initial match. Valid word sizes are 2-7. Default value is 3.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":2,\"max_int\":7,\"regex_constraint\":[]}},{\"id\":\"gapopen\",\"ui_name\":\"gapopen\\n\",\"short_hint\":\"Cost to open a gap\\n\",\"description\":\"[blastp, -G] Cost to open a gap. Default value is 11.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":0,\"regex_constraint\":[]}},{\"id\":\"gapextend\",\"ui_name\":\"gapextend\\n\",\"short_hint\":\"Cost to extend a gap\\n\",\"description\":\"[blastp, -E] Cost to extend a gap. Default value is 1.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":0,\"regex_constraint\":[]}},{\"id\":\"matrix\",\"ui_name\":\"matrix\\n\",\"short_hint\":\"Scoring matrix name\\n\",\"description\":\"[blastp, -M] Scoring matrix name. Default value is BLOSUM62.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"threshold\",\"ui_name\":\"threshold\\n\",\"short_hint\":\"Minimum score to add a word to the BLAST lookup table\\n\",\"description\":\"[blastp, -f] Minimum score to add a word to the BLAST lookup table. Default value is 11.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"comp_based_stats\",\"ui_name\":\"comp_based_stats\\n\",\"short_hint\":\"Use composition-based statistics \\n\",\"description\":\"[blastp, -C] Use composition-based statistics (0: no composition-based statistics; 1: Composition-based statistics as in NAR 29:2994-3005, 2001; 2: Composition-based score adjustments as in Bioinformatics 21:902-911, 2005, conditioned on sequence properties; 3 - Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally). Default value is 2.\\n\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"dropdown_options\":{\"options\":[{\"value\":\"\",\"display\":\"default\"},{\"value\":\"0\",\"display\":\"0: no composition-based statistics\"},{\"value\":\"1\",\"display\":\"1: Composition-based statistics as in NAR 29:2994-3005, 2001\"},{\"value\":\"2\",\"display\":\"2: Composition-based score adjustments as in Bioinformatics 21:902-911, 2005, conditioned on sequence properties\"},{\"value\":\"3\",\"display\":\"3 - Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally\"}]}},{\"id\":\"seg\",\"ui_name\":\"seg\\n\",\"short_hint\":\"Filter query sequence with SEG\\n\",\"description\":\"[blastp, -F] Filter query sequence with SEG (yes/no). Default value is yes.\\n\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"dropdown_options\":{\"options\":[{\"value\":\"\",\"display\":\"default\"},{\"value\":\"yes\",\"display\":\"yes\"},{\"value\":\"no\",\"display\":\"no\"}]}},{\"id\":\"lcase_masking\",\"ui_name\":\"lcase_masking\\n\",\"short_hint\":\"Use lower case filtering in query and subject sequences\\n\",\"description\":\"[blastp, -U] Use lower case filtering in query and subject sequence(s). Default value is false(0).\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"xdrop_gap_final\",\"ui_name\":\"xdrop_gap_final\\n\",\"short_hint\":\"Heuristic value (in bits) for final gapped alignment\\n\",\"description\":\"[blastp, -Z] Heuristic value (in bits) for final gapped alignment. Default value is 25.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"window_size\",\"ui_name\":\"window_size\\n\",\"short_hint\":\"Multiple hits window size \\n\",\"description\":\"[blastp, -A] Multiple hits window size, use 0 to specify 1-hit algorithm. Default value is 40.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"min_int\":1,\"regex_constraint\":[]}},{\"id\":\"use_sw_tback\",\"ui_name\":\"use_sw_tback\\n\",\"short_hint\":\"Compute locally optimal Smith-Waterman alignments\\n\",\"description\":\"[blastp, -s] Compute locally optimal Smith-Waterman alignments. Default value is false(0).\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"mcl_p\",\"ui_name\":\"mcl_p\\n\",\"short_hint\":\"Prune number\\n\",\"description\":\"[mcl, -P] Prune number. Default value is 10000.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_s\",\"ui_name\":\"mcl_s\\n\",\"short_hint\":\"Selection number\\n\",\"description\":\"[mcl, -S] Selection number. Default value is 1100.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_r\",\"ui_name\":\"mcl_r\\n\",\"short_hint\":\"Recovery number\\n\",\"description\":\"[mcl, -R] Recovery number. Default value is 1400.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_pct\",\"ui_name\":\"mcl_pct\\n\",\"short_hint\":\"Recovery percentage\\n\",\"description\":\"[mcl, -pct] Recovery percentage. Default value is 90.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_warn_p\",\"ui_name\":\"mcl_warn_p\\n\",\"short_hint\":\"Warn if pruning reduces mass to this weight\\n\",\"description\":\"[mcl, -warn-p] Warn if pruning reduces mass to this weight. Default value is 10.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_warn_factor\",\"ui_name\":\"mcl_warn_factor\\n\",\"short_hint\":\"Warn if pruning reduces entry count by this value\\n\",\"description\":\"[mcl, -warn-factor] Warn if pruning reduces entry count by this value. Default value is 1000.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_init_l\",\"ui_name\":\"mcl_init_l\\n\",\"short_hint\":\"Initial loop length\\n\",\"description\":\"[mcl, -l] Initial loop length. Default value is 0.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_main_l\",\"ui_name\":\"mcl_main_l\\n\",\"short_hint\":\"Main loop length\\n\",\"description\":\"[mcl, -L] Main loop length. Default value is 10000.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_init_i\",\"ui_name\":\"mcl_init_i\\n\",\"short_hint\":\"Initial inflation\\n\",\"description\":\"[mcl, -i] Initial inflation. Default value is 2.0.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mcl_main_i\",\"ui_name\":\"mcl_main_i\\n\",\"short_hint\":\"Main inflation\\n\",\"description\":\"[mcl, -I] Main inflation. Default value is 1.5.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"PangenomeOrthomcl\",\"kb_service_version\":\"93b84e4cbb0c20021580600b76fffda37832dbd8\",\"kb_service_method\":\"build_pangenome_with_orthomcl\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_genomeset\",\"target_property\":\"input_genomeset_ref\",\"target_type_transform\":\"ref\"},{\"input_parameter\":\"input_genomes\",\"target_property\":\"input_genome_refs\",\"target_type_transform\":\"list<ref>\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"output_workspace\"},{\"input_parameter\":\"output_pangenome\",\"target_property\":\"output_pangenome_id\"},{\"input_parameter\":\"num_descriptions\",\"target_property\":\"num_descriptions\"},{\"input_parameter\":\"num_alignments\",\"target_property\":\"num_alignments\"},{\"input_parameter\":\"evalue\",\"target_property\":\"evalue\"},{\"input_parameter\":\"word_size\",\"target_property\":\"word_size\"},{\"input_parameter\":\"gapopen\",\"target_property\":\"gapopen\"},{\"input_parameter\":\"gapextend\",\"target_property\":\"gapextend\"},{\"input_parameter\":\"matrix\",\"target_property\":\"matrix\"},{\"input_parameter\":\"threshold\",\"target_property\":\"threshold\"},{\"input_parameter\":\"comp_based_stats\",\"target_property\":\"comp_based_stats\"},{\"input_parameter\":\"seg\",\"target_property\":\"seg\"},{\"input_parameter\":\"lcase_masking\",\"target_property\":\"lcase_masking\"},{\"input_parameter\":\"xdrop_gap_final\",\"target_property\":\"xdrop_gap_final\"},{\"input_parameter\":\"window_size\",\"target_property\":\"window_size\"},{\"input_parameter\":\"use_sw_tback\",\"target_property\":\"use_sw_tback\"},{\"input_parameter\":\"mcl_p\",\"target_property\":\"mcl_p\"},{\"input_parameter\":\"mcl_s\",\"target_property\":\"mcl_s\"},{\"input_parameter\":\"mcl_r\",\"target_property\":\"mcl_r\"},{\"input_parameter\":\"mcl_pct\",\"target_property\":\"mcl_pct\"},{\"input_parameter\":\"mcl_warn_p\",\"target_property\":\"mcl_warn_p\"},{\"input_parameter\":\"mcl_warn_factor\",\"target_property\":\"mcl_warn_factor\"},{\"input_parameter\":\"mcl_init_l\",\"target_property\":\"mcl_init_l\"},{\"input_parameter\":\"mcl_main_l\",\"target_property\":\"mcl_main_l\"},{\"input_parameter\":\"mcl_init_i\",\"target_property\":\"mcl_init_i\"},{\"input_parameter\":\"mcl_main_i\",\"target_property\":\"mcl_main_i\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\",\"pangenome_ref\"],\"target_property\":\"pangenome_ref\"},{\"input_parameter\":\"output_pangenome\",\"target_property\":\"name\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"},{\"service_method_output_path\":[\"0\",\"report_name\"],\"target_property\":\"report_name\"},{\"service_method_output_path\":[\"0\",\"report_ref\"],\"target_property\":\"report_ref\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-38-0d54c870-99a6-4002-967a-37eda020c035'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Pangenome with OrthoMCL", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"xdrop_gap_final": null, "mcl_warn_factor": null, "seg": null, "threshold": null, "mcl_warn_p": null, "window_size": null, "matrix": null, "mcl_init_l": null, "gapopen": null, "output_pangenome": "", "comp_based_stats": null, "mcl_init_i": null, "word_size": null, "input_genomeset": null, "use_sw_tback": 0, "input_genomes": null, "num_descriptions": null, "num_alignments": null, "gapextend": null, "mcl_pct": null, "mcl_p": null, "mcl_r": null, "mcl_s": null, "lcase_masking": 0, "mcl_main_l": null, "evalue": null, "mcl_main_i": null}}, "time": 1465865886170}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"xdrop_gap_final": null, "mcl_warn_factor": null, "seg": null, "threshold": null, "mcl_warn_p": null, "window_size": null, "matrix": null, "mcl_init_l": null, "gapopen": null, "output_pangenome": "", "comp_based_stats": null, "mcl_init_i": null, "word_size": null, "input_genomeset": null, "use_sw_tback": 0, "input_genomes": null, "num_descriptions": null, "num_alignments": null, "gapextend": null, "mcl_pct": null, "mcl_p": null, "mcl_r": null, "mcl_s": null, "lcase_masking": 0, "mcl_main_l": null, "evalue": null, "mcl_main_i": null}}, "time": 1455837447634}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Perform OrthoMCL orthologous groups construction\n", "name": "Build Pangenome with OrthoMCL", "output_types": ["KBaseGenomes.Genome", "KBaseGenomes.Pangenome"], "namespace": "PangenomeOrthomcl", "tooltip": "Perform OrthoMCL orthologous groups construction\n", "git_commit_hash": "93b84e4cbb0c20021580600b76fffda37832dbd8", "input_types": ["KBaseSearch.GenomeSet"], "authors": ["rsutormin"], "module_name": "PangenomeOrthomcl", "id": "PangenomeOrthomcl/build_pangenome_with_orthomcl", "categories": ["active"], "ver": "0.0.1"}, "parameters": [{"field_type": "text", "ui_name": "Genome Set\n", "allow_multiple": 0, "description": "A set of references to genomes stored in KBase\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseSearch.GenomeSet"]}, "disabled": 0, "short_hint": "A set of references to genomes stored in KBase\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "input_genomeset", "advanced": 0}, {"field_type": "text", "ui_name": "Genomes\n", "allow_multiple": 1, "description": "A list of references to genomes stored in KBase\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "A list of references to genomes stored in KBase\n", "default_values": [""], "ui_class": "output", "optional": 1, "id": "input_genomes", "advanced": 0}, {"field_type": "text", "ui_name": "Pangenome ID\n", "allow_multiple": 0, "description": "A list of all distinct protein families identified by OrthoMCL tool in a set of input genome sequences, as well as the IDs of the proteins present in each family\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Pangenome"]}, "disabled": 0, "short_hint": "A list of all distinct protein families identified in input genome set\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_pangenome", "advanced": 0}, {"field_type": "text", "ui_name": "num_descriptions\n", "allow_multiple": 0, "description": "[blastp, -v] Store one-line descriptions for this number of database sequences. Default value is 100000.\n", "text_options": {"is_output_name": 0, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Store one-line descriptions for this number of database sequences\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "num_descriptions", "advanced": 1}, {"field_type": "text", "ui_name": "num_alignments\n", "allow_multiple": 0, "description": "[blastp, -b] Store alignments for this number of \ndatabase sequences. Default value is 100000.\n", "text_options": {"is_output_name": 0, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Store alignments for this number of database sequences\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "num_alignments", "advanced": 1}, {"field_type": "text", "ui_name": "evalue\n", "allow_multiple": 0, "description": "[blastp, -e] Expect value (E) for saving hits. Default value is 1e-5.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Expect value (E) for saving hits\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "evalue", "advanced": 1}, {"field_type": "text", "ui_name": "word_size\n", "allow_multiple": 0, "description": "[blastp, -W] Word size of initial match. Valid word sizes are 2-7. Default value is 3.\n", "text_options": {"is_output_name": 0, "max_int": 7, "min_int": 2, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Word size of initial match\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "word_size", "advanced": 1}, {"field_type": "text", "ui_name": "gapopen\n", "allow_multiple": 0, "description": "[blastp, -G] Cost to open a gap. Default value is 11.\n", "text_options": {"is_output_name": 0, "min_int": 0, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Cost to open a gap\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "gapopen", "advanced": 1}, {"field_type": "text", "ui_name": "gapextend\n", "allow_multiple": 0, "description": "[blastp, -E] Cost to extend a gap. Default value is 1.\n", "text_options": {"is_output_name": 0, "min_int": 0, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Cost to extend a gap\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "gapextend", "advanced": 1}, {"field_type": "text", "ui_name": "matrix\n", "allow_multiple": 0, "description": "[blastp, -M] Scoring matrix name. Default value is BLOSUM62.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Scoring matrix name\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "matrix", "advanced": 1}, {"field_type": "text", "ui_name": "threshold\n", "allow_multiple": 0, "description": "[blastp, -f] Minimum score to add a word to the BLAST lookup table. Default value is 11.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Minimum score to add a word to the BLAST lookup table\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "threshold", "advanced": 1}, {"field_type": "dropdown", "ui_name": "comp_based_stats\n", "allow_multiple": 0, "description": "[blastp, -C] Use composition-based statistics (0: no composition-based statistics; 1: Composition-based statistics as in NAR 29:2994-3005, 2001; 2: Composition-based score adjustments as in Bioinformatics 21:902-911, 2005, conditioned on sequence properties; 3 - Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally). Default value is 2.\n", "dropdown_options": {"options": [{"display": "default", "value": ""}, {"display": "0: no composition-based statistics", "value": "0"}, {"display": "1: Composition-based statistics as in NAR 29:2994-3005, 2001", "value": "1"}, {"display": "2: Composition-based score adjustments as in Bioinformatics 21:902-911, 2005, conditioned on sequence properties", "value": "2"}, {"display": "3 - Composition-based score adjustment as in Bioinformatics 21:902-911, 2005, unconditionally", "value": "3"}]}, "disabled": 0, "short_hint": "Use composition-based statistics \n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "comp_based_stats", "advanced": 1}, {"field_type": "dropdown", "ui_name": "seg\n", "allow_multiple": 0, "description": "[blastp, -F] Filter query sequence with SEG (yes/no). Default value is yes.\n", "dropdown_options": {"options": [{"display": "default", "value": ""}, {"display": "yes", "value": "yes"}, {"display": "no", "value": "no"}]}, "disabled": 0, "short_hint": "Filter query sequence with SEG\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "seg", "advanced": 1}, {"field_type": "checkbox", "ui_name": "lcase_masking\n", "allow_multiple": 0, "description": "[blastp, -U] Use lower case filtering in query and subject sequence(s). Default value is false(0).\n", "optional": 1, "disabled": 0, "short_hint": "Use lower case filtering in query and subject sequences\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "lcase_masking", "advanced": 1}, {"field_type": "text", "ui_name": "xdrop_gap_final\n", "allow_multiple": 0, "description": "[blastp, -Z] Heuristic value (in bits) for final gapped alignment. Default value is 25.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float", "valid_ws_types": []}, "disabled": 0, "short_hint": "Heuristic value (in bits) for final gapped alignment\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "xdrop_gap_final", "advanced": 1}, {"field_type": "text", "ui_name": "window_size\n", "allow_multiple": 0, "description": "[blastp, -A] Multiple hits window size, use 0 to specify 1-hit algorithm. Default value is 40.\n", "text_options": {"is_output_name": 0, "min_int": 1, "regex_constraint": [], "validate_as": "int", "placeholder": "", "valid_ws_types": []}, "disabled": 0, "short_hint": "Multiple hits window size \n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "window_size", "advanced": 1}, {"field_type": "checkbox", "ui_name": "use_sw_tback\n", "allow_multiple": 0, "description": "[blastp, -s] Compute locally optimal Smith-Waterman alignments. Default value is false(0).\n", "optional": 1, "disabled": 0, "short_hint": "Compute locally optimal Smith-Waterman alignments\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "use_sw_tback", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_p\n", "allow_multiple": 0, "description": "[mcl, -P] Prune number. Default value is 10000.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Prune number\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_p", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_s\n", "allow_multiple": 0, "description": "[mcl, -S] Selection number. Default value is 1100.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Selection number\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_s", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_r\n", "allow_multiple": 0, "description": "[mcl, -R] Recovery number. Default value is 1400.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Recovery number\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_r", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_pct\n", "allow_multiple": 0, "description": "[mcl, -pct] Recovery percentage. Default value is 90.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Recovery percentage\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_pct", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_warn_p\n", "allow_multiple": 0, "description": "[mcl, -warn-p] Warn if pruning reduces mass to this weight. Default value is 10.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Warn if pruning reduces mass to this weight\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_warn_p", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_warn_factor\n", "allow_multiple": 0, "description": "[mcl, -warn-factor] Warn if pruning reduces entry count by this value. Default value is 1000.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Warn if pruning reduces entry count by this value\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_warn_factor", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_init_l\n", "allow_multiple": 0, "description": "[mcl, -l] Initial loop length. Default value is 0.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Initial loop length\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_init_l", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_main_l\n", "allow_multiple": 0, "description": "[mcl, -L] Main loop length. Default value is 10000.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int", "valid_ws_types": []}, "disabled": 0, "short_hint": "Main loop length\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_main_l", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_init_i\n", "allow_multiple": 0, "description": "[mcl, -i] Initial inflation. Default value is 2.0.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float", "valid_ws_types": []}, "disabled": 0, "short_hint": "Initial inflation\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_init_i", "advanced": 1}, {"field_type": "text", "ui_name": "mcl_main_i\n", "allow_multiple": 0, "description": "[mcl, -I] Main inflation. Default value is 1.5.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float", "valid_ws_types": []}, "disabled": 0, "short_hint": "Main inflation\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "mcl_main_i", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "build_pangenome_with_orthomcl", "kb_service_version": "93b84e4cbb0c20021580600b76fffda37832dbd8", "kb_service_output_mapping": [{"target_property": "pangenome_ref", "service_method_output_path": ["0", "pangenome_ref"]}, {"target_property": "name", "input_parameter": "output_pangenome"}, {"target_property": "ws", "narrative_system_variable": "workspace"}, {"target_property": "report_name", "service_method_output_path": ["0", "report_name"]}, {"target_property": "report_ref", "service_method_output_path": ["0", "report_ref"]}, {"target_property": "workspace_name", "narrative_system_variable": "workspace"}], "kb_service_url": "", "kb_service_name": "PangenomeOrthomcl", "kb_service_input_mapping": [{"target_property": "input_genomeset_ref", "input_parameter": "input_genomeset", "target_type_transform": "ref"}, {"target_property": "input_genome_refs", "input_parameter": "input_genomes", "target_type_transform": "list<ref>"}, {"target_property": "output_workspace", "narrative_system_variable": "workspace"}, {"target_property": "output_pangenome_id", "input_parameter": "output_pangenome"}, {"target_property": "num_descriptions", "input_parameter": "num_descriptions"}, {"target_property": "num_alignments", "input_parameter": "num_alignments"}, {"target_property": "evalue", "input_parameter": "evalue"}, {"target_property": "word_size", "input_parameter": "word_size"}, {"target_property": "gapopen", "input_parameter": "gapopen"}, {"target_property": "gapextend", "input_parameter": "gapextend"}, {"target_property": "matrix", "input_parameter": "matrix"}, {"target_property": "threshold", "input_parameter": "threshold"}, {"target_property": "comp_based_stats", "input_parameter": "comp_based_stats"}, {"target_property": "seg", "input_parameter": "seg"}, {"target_property": "lcase_masking", "input_parameter": "lcase_masking"}, {"target_property": "xdrop_gap_final", "input_parameter": "xdrop_gap_final"}, {"target_property": "window_size", "input_parameter": "window_size"}, {"target_property": "use_sw_tback", "input_parameter": "use_sw_tback"}, {"target_property": "mcl_p", "input_parameter": "mcl_p"}, {"target_property": "mcl_s", "input_parameter": "mcl_s"}, {"target_property": "mcl_r", "input_parameter": "mcl_r"}, {"target_property": "mcl_pct", "input_parameter": "mcl_pct"}, {"target_property": "mcl_warn_p", "input_parameter": "mcl_warn_p"}, {"target_property": "mcl_warn_factor", "input_parameter": "mcl_warn_factor"}, {"target_property": "mcl_init_l", "input_parameter": "mcl_init_l"}, {"target_property": "mcl_main_l", "input_parameter": "mcl_main_l"}, {"target_property": "mcl_init_i", "input_parameter": "mcl_init_i"}, {"target_property": "mcl_main_i", "input_parameter": "mcl_main_i"}]}, "widgets": {"input": "null", "output": "kbasePanGenome"}}}}}, {"source": "<div id='kb-cell-39-813e1c6a-c8e0-4f30-817e-81a85bacc577'></div>\n<script>$('#kb-cell-39-813e1c6a-c8e0-4f30-817e-81a85bacc577').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"fba_tools/compare_fba_solutions\",\"module_name\":\"fba_tools\",\"git_commit_hash\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"name\":\"Compare FBA solutions\",\"ver\":\"1.0.0\",\"subtitle\":\"Compare the solutions from multiple FBA simulations\\n\",\"tooltip\":\"Compare the solutions from multiple FBA simulations\\n\",\"categories\":[\"active\"],\"authors\":[\"chenry\"],\"input_types\":[\"KBaseFBA.FBA\"],\"output_types\":[\"KBaseFBA.FBAComparison\"],\"namespace\":\"fba_tools\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseTabTable\"},\"parameters\":[{\"id\":\"fba_id_list\",\"ui_name\":\"FBA(s)\\n\",\"short_hint\":\"Select FBA solutions one at a time to compare one at a time; solutions must be created or copied into your narrative to be compared\\n\",\"description\":\"Select FBA solutions one at a time to compare one at a time; solutions must be created or copied into your narrative to be compared\\n\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBA\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"fbacomparison_output_id\",\"ui_name\":\"FBA comparison ID\\n\",\"short_hint\":\"Name of the object where FBA comparison data will be stored in your narrative\\n\",\"description\":\"Name of the object where FBA comparison data will be stored in your narrative\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBAComparison\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"fba_tools\",\"kb_service_version\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"kb_service_method\":\"compare_fba_solutions\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"},{\"input_parameter\":\"fba_id_list\",\"target_property\":\"fba_id_list\"},{\"input_parameter\":\"fbacomparison_output_id\",\"target_property\":\"fbacomparison_output_id\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"},{\"constant_value\":\"KBaseFBA.FBAComparison\",\"target_property\":\"type\"},{\"input_parameter\":\"fbacomparison_output_id\",\"target_property\":\"obj\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-39-813e1c6a-c8e0-4f30-817e-81a85bacc577'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Compare FBA solutions", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"fba_id_list": [""], "fbacomparison_output_id": ""}}, "time": 1465865886170}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"fba_id_list": [""], "fbacomparison_output_id": ""}}, "time": 1455837447634}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Compare the solutions from multiple FBA simulations\n", "name": "Compare FBA solutions", "output_types": ["KBaseFBA.FBAComparison"], "namespace": "fba_tools", "tooltip": "Compare the solutions from multiple FBA simulations\n", "git_commit_hash": "12d84163e243733f1f8616672ca528963be29f8d", "input_types": ["KBaseFBA.FBA"], "authors": ["chenry"], "module_name": "fba_tools", "id": "fba_tools/compare_fba_solutions", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "FBA(s)\n", "allow_multiple": 1, "description": "Select FBA solutions one at a time to compare one at a time; solutions must be created or copied into your narrative to be compared\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBA"]}, "disabled": 0, "short_hint": "Select FBA solutions one at a time to compare one at a time; solutions must be created or copied into your narrative to be compared\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "fba_id_list", "advanced": 0}, {"field_type": "text", "ui_name": "FBA comparison ID\n", "allow_multiple": 0, "description": "Name of the object where FBA comparison data will be stored in your narrative\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBAComparison"]}, "disabled": 0, "short_hint": "Name of the object where FBA comparison data will be stored in your narrative\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "fbacomparison_output_id", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "compare_fba_solutions", "kb_service_version": "12d84163e243733f1f8616672ca528963be29f8d", "kb_service_output_mapping": [{"target_property": "ws", "narrative_system_variable": "workspace"}, {"target_property": "type", "constant_value": "KBaseFBA.FBAComparison"}, {"target_property": "obj", "input_parameter": "fbacomparison_output_id"}], "kb_service_url": "", "kb_service_name": "fba_tools", "kb_service_input_mapping": [{"target_property": "workspace", "narrative_system_variable": "workspace"}, {"target_property": "fba_id_list", "input_parameter": "fba_id_list"}, {"target_property": "fbacomparison_output_id", "input_parameter": "fbacomparison_output_id"}]}, "widgets": {"input": "null", "output": "kbaseTabTable"}}}}}, {"source": "<div id='kb-cell-40-f52882c0-f184-41ad-9af5-eda01568cebe'></div>\n<script>$('#kb-cell-40-f52882c0-f184-41ad-9af5-eda01568cebe').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"fba_tools/compare_flux_with_expression\",\"module_name\":\"fba_tools\",\"git_commit_hash\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"name\":\"Compare flux with expression\",\"ver\":\"1.0.0\",\"subtitle\":\"Compare reaction flux with gene expression to identify pathways where expression and flux agree or are in conflict\\n\",\"tooltip\":\"Compare reaction flux with gene expression to identify pathways where expression and flux agree or are in conflict\\n\",\"categories\":[\"active\"],\"authors\":[\"chenry\"],\"input_types\":[\"KBaseFBA.FBA\",\"KBaseFeatureValues.ExpressionMatrix\"],\"output_types\":[\"KBaseFBA.FBAPathwayAnalysis\"],\"namespace\":\"fba_tools\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseExpressionAnalysis\"},\"parameters\":[{\"id\":\"fba_id\",\"ui_name\":\"FBA solution\\n\",\"short_hint\":\"Flux balance analysis solution to be compared with expression values\\n\",\"description\":\"Flux balance analysis solution to be compared with expression values\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBA\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"expseries_id\",\"ui_name\":\"Expression data set\\n\",\"short_hint\":\"An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be compared with fluxes in the selected FBA solution\\n\",\"description\":\"An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be compared with fluxes in the selected FBA solution\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"expression_condition\",\"ui_name\":\"Expression condition\\n\",\"short_hint\":\"Specific condition in expression matrix that should be compared with reaction flux\\n\",\"description\":\"Specific condition in expression matrix that should be compared with reaction flux\\n\",\"field_type\":\"textsubdata\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"textsubdata_options\":{\"placeholder\":\"\",\"multiselection\":0,\"show_src_obj\":1,\"allow_custom\":0,\"subdata_selection\":{\"parameter_id\":\"expseries_id\",\"subdata_included\":[\"data/col_ids\"],\"path_to_subdata\":[\"data\",\"col_ids\"],\"selection_id\":\"id\"}}},{\"id\":\"exp_threshold_percentile\",\"ui_name\":\"Expression threshold\\n\",\"short_hint\":\"Genes with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\\n\",\"description\":\"Genes with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.5\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"estimate_threshold\",\"ui_name\":\"Estimate threshold\\n\",\"short_hint\":\"Estimates threshold for gene expression based on a set of universal genes\\n\",\"description\":\"Estimates threshold for gene expression based on a set of universal genes\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"maximize_agreement\",\"ui_name\":\"Maximize agreement\\n\",\"short_hint\":\"Set the expression threshold to maximize agreement with flux data\\n\",\"description\":\"Set the expression threshold to maximize agreement with flux data\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]},\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"fbapathwayanalysis_output_id\",\"ui_name\":\"Output ID\\n\",\"short_hint\":\"ID where the results of the comparison will be saved\\n\",\"description\":\"ID where the results of the comparison will be saved\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFBA.FBAPathwayAnalysis\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"fba_tools\",\"kb_service_version\":\"12d84163e243733f1f8616672ca528963be29f8d\",\"kb_service_method\":\"compare_flux_with_expression\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"},{\"input_parameter\":\"fba_id\",\"target_property\":\"fba_id\"},{\"input_parameter\":\"expseries_id\",\"target_property\":\"expseries_id\"},{\"input_parameter\":\"expression_condition\",\"target_property\":\"expression_condition\"},{\"input_parameter\":\"exp_threshold_percentile\",\"target_property\":\"exp_threshold_percentile\"},{\"input_parameter\":\"estimate_threshold\",\"target_property\":\"estimate_threshold\"},{\"input_parameter\":\"maximize_agreement\",\"target_property\":\"maximize_agreement\"},{\"input_parameter\":\"fbapathwayanalysis_output_id\",\"target_property\":\"fbapathwayanalysis_output_id\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"},{\"constant_value\":\"KBaseFBA.FBAPathwayAnalysis\",\"target_property\":\"type\"},{\"input_parameter\":\"fbapathwayanalysis_output_id\",\"target_property\":\"obj\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-40-f52882c0-f184-41ad-9af5-eda01568cebe'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Compare flux with expression", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"maximize_agreement": 0, "expression_condition": "", "fba_id": "", "exp_threshold_percentile": "0.5", "estimate_threshold": 0, "fbapathwayanalysis_output_id": "", "expseries_id": ""}}, "time": 1465865886171}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"maximize_agreement": 0, "expression_condition": "", "fba_id": "", "exp_threshold_percentile": "0.5", "estimate_threshold": 0, "fbapathwayanalysis_output_id": "", "expseries_id": ""}}, "time": 1455837447635}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Compare reaction flux with gene expression to identify pathways where expression and flux agree or are in conflict\n", "name": "Compare flux with expression", "output_types": ["KBaseFBA.FBAPathwayAnalysis"], "namespace": "fba_tools", "tooltip": "Compare reaction flux with gene expression to identify pathways where expression and flux agree or are in conflict\n", "git_commit_hash": "12d84163e243733f1f8616672ca528963be29f8d", "input_types": ["KBaseFBA.FBA", "KBaseFeatureValues.ExpressionMatrix"], "authors": ["chenry"], "module_name": "fba_tools", "id": "fba_tools/compare_flux_with_expression", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "FBA solution\n", "allow_multiple": 0, "description": "Flux balance analysis solution to be compared with expression values\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBA"]}, "disabled": 0, "short_hint": "Flux balance analysis solution to be compared with expression values\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "fba_id", "advanced": 0}, {"field_type": "text", "ui_name": "Expression data set\n", "allow_multiple": 0, "description": "An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be compared with fluxes in the selected FBA solution\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "An imported ExpressionMatrix containing gene expression values, one condition (column) of which will be compared with fluxes in the selected FBA solution\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "expseries_id", "advanced": 0}, {"field_type": "textsubdata", "ui_name": "Expression condition\n", "allow_multiple": 0, "description": "Specific condition in expression matrix that should be compared with reaction flux\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "textsubdata_options": {"subdata_selection": {"subdata_included": ["data/col_ids"], "parameter_id": "expseries_id", "selection_id": "id", "path_to_subdata": ["data", "col_ids"]}, "multiselection": 0, "show_src_obj": 1, "placeholder": "", "allow_custom": 0}, "disabled": 0, "short_hint": "Specific condition in expression matrix that should be compared with reaction flux\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "expression_condition", "advanced": 0}, {"field_type": "text", "ui_name": "Expression threshold\n", "allow_multiple": 0, "description": "Genes with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Genes with expression values in the percentile above this threshold are considered ON; if below, they are considered OFF\n", "default_values": ["0.5"], "ui_class": "parameter", "optional": 0, "id": "exp_threshold_percentile", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Estimate threshold\n", "allow_multiple": 0, "description": "Estimates threshold for gene expression based on a set of universal genes\n", "optional": 0, "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Estimates threshold for gene expression based on a set of universal genes\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "estimate_threshold", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Maximize agreement\n", "allow_multiple": 0, "description": "Set the expression threshold to maximize agreement with flux data\n", "optional": 0, "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Set the expression threshold to maximize agreement with flux data\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "maximize_agreement", "advanced": 1}, {"field_type": "text", "ui_name": "Output ID\n", "allow_multiple": 0, "description": "ID where the results of the comparison will be saved\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFBA.FBAPathwayAnalysis"]}, "disabled": 0, "short_hint": "ID where the results of the comparison will be saved\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "fbapathwayanalysis_output_id", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "compare_flux_with_expression", "kb_service_version": "12d84163e243733f1f8616672ca528963be29f8d", "kb_service_output_mapping": [{"target_property": "ws", "narrative_system_variable": "workspace"}, {"target_property": "type", "constant_value": "KBaseFBA.FBAPathwayAnalysis"}, {"target_property": "obj", "input_parameter": "fbapathwayanalysis_output_id"}], "kb_service_url": "", "kb_service_name": "fba_tools", "kb_service_input_mapping": [{"target_property": "workspace", "narrative_system_variable": "workspace"}, {"target_property": "fba_id", "input_parameter": "fba_id"}, {"target_property": "expseries_id", "input_parameter": "expseries_id"}, {"target_property": "expression_condition", "input_parameter": "expression_condition"}, {"target_property": "exp_threshold_percentile", "input_parameter": "exp_threshold_percentile"}, {"target_property": "estimate_threshold", "input_parameter": "estimate_threshold"}, {"target_property": "maximize_agreement", "input_parameter": "maximize_agreement"}, {"target_property": "fbapathwayanalysis_output_id", "input_parameter": "fbapathwayanalysis_output_id"}]}, "widgets": {"input": "null", "output": "kbaseExpressionAnalysis"}}}}}, {"source": "<div id='kb-cell-41-039a32b1-90e9-43db-9f8b-d42329d86618'></div>\n<script>$('#kb-cell-41-039a32b1-90e9-43db-9f8b-d42329d86618').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"CoExpression/expression_toolkit_cluster_WGCNA\",\"module_name\":\"CoExpression\",\"git_commit_hash\":\"82b1be5e133a18e45f48c11d83b2ba5f500cd66a\",\"name\":\"Cluster Expression Data - WGCNA\",\"ver\":\"1.0.0\",\"subtitle\":\"Perform WGCNA clustering to group gene expression data.\\n\",\"tooltip\":\"Perform WGCNA clustering to group gene expression data.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"output_types\":[\"KBaseFeatureValues.FeatureClusters\"],\"namespace\":\"CoExpression\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseExpressionFeatureClusters\"},\"parameters\":[{\"id\":\"input_expression_matrix\",\"ui_name\":\"Expression Matrix\\n\",\"short_hint\":\"Select the Expression Matrix to use for WGCNA\\n\",\"description\":\"Choose an Expression Matrix from your Data Panel to use with this method. You can upload an Expression Matrix into your Narrative by clicking the <i>Add Data</i> button and selecting the <i>Import</i> tab.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"minRsq\",\"ui_name\":\"Minimum R Square\\n\",\"short_hint\":\"Minimum threshold for R2 that measures the fitness of gene co-expression network to scale-free topology in WGCNA\\n\",\"description\":\"Minimum threshold for R2 that measures the fitness of gene co-expression network to scale-free topology in WGCNA. See pickSoftThreshold() of WGCNA for details \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.3\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maxpower\",\"ui_name\":\"Max Power\\n\",\"short_hint\":\"Maximum power to decide the soft threshold\\n\",\"description\":\"Maximum power to decide the soft threshold. See pickSoftThreshold() of WGCNA for details.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"400\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maxmediank\",\"ui_name\":\"Max Median K\\n\",\"short_hint\":\"Maximum median connections for genes in network\\n\",\"description\":\"Maximum median connections for genes in network. See pickSoftThreshold() of WGCNA for details.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"40\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"minModuleSize\",\"ui_name\":\"Minimum Module Size\\n\",\"short_hint\":\"Minimum size of modules \\n\",\"description\":\"Minimum size of modules for the output clusters.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"50\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_cluster_set\",\"ui_name\":\"A set of clusters\\n\",\"short_hint\":\"Provide name for a set of clusters generated by this method\\n\",\"description\":\"After the method has finished running, an ClusterSet data object will be added to your data panel. Provide a name for this data object, using only alphanumeric characters and underscores.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.FeatureClusters\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"CoExpression\",\"kb_service_version\":\"82b1be5e133a18e45f48c11d83b2ba5f500cd66a\",\"kb_service_method\":\"const_coex_net_clust\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_expression_matrix\",\"target_property\":\"object_name\"},{\"input_parameter\":\"minRsq\",\"target_property\":\"minRsq\"},{\"input_parameter\":\"maxmediank\",\"target_property\":\"maxmediank\"},{\"input_parameter\":\"maxpower\",\"target_property\":\"maxpower\"},{\"input_parameter\":\"minModuleSize\",\"target_property\":\"minModuleSize\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"constant_value\":\"WGCNA\",\"target_property\":\"net_method\"},{\"constant_value\":\"WGCNA\",\"target_property\":\"clust_method\"},{\"input_parameter\":\"output_cluster_set\",\"target_property\":\"out_object_name\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"output_cluster_set\",\"target_property\":\"clusterSetID\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceID\"},{\"service_method_output_path\":[],\"target_property\":\"job_id\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-41-039a32b1-90e9-43db-9f8b-d42329d86618'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Cluster Expression Data - WGCNA", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"minModuleSize": "50", "input_expression_matrix": "", "output_cluster_set": "", "minRsq": "0.3", "maxmediank": "40", "maxpower": "400"}}, "time": 1465865886171}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"minModuleSize": "50", "input_expression_matrix": "", "output_cluster_set": "", "minRsq": "0.3", "maxmediank": "40", "maxpower": "400"}}, "time": 1455837447635}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Perform WGCNA clustering to group gene expression data.\n", "name": "Cluster Expression Data - WGCNA", "output_types": ["KBaseFeatureValues.FeatureClusters"], "namespace": "CoExpression", "tooltip": "Perform WGCNA clustering to group gene expression data.\n", "git_commit_hash": "82b1be5e133a18e45f48c11d83b2ba5f500cd66a", "input_types": ["KBaseFeatureValues.ExpressionMatrix"], "authors": [], "module_name": "CoExpression", "id": "CoExpression/expression_toolkit_cluster_WGCNA", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "Expression Matrix\n", "allow_multiple": 0, "description": "Choose an Expression Matrix from your Data Panel to use with this method. You can upload an Expression Matrix into your Narrative by clicking the <i>Add Data</i> button and selecting the <i>Import</i> tab.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "Select the Expression Matrix to use for WGCNA\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_expression_matrix", "advanced": 0}, {"field_type": "text", "ui_name": "Minimum R Square\n", "allow_multiple": 0, "description": "Minimum threshold for R2 that measures the fitness of gene co-expression network to scale-free topology in WGCNA. See pickSoftThreshold() of WGCNA for details \n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Minimum threshold for R2 that measures the fitness of gene co-expression network to scale-free topology in WGCNA\n", "default_values": ["0.3"], "ui_class": "parameter", "optional": 1, "id": "minRsq", "advanced": 1}, {"field_type": "text", "ui_name": "Max Power\n", "allow_multiple": 0, "description": "Maximum power to decide the soft threshold. See pickSoftThreshold() of WGCNA for details.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Maximum power to decide the soft threshold\n", "default_values": ["400"], "ui_class": "parameter", "optional": 1, "id": "maxpower", "advanced": 1}, {"field_type": "text", "ui_name": "Max Median K\n", "allow_multiple": 0, "description": "Maximum median connections for genes in network. See pickSoftThreshold() of WGCNA for details.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "Maximum median connections for genes in network\n", "default_values": ["40"], "ui_class": "parameter", "optional": 1, "id": "maxmediank", "advanced": 1}, {"field_type": "text", "ui_name": "Minimum Module Size\n", "allow_multiple": 0, "description": "Minimum size of modules for the output clusters.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Minimum size of modules \n", "default_values": ["50"], "ui_class": "parameter", "optional": 1, "id": "minModuleSize", "advanced": 1}, {"field_type": "text", "ui_name": "A set of clusters\n", "allow_multiple": 0, "description": "After the method has finished running, an ClusterSet data object will be added to your data panel. Provide a name for this data object, using only alphanumeric characters and underscores.\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.FeatureClusters"]}, "disabled": 0, "short_hint": "Provide name for a set of clusters generated by this method\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_cluster_set", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "const_coex_net_clust", "kb_service_version": "82b1be5e133a18e45f48c11d83b2ba5f500cd66a", "kb_service_output_mapping": [{"target_property": "clusterSetID", "input_parameter": "output_cluster_set"}, {"target_property": "workspaceID", "narrative_system_variable": "workspace"}, {"target_property": "job_id", "service_method_output_path": []}], "kb_service_url": "", "kb_service_name": "CoExpression", "kb_service_input_mapping": [{"target_property": "object_name", "input_parameter": "input_expression_matrix"}, {"target_property": "minRsq", "input_parameter": "minRsq"}, {"target_property": "maxmediank", "input_parameter": "maxmediank"}, {"target_property": "maxpower", "input_parameter": "maxpower"}, {"target_property": "minModuleSize", "input_parameter": "minModuleSize"}, {"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "net_method", "constant_value": "WGCNA"}, {"target_property": "clust_method", "constant_value": "WGCNA"}, {"target_property": "out_object_name", "input_parameter": "output_cluster_set"}]}, "widgets": {"input": "null", "output": "kbaseExpressionFeatureClusters"}}}}}, {"source": "<div id='kb-cell-42-1af21130-a8f4-4b6a-afce-39711ab6192b'></div>\n<script>$('#kb-cell-42-1af21130-a8f4-4b6a-afce-39711ab6192b').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"kb_cummerbund/create_expression_matrix\",\"module_name\":\"kb_cummerbund\",\"git_commit_hash\":\"8532cc959c48626552041962b0b9e2e4cf99922c\",\"name\":\"Create Expression Matrix\",\"ver\":\"1.0.1\",\"subtitle\":\"Create the expression matrix for the differential expression data from RNA-seq pipeline.\\n\",\"tooltip\":\"Create the expression matrix for the differential expression data from RNA-seq pipeline.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseRNASeq.RNASeqCuffdiffdifferentialExpression\"],\"output_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"namespace\":\"kb_cummerbund\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseExpressionMatrix\"},\"parameters\":[{\"id\":\"ws_cuffdiff_id\",\"ui_name\":\"Cuffdiff Output\\n\",\"short_hint\":\"Differentially expressed data from Cuffdiff\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.RNASeqCuffdiffdifferentialExpression\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"include_replicates\",\"ui_name\":\"Replicates\\n\",\"short_hint\":\"Include replicates in the output expression matrix\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"ws_expression_matrix_id\",\"ui_name\":\"Expression Matrix\\n\",\"short_hint\":\"Provide name of the output expression matrix\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"kb_cummerbund\",\"kb_service_version\":\"8532cc959c48626552041962b0b9e2e4cf99922c\",\"kb_service_method\":\"create_expression_matrix\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"input_parameter\":\"ws_cuffdiff_id\",\"target_property\":\"ws_cuffdiff_id\"},{\"input_parameter\":\"include_replicates\",\"target_property\":\"include_replicates\"},{\"input_parameter\":\"ws_expression_matrix_id\",\"target_property\":\"ws_expression_matrix_id\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"ws_expression_matrix_id\",\"target_property\":\"expressionMatrixID\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceID\"},{\"service_method_output_path\":[\"0\"],\"target_property\":\"create_expression_matrix\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-42-1af21130-a8f4-4b6a-afce-39711ab6192b'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Create Expression Matrix", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"ws_expression_matrix_id": "", "include_replicates": 0, "ws_cuffdiff_id": ""}}, "time": 1465865886171}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"ws_expression_matrix_id": "", "include_replicates": 0, "ws_cuffdiff_id": ""}}, "time": 1455837447635}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Create the expression matrix for the differential expression data from RNA-seq pipeline.\n", "name": "Create Expression Matrix", "output_types": ["KBaseFeatureValues.ExpressionMatrix"], "namespace": "kb_cummerbund", "tooltip": "Create the expression matrix for the differential expression data from RNA-seq pipeline.\n", "git_commit_hash": "8532cc959c48626552041962b0b9e2e4cf99922c", "input_types": ["KBaseRNASeq.RNASeqCuffdiffdifferentialExpression"], "authors": [], "module_name": "kb_cummerbund", "id": "kb_cummerbund/create_expression_matrix", "categories": ["active"], "ver": "1.0.1"}, "parameters": [{"field_type": "text", "ui_name": "Cuffdiff Output\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.RNASeqCuffdiffdifferentialExpression"]}, "disabled": 0, "short_hint": "Differentially expressed data from Cuffdiff\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "ws_cuffdiff_id", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Replicates\n", "allow_multiple": 0, "description": "", "optional": 0, "disabled": 0, "short_hint": "Include replicates in the output expression matrix\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "include_replicates", "advanced": 0}, {"field_type": "text", "ui_name": "Expression Matrix\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "Provide name of the output expression matrix\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "ws_expression_matrix_id", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "create_expression_matrix", "kb_service_version": "8532cc959c48626552041962b0b9e2e4cf99922c", "kb_service_output_mapping": [{"target_property": "expressionMatrixID", "input_parameter": "ws_expression_matrix_id"}, {"target_property": "workspaceID", "narrative_system_variable": "workspace"}, {"target_property": "create_expression_matrix", "service_method_output_path": ["0"]}], "kb_service_url": "", "kb_service_name": "kb_cummerbund", "kb_service_input_mapping": [{"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "ws_cuffdiff_id", "input_parameter": "ws_cuffdiff_id"}, {"target_property": "include_replicates", "input_parameter": "include_replicates"}, {"target_property": "ws_expression_matrix_id", "input_parameter": "ws_expression_matrix_id"}]}, "widgets": {"input": "null", "output": "kbaseExpressionMatrix"}}}}}, {"source": "<div id='kb-cell-43-0691d70d-782a-4471-afa5-0628c120ee3c'></div>\n<script>$('#kb-cell-43-0691d70d-782a-4471-afa5-0628c120ee3c').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"RSContigThing/filter_contigs\",\"module_name\":\"RSContigThing\",\"git_commit_hash\":\"ecaaad932f995d61db10d03649ba9bd30baa6944\",\"name\":\"Filter Contigs\",\"ver\":\"0.0.1\",\"subtitle\":\"Filters the contigs by removing contigs below a length threshold\\n\",\"tooltip\":\"Filters the contigs by removing contigs below a length threshold\\n\",\"categories\":[\"active\"],\"authors\":[\"parrello\"],\"input_types\":[\"KBaseGenomes.ContigSet\"],\"output_types\":[],\"namespace\":\"RSContigThing\"},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"contigset_id\",\"ui_name\":\"Contig Set Name\\n\",\"short_hint\":\"The contig set to filter (will be overwritten)\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.ContigSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"min_length\",\"ui_name\":\"Min Length Threshold\\n\",\"short_hint\":\"All contigs below this length will be removed\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"RSContigThing\",\"kb_service_version\":\"ecaaad932f995d61db10d03649ba9bd30baa6944\",\"kb_service_method\":\"filter_contigs\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"},{\"input_parameter\":\"contigset_id\",\"target_property\":\"contigset_id\"},{\"input_parameter\":\"min_length\",\"target_property\":\"min_length\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\"],\"target_property\":\"contig_filter_result\"},{\"input_parameter\":\"contigset_id\",\"target_property\":\"input_contigset_id\"},{\"input_parameter\":\"min_length\",\"target_property\":\"input_min_length\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-43-0691d70d-782a-4471-afa5-0628c120ee3c'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Filter Contigs", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"contigset_id": "", "min_length": ""}}, "time": 1465865886171}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"contigset_id": "", "min_length": ""}}, "time": 1455837447635}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Filters the contigs by removing contigs below a length threshold\n", "name": "Filter Contigs", "output_types": [], "namespace": "RSContigThing", "tooltip": "Filters the contigs by removing contigs below a length threshold\n", "git_commit_hash": "ecaaad932f995d61db10d03649ba9bd30baa6944", "input_types": ["KBaseGenomes.ContigSet"], "authors": ["parrello"], "module_name": "RSContigThing", "id": "RSContigThing/filter_contigs", "categories": ["active"], "ver": "0.0.1"}, "parameters": [{"field_type": "text", "ui_name": "Contig Set Name\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.ContigSet"]}, "disabled": 0, "short_hint": "The contig set to filter (will be overwritten)\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "contigset_id", "advanced": 0}, {"field_type": "text", "ui_name": "Min Length Threshold\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "All contigs below this length will be removed\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "min_length", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "filter_contigs", "kb_service_version": "ecaaad932f995d61db10d03649ba9bd30baa6944", "kb_service_output_mapping": [{"target_property": "contig_filter_result", "service_method_output_path": ["0"]}, {"target_property": "input_contigset_id", "input_parameter": "contigset_id"}, {"target_property": "input_min_length", "input_parameter": "min_length"}, {"target_property": "workspaceName", "narrative_system_variable": "workspace"}], "kb_service_url": "", "kb_service_name": "RSContigThing", "kb_service_input_mapping": [{"target_property": "workspace", "narrative_system_variable": "workspace"}, {"target_property": "contigset_id", "input_parameter": "contigset_id"}, {"target_property": "min_length", "input_parameter": "min_length"}]}, "widgets": {"input": "null", "output": "null"}}}}}, {"source": "<div id='kb-cell-44-fd6cbba9-799b-4784-9b4b-4407aaa3d44b'></div>\n<script>$('#kb-cell-44-fd6cbba9-799b-4784-9b4b-4407aaa3d44b').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"MsneddonContigFilter/filter_contigs\",\"module_name\":\"MsneddonContigFilter\",\"git_commit_hash\":\"10100999595c9031e51a877a8a278d2e06583f3a\",\"name\":\"Filter Contigs\",\"ver\":\"0.0.1\",\"subtitle\":\"Filters the contigs by removing contigs below a length threshold\\n\",\"tooltip\":\"Filters the contigs by removing contigs below a length threshold\\n\",\"categories\":[\"active\"],\"authors\":[\"msneddon\"],\"input_types\":[\"KBaseGenomes.ContigSet\"],\"output_types\":[],\"namespace\":\"MsneddonContigFilter\"},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseReportView\"},\"parameters\":[{\"id\":\"contigset_id\",\"ui_name\":\"Contig Set Name\\n\",\"short_hint\":\"The contig set to filter (will be overwritten)\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.ContigSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"min_length\",\"ui_name\":\"Min Length Threshold\\n\",\"short_hint\":\"All contigs below this length will be removed\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"MsneddonContigFilter\",\"kb_service_version\":\"10100999595c9031e51a877a8a278d2e06583f3a\",\"kb_service_method\":\"filter_contigs\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"},{\"input_parameter\":\"contigset_id\",\"target_property\":\"contigset_id\"},{\"input_parameter\":\"min_length\",\"target_property\":\"min_length\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\",\"report_name\"],\"target_property\":\"report_name\"},{\"service_method_output_path\":[\"0\",\"report_ref\"],\"target_property\":\"report_ref\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace_name\"},{\"constant_value\":\"5\",\"target_property\":\"report_window_line_height\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-44-fd6cbba9-799b-4784-9b4b-4407aaa3d44b'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Filter Contigs", "selected": true, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"contigset_id": "", "min_length": ""}}, "time": 1465865886171}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"contigset_id": "", "min_length": ""}}, "time": 1455837447636}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Filters the contigs by removing contigs below a length threshold\n", "name": "Filter Contigs", "output_types": [], "namespace": "MsneddonContigFilter", "tooltip": "Filters the contigs by removing contigs below a length threshold\n", "git_commit_hash": "10100999595c9031e51a877a8a278d2e06583f3a", "input_types": ["KBaseGenomes.ContigSet"], "authors": ["msneddon"], "module_name": "MsneddonContigFilter", "id": "MsneddonContigFilter/filter_contigs", "categories": ["active"], "ver": "0.0.1"}, "parameters": [{"field_type": "text", "ui_name": "Contig Set Name\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.ContigSet"]}, "disabled": 0, "short_hint": "The contig set to filter (will be overwritten)\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "contigset_id", "advanced": 0}, {"field_type": "text", "ui_name": "Min Length Threshold\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "All contigs below this length will be removed\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "min_length", "advanced": 0}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "filter_contigs", "kb_service_version": "10100999595c9031e51a877a8a278d2e06583f3a", "kb_service_output_mapping": [{"target_property": "report_name", "service_method_output_path": ["0", "report_name"]}, {"target_property": "report_ref", "service_method_output_path": ["0", "report_ref"]}, {"target_property": "workspace_name", "narrative_system_variable": "workspace"}, {"target_property": "report_window_line_height", "constant_value": "5"}], "kb_service_url": "", "kb_service_name": "MsneddonContigFilter", "kb_service_input_mapping": [{"target_property": "workspace", "narrative_system_variable": "workspace"}, {"target_property": "contigset_id", "input_parameter": "contigset_id"}, {"target_property": "min_length", "input_parameter": "min_length"}]}, "widgets": {"input": "null", "output": "kbaseReportView"}}}}}, {"source": "<div id='kb-cell-1-fac7cc41-d24c-48e3-a662-ef24d32c6df5'></div>\n<script>$('#kb-cell-1-fac7cc41-d24c-48e3-a662-ef24d32c6df5').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"communities_build_functional_profile\",\"name\":\"Build and Normalize Metagenomic Functional Abundance Data\",\"ver\":\"0.1.0\",\"subtitle\":\"Derive the relative abundance of genes assigned to a user-selected functional ontology in one or more selected metagenomes.\\n\",\"tooltip\":\"Derive the relative abundance of genes assigned to a user-selected functional ontology in one or more selected metagenomes. \\n\",\"header\":\"<p>The Build and Normalize Metagenomic Functional Abundance Data app retrieves functional annotation abundance profiles for a selected set of metagenomes. Functional abundance profiles and matrices can be built for whole-genome shotgun (WGS) samples. E-value, percent identity, and alignment length values can be used to filter the annotation abundance data to the desired level of stringency. Use KBase   s Search feature to create a list of metagenomes and then specify options that define the various attributes (e.g., annotation e-value, percent identity, and level) to restrict the data that will be returned. Besides specifying the metagenome(s) to include and providing an output name, the most critical parameters for creating a profile are the functional level and source on which to base the annotation (Source Name). The second part of this app normalizes and standardizes the abundance profile data (log-transformation) to reduce experimental or technical bias among profiles, making them more comparable and reducing the chance of erroneous conclusions driven by non-biological trends in the data. Boxplots are generated for both raw and normalized data to display the distribution. The output of this app is an abundance profile for one or more metagenomes. The abundance profile contains the raw annotation abundance data returned for the selected set of data attributes. Abundance profiles serve as the inputs for all other community-related apps: normalization and visualizations (PCoA, heatmap-dendrograms, and rank abundance plots) to look for trends in the data and statistical analyses to identify the taxa or functions that drive these trends.</p>\\n\\n<p><a href=&quot;http://kbase.us/build-and-normalize-metagenomic-functional-abundance-data-app/&quot; target=&quot;_blank&quot;>Tutorial for Build and Normalize Metagenomic Functional Abundance Data App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"retrieve_functional_abundance_profile\",\"input_mapping\":[],\"description\":\"Specify the list of metagenomes and the attributes that will define the data that will be returned as an abundance profile. Returns a view of the abundance profile in table and boxplot format.\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"normalize_abundance_profile\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_profile\",\"to\":\"input_profile\"}],\"description\":\"Normalize abundance data for selected abundance profile. Returns a view of the abundance profile in table and boxplot format.\\n\"}]}', 'cellId' : 'kb-cell-1-fac7cc41-d24c-48e3-a662-ef24d32c6df5'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build and Normalize Metagenomic Functional Abundance Data", "icon": "<div class=\"fa-stack fa-2x\"><i  class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></div>"}, "kb-cell": {"app": {"info": {"subtitle": "Derive the relative abundance of genes assigned to a user-selected functional ontology in one or more selected metagenomes.\n", "name": "Build and Normalize Metagenomic Functional Abundance Data", "tooltip": "Derive the relative abundance of genes assigned to a user-selected functional ontology in one or more selected metagenomes. \n", "header": "<p>The Build and Normalize Metagenomic Functional Abundance Data app retrieves functional annotation abundance profiles for a selected set of metagenomes. Functional abundance profiles and matrices can be built for whole-genome shotgun (WGS) samples. E-value, percent identity, and alignment length values can be used to filter the annotation abundance data to the desired level of stringency. Use KBase   s Search feature to create a list of metagenomes and then specify options that define the various attributes (e.g., annotation e-value, percent identity, and level) to restrict the data that will be returned. Besides specifying the metagenome(s) to include and providing an output name, the most critical parameters for creating a profile are the functional level and source on which to base the annotation (Source Name). The second part of this app normalizes and standardizes the abundance profile data (log-transformation) to reduce experimental or technical bias among profiles, making them more comparable and reducing the chance of erroneous conclusions driven by non-biological trends in the data. Boxplots are generated for both raw and normalized data to display the distribution. The output of this app is an abundance profile for one or more metagenomes. The abundance profile contains the raw annotation abundance data returned for the selected set of data attributes. Abundance profiles serve as the inputs for all other community-related apps: normalization and visualizations (PCoA, heatmap-dendrograms, and rank abundance plots) to look for trends in the data and statistical analyses to identify the taxa or functions that drive these trends.</p>\n\n<p><a href=\"http://kbase.us/build-and-normalize-metagenomic-functional-abundance-data-app/\" target=\"_blank\">Tutorial for Build and Normalize Metagenomic Functional Abundance Data App</a></p>\n", "ver": "0.1.0", "id": "communities_build_functional_profile", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "retrieve_functional_abundance_profile", "description": "Specify the list of metagenomes and the attributes that will define the data that will be returned as an abundance profile. Returns a view of the abundance profile in table and boxplot format.\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "normalize_abundance_profile", "description": "Normalize abundance data for selected abundance profile. Returns a view of the abundance profile in table and boxplot format.\n", "input_mapping": [{"to": "input_profile", "is_from_input": 1, "from": "output_profile", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"output_profile": "", "evalue": "5", "level": "level3", "source": "Subsystems", "length": "15", "input_metagenomes": "", "identity": "60"}}, "step_2": {"inputState": {"input_profile": "", "output_profile": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453769155258}, {"state": {"step": {"step_1": {"inputState": {"output_profile": "", "evalue": "5", "level": "level3", "source": "Subsystems", "length": "15", "input_metagenomes": "", "identity": "60"}}, "step_2": {"inputState": {"input_profile": "", "output_profile": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453768917748}]}}}, {"source": "<div id='kb-cell-2-7cfb371e-a851-4da0-9d4b-c1535bd06a2a'></div>\n<script>$('#kb-cell-2-7cfb371e-a851-4da0-9d4b-c1535bd06a2a').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"communities_build_taxonomic_profile\",\"name\":\"Build and Normalize Metagenomic Taxonomic Abundance Data\",\"ver\":\"0.1.0\",\"subtitle\":\"Derive the relative abundance of genes assigned to a user-selected taxonomic ontology in one or more selected metagenomes.\\n\",\"tooltip\":\"Derive the relative abundance of genes assigned to a user-selected taxonomic ontology in one or more selected metagenomes. \\n\",\"header\":\"<p>The Build and Normalize Metagenomic Taxonomic Abundance Data app generates taxonomic annotation abundance profiles and normalizes the data for a selected set of metagenomes. Taxonomic abundance profiles and matrices can be built for whole-genome shotgun (WGS) or amplicon samples. E-value, percent identity, and alignment length values can be used to filter the annotation abundance data to the desired level of stringency. Use KBase&apos;s Search feature to create a list of metagenomes and then specify options that define the various attributes (e.g., annotation e-value, percent identity, and level) to restrict the data that will be returned. Besides specifying the metagenome(s) to include and providing an output name, the most critical parameters for creating a profile are the taxa level (e.g., genus or perhaps phylum) and the source on which to base the annotation (Source Name). The second part of this app normalizes and standardizes the abundance profile data (log-transformation) to reduce experimental or technical bias among profiles, making them more comparable and reducing the chance of erroneous conclusions driven by non-biological trends in the data. Boxplots are generated for both raw and normalized data to display the distribution. The output of this app is an abundance profile for one or more metagenomes. This profile contains the raw annotation abundance data returned for the selected set of data attributes. Abundance profiles serve as the inputs for all other community-related apps: normalization, visualizations (PCoA, heatmap-dendrograms, and rank abundance plots) to look for trends in the data, and statistical analyses to identify the taxa or functions that drive these trends.</p>\\n\\n<p><a href=&quot;http://kbase.us/build-and-normalize-metagenomic-taxonomic-abundance-data-app/&quot; target=&quot;_blank&quot;>Tutorial for Build and Normalize Metagenomic Taxonomic Abundance Data App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"retrieve_taxonomic_abundance_profile\",\"input_mapping\":[],\"description\":\"Specify the list of metagenomes and the attributes that will define the data that will be returned as an abundance profile. Returns a view of the abundance profile in table and boxplot format.\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"normalize_abundance_profile\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_profile\",\"to\":\"input_profile\"}],\"description\":\"Normalize abundance data for selected abundance profile. Returns a view of the abundance profile in table and boxplot format.\\n\"}]}', 'cellId' : 'kb-cell-2-7cfb371e-a851-4da0-9d4b-c1535bd06a2a'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build and Normalize Metagenomic Taxonomic Abundance Data", "icon": "<div class=\"fa-stack fa-2x\"><i  class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></div>"}, "kb-cell": {"app": {"info": {"subtitle": "Derive the relative abundance of genes assigned to a user-selected taxonomic ontology in one or more selected metagenomes.\n", "name": "Build and Normalize Metagenomic Taxonomic Abundance Data", "tooltip": "Derive the relative abundance of genes assigned to a user-selected taxonomic ontology in one or more selected metagenomes. \n", "header": "<p>The Build and Normalize Metagenomic Taxonomic Abundance Data app generates taxonomic annotation abundance profiles and normalizes the data for a selected set of metagenomes. Taxonomic abundance profiles and matrices can be built for whole-genome shotgun (WGS) or amplicon samples. E-value, percent identity, and alignment length values can be used to filter the annotation abundance data to the desired level of stringency. Use KBase's Search feature to create a list of metagenomes and then specify options that define the various attributes (e.g., annotation e-value, percent identity, and level) to restrict the data that will be returned. Besides specifying the metagenome(s) to include and providing an output name, the most critical parameters for creating a profile are the taxa level (e.g., genus or perhaps phylum) and the source on which to base the annotation (Source Name). The second part of this app normalizes and standardizes the abundance profile data (log-transformation) to reduce experimental or technical bias among profiles, making them more comparable and reducing the chance of erroneous conclusions driven by non-biological trends in the data. Boxplots are generated for both raw and normalized data to display the distribution. The output of this app is an abundance profile for one or more metagenomes. This profile contains the raw annotation abundance data returned for the selected set of data attributes. Abundance profiles serve as the inputs for all other community-related apps: normalization, visualizations (PCoA, heatmap-dendrograms, and rank abundance plots) to look for trends in the data, and statistical analyses to identify the taxa or functions that drive these trends.</p>\n\n<p><a href=\"http://kbase.us/build-and-normalize-metagenomic-taxonomic-abundance-data-app/\" target=\"_blank\">Tutorial for Build and Normalize Metagenomic Taxonomic Abundance Data App</a></p>\n", "ver": "0.1.0", "id": "communities_build_taxonomic_profile", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "retrieve_taxonomic_abundance_profile", "description": "Specify the list of metagenomes and the attributes that will define the data that will be returned as an abundance profile. Returns a view of the abundance profile in table and boxplot format.\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "normalize_abundance_profile", "description": "Normalize abundance data for selected abundance profile. Returns a view of the abundance profile in table and boxplot format.\n", "input_mapping": [{"to": "input_profile", "is_from_input": 1, "from": "output_profile", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"output_profile": "", "evalue": "5", "level": "genus", "source": "SEED", "length": "15", "input_metagenomes": "", "identity": "60"}}, "step_2": {"inputState": {"input_profile": "", "output_profile": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453769155259}, {"state": {"step": {"step_1": {"inputState": {"output_profile": "", "evalue": "5", "level": "genus", "source": "SEED", "length": "15", "input_metagenomes": "", "identity": "60"}}, "step_2": {"inputState": {"input_profile": "", "output_profile": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453768917748}]}}}, {"source": "<div id='kb-cell-3-1f609257-b5f4-41b4-866c-b69cabbc081b'></div>\n<script>$('#kb-cell-3-1f609257-b5f4-41b4-866c-b69cabbc081b').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_plant_metabolic_model\",\"name\":\"Build Plant Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Build a metabolic model for a plant based on annotated sequences of transcripts.\\n\",\"tooltip\":\"Build a metabolic model for a plant based on annotated sequences of transcripts.\\n\",\"header\":\"<p>The Build Plant Metabolic Model app generates metabolic models for a plant. This app starts with either using import of transcript sequences (cDNA or protein sequences) in fasta format or using transcript sequences stored as Genome object in KBase. It involves three steps. First, the transcript sequences are annotated with PlantSEED based metabolic annotations. Second, a draft metabolic model is generated using annotated Genome object. Third, the draft metabolic model is gapfilled so that growth can be stimulated using Flux Balance Analysis (FBA). The user can visualize and download the annotated genome and the resulting metabolic models.</p>\\n\\n<p><a href=&quot;http://kbase.us/build-plant-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Build Plant Metabolic Model App</a></p>\\n\",\"categories\":[]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"annotate_plant_transcripts\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_genome\",\"to\":\"input_genome\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"},{\"step_id\":\"step_3\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_2\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_3\\n\"}]}', 'cellId' : 'kb-cell-3-1f609257-b5f4-41b4-866c-b69cabbc081b'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Plant Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Build a metabolic model for a plant based on annotated sequences of transcripts.\n", "name": "Build Plant Metabolic Model", "tooltip": "Build a metabolic model for a plant based on annotated sequences of transcripts.\n", "header": "<p>The Build Plant Metabolic Model app generates metabolic models for a plant. This app starts with either using import of transcript sequences (cDNA or protein sequences) in fasta format or using transcript sequences stored as Genome object in KBase. It involves three steps. First, the transcript sequences are annotated with PlantSEED based metabolic annotations. Second, a draft metabolic model is generated using annotated Genome object. Third, the draft metabolic model is gapfilled so that growth can be stimulated using Flux Balance Analysis (FBA). The user can visualize and download the annotated genome and the resulting metabolic models.</p>\n\n<p><a href=\"http://kbase.us/build-plant-metabolic-model-app/\" target=\"_blank\">Tutorial for Build Plant Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_plant_metabolic_model", "categories": []}, "steps": [{"step_id": "step_1", "method_id": "annotate_plant_transcripts", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_genome", "is_from_input": 1, "from": "output_genome", "step_source": "step_1"}]}, {"step_id": "step_3", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_3\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_2"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"output_genome": "", "input_genome": ""}}, "step_3": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}, "step_2": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886175}, {"state": {"step": {"step_1": {"inputState": {"output_genome": "", "input_genome": ""}}, "step_3": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}, "step_2": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447638}]}}}, {"source": "<div id='kb-cell-4-dda916b7-2528-486f-8d82-69036078d2c4'></div>\n<script>$('#kb-cell-4-dda916b7-2528-486f-8d82-69036078d2c4').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"genome_comparison\",\"name\":\"Compare Genomes from Pangenome\",\"ver\":\"0.1.0\",\"subtitle\":\"Conduct a detailed comparison of genomes on the basis of protein sequence similarity and function.\\n\",\"tooltip\":\"Conduct a detailed comparison of genomes on the basis of protein sequence similarity and function.\\n\",\"header\":\"<p>The Compare Genomes from Pangenome app conducts a detailed comparison of genomes on the basis of protein sequence similarity and function. It begins by creating a pangenome for a set of closely related organisms. The pangenome is defined as the set of conserved and variable genes that are found within a set of related genomes. In many cases, this is a desirable analysis for understanding which genes were gained and lost between strains, or for inferring which genes may confer a phenotype to a given strain.</p>\\n\\n<p><a href=&quot;http://kbase.us/compare-genomes-from-pangenome-app/&quot; target=&quot;_blank&quot;>Tutorial for Compare Genomes from Pangenome App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"compute_pangenome\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"genome_comparison_from_pangenome\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_pangenome\",\"to\":\"input_pangenome\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-4-dda916b7-2528-486f-8d82-69036078d2c4'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Compare Genomes from Pangenome", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Conduct a detailed comparison of genomes on the basis of protein sequence similarity and function.\n", "name": "Compare Genomes from Pangenome", "tooltip": "Conduct a detailed comparison of genomes on the basis of protein sequence similarity and function.\n", "header": "<p>The Compare Genomes from Pangenome app conducts a detailed comparison of genomes on the basis of protein sequence similarity and function. It begins by creating a pangenome for a set of closely related organisms. The pangenome is defined as the set of conserved and variable genes that are found within a set of related genomes. In many cases, this is a desirable analysis for understanding which genes were gained and lost between strains, or for inferring which genes may confer a phenotype to a given strain.</p>\n\n<p><a href=\"http://kbase.us/compare-genomes-from-pangenome-app/\" target=\"_blank\">Tutorial for Compare Genomes from Pangenome App</a></p>\n", "ver": "0.1.0", "id": "genome_comparison", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "compute_pangenome", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "genome_comparison_from_pangenome", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_pangenome", "is_from_input": 1, "from": "output_pangenome", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"output_pangenome": "", "input_genomes": null, "input_genomeset": null}}, "step_2": {"inputState": {"input_pangenome": "", "output_gencomp": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886176}, {"state": {"step": {"step_1": {"inputState": {"output_pangenome": "", "input_genomes": null, "input_genomeset": null}}, "step_2": {"inputState": {"input_pangenome": "", "output_gencomp": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447638}]}}}, {"source": "<div id='kb-cell-5-8360f812-af99-4edf-8e38-2b7f2006516f'></div>\n<script>$('#kb-cell-5-8360f812-af99-4edf-8e38-2b7f2006516f').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_species_tree\",\"name\":\"Insert Genomes into Species Tree\",\"ver\":\"0.1.0\",\"subtitle\":\"Determine evolutionary relationships between organisms by generating both a tree and genome set combining user-supplied genomes with closely related public genomes in KBase.\\n\",\"tooltip\":\"Determine evolutionary relationships between organisms by generating both a tree and genome set combining user-supplied genomes with closely related public genomes in KBase.\\n\",\"header\":\"<p>The Insert Genomes into Species Tree app enables a user to determine evolutionary relationships between organisms based on the differences in their genomic sequences by creating both a species tree and a genome set of closely related organisms. A set of reference alignments based on 49 highly conserved COG families is used to find the matching corresponding set of sequences in the seed genome. The sequences from the selected genome are then inserted into the reference alignments and the closest neighbors are extracted and concatenated, and a tree is rendered from them using FastTree (an approximate maximum likelihood method). After the tree is rendered, the set of neighboring genomes can be curated by adding or subtracting genomes as desired.</p>\\n\\n<p><a href=&quot;http://kbase.us/insert-genomes-into-species-tree-app/&quot; target=&quot;_blank&quot;>Tutorial for Insert Genomes into Species Tree App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"insert_set_of_genomes_into_species_tree_generic\",\"input_mapping\":[],\"description\":\"Construct a species tree containing all supplied genomes \\n\"},{\"step_id\":\"step_2\",\"method_id\":\"build_genome_set_from_tree_generic\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"param2\",\"to\":\"param0\"}],\"description\":\"Build a new genome set containing all genomes included in the species tree\\n\"}]}', 'cellId' : 'kb-cell-5-8360f812-af99-4edf-8e38-2b7f2006516f'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Insert Genomes into Species Tree", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Determine evolutionary relationships between organisms by generating both a tree and genome set combining user-supplied genomes with closely related public genomes in KBase.\n", "name": "Insert Genomes into Species Tree", "tooltip": "Determine evolutionary relationships between organisms by generating both a tree and genome set combining user-supplied genomes with closely related public genomes in KBase.\n", "header": "<p>The Insert Genomes into Species Tree app enables a user to determine evolutionary relationships between organisms based on the differences in their genomic sequences by creating both a species tree and a genome set of closely related organisms. A set of reference alignments based on 49 highly conserved COG families is used to find the matching corresponding set of sequences in the seed genome. The sequences from the selected genome are then inserted into the reference alignments and the closest neighbors are extracted and concatenated, and a tree is rendered from them using FastTree (an approximate maximum likelihood method). After the tree is rendered, the set of neighboring genomes can be curated by adding or subtracting genomes as desired.</p>\n\n<p><a href=\"http://kbase.us/insert-genomes-into-species-tree-app/\" target=\"_blank\">Tutorial for Insert Genomes into Species Tree App</a></p>\n", "ver": "0.1.0", "id": "build_species_tree", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "insert_set_of_genomes_into_species_tree_generic", "description": "Construct a species tree containing all supplied genomes \n", "input_mapping": []}, {"step_id": "step_2", "method_id": "build_genome_set_from_tree_generic", "description": "Build a new genome set containing all genomes included in the species tree\n", "input_mapping": [{"to": "param0", "is_from_input": 1, "from": "param2", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"param2": "", "param1": "100", "param0": [""]}}, "step_2": {"inputState": {"param1": "", "param0": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886176}, {"state": {"step": {"step_1": {"inputState": {"param2": "", "param1": "100", "param0": [""]}}, "step_2": {"inputState": {"param1": "", "param0": ""}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447638}]}}}, {"source": "<div id='kb-cell-6-2b7f7762-ce14-4176-9ada-265fd37e53e3'></div>\n<script>$('#kb-cell-6-2b7f7762-ce14-4176-9ada-265fd37e53e3').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"community_fba_modeling\",\"name\":\"Reconstruct Community Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Reconstruct a compartmentalized metabolic model of a community using abundance data.\\n\",\"tooltip\":\"Reconstruct a compartmentalized metabolic model of a community using abundance data.\\n\",\"header\":\"<p>The Reconstruct Community Metabolic Model app generates a community metabolic model to be used with model-associated apps in KBase (e.g., &quot;Run Flux Balance Analysis&quot;) to predict fluxes. To begin, the user may either upload a set of metabolic models or select a set of public metabolic models already present in KBase. KBase will then assemble these models into a single compartmentalized community model. The user may also select or upload a growth condition to which the community model will be gap filled.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-community-metabolic-model/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Community Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"compute_metagenome_annotation_set\",\"input_mapping\":[],\"description\":\"Select functional annotations organized by OTU from metagenome database\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"metagenome_annotation_to_models\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_set\",\"to\":\"input_metagenome\"}],\"description\":\"Construct metabolic models for abudant OTUs and ensemble model for all remaining functions in annotated metagenome\\n\"},{\"step_id\":\"step_3\",\"method_id\":\"merge_to_community_model\",\"input_mapping\":[{\"step_source\":\"step_2\",\"is_from_input\":1,\"from\":\"output_models\",\"to\":\"input_modelset\"}],\"description\":\"Merge all metagenome models into a single compartmentalized community model\\n\"},{\"step_id\":\"step_4\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_3\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"Gapfill community model to permit function on a specified growth condition\\n\"}]}', 'cellId' : 'kb-cell-6-2b7f7762-ce14-4176-9ada-265fd37e53e3'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Community Metabolic Model", "icon": "<div class=\"fa-stack fa-2x\"><i  class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></div>"}, "kb-cell": {"app": {"info": {"subtitle": "Reconstruct a compartmentalized metabolic model of a community using abundance data.\n", "name": "Reconstruct Community Metabolic Model", "tooltip": "Reconstruct a compartmentalized metabolic model of a community using abundance data.\n", "header": "<p>The Reconstruct Community Metabolic Model app generates a community metabolic model to be used with model-associated apps in KBase (e.g., \"Run Flux Balance Analysis\") to predict fluxes. To begin, the user may either upload a set of metabolic models or select a set of public metabolic models already present in KBase. KBase will then assemble these models into a single compartmentalized community model. The user may also select or upload a growth condition to which the community model will be gap filled.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-community-metabolic-model/\" target=\"_blank\">Tutorial for Reconstruct Community Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "community_fba_modeling", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "compute_metagenome_annotation_set", "description": "Select functional annotations organized by OTU from metagenome database\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "metagenome_annotation_to_models", "description": "Construct metabolic models for abudant OTUs and ensemble model for all remaining functions in annotated metagenome\n", "input_mapping": [{"to": "input_metagenome", "is_from_input": 1, "from": "output_set", "step_source": "step_1"}]}, {"step_id": "step_3", "method_id": "merge_to_community_model", "description": "Merge all metagenome models into a single compartmentalized community model\n", "input_mapping": [{"to": "input_modelset", "is_from_input": 1, "from": "output_models", "step_source": "step_2"}]}, {"step_id": "step_4", "method_id": "gapfill_a_metabolic_model", "description": "Gapfill community model to permit function on a specified growth condition\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_3"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"level": "genus", "evalue": "5", "output_set": "", "length": "15", "input_metagenome": "", "top": "10", "identity": "60"}}, "step_3": {"inputState": {"input_models": null, "input_modelset": null, "output_model": ""}}, "step_2": {"inputState": {"max_otu_models": "2", "min_abundance": "1", "min_reactions": "100", "output_models": "", "input_metagenome": ""}}, "step_4": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453769155262}, {"state": {"step": {"step_1": {"inputState": {"level": "genus", "evalue": "5", "output_set": "", "length": "15", "input_metagenome": "", "top": "10", "identity": "60"}}, "step_3": {"inputState": {"input_models": null, "input_modelset": null, "output_model": ""}}, "step_2": {"inputState": {"max_otu_models": "2", "min_abundance": "1", "min_reactions": "100", "output_models": "", "input_metagenome": ""}}, "step_4": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1453768917750}]}}}, {"source": "<div id='kb-cell-7-91ba29a8-fefc-4457-b94d-8e59e021b500'></div>\n<script>$('#kb-cell-7-91ba29a8-fefc-4457-b94d-8e59e021b500').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-7-91ba29a8-fefc-4457-b94d-8e59e021b500'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886177}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447640}]}}}, {"source": "<div id='kb-cell-8-cb36509c-7365-4a7f-a91c-9d63d7021ad7'></div>\n<script>$('#kb-cell-8-cb36509c-7365-4a7f-a91c-9d63d7021ad7').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"KBaseRNASeq/align_reads_using_bowtie2\",\"module_name\":\"KBaseRNASeq\",\"name\":\"Align Reads using Bowtie2\",\"ver\":\"1.0.0\",\"subtitle\":\"Align Reads using Bowtie2\\n\",\"tooltip\":\"Align Reads using Bowtie2\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.Genome\",\"KBaseRNASeq.Bowtie2Indexes\",\"KBaseRNASeq.RNASeqSample\"],\"output_types\":[],\"namespace\":\"KBaseRNASeq\"},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"sample_id\",\"ui_name\":\"RNASeq Sample\\n\",\"short_hint\":\"RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.RNASeqSample\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"bowtie2_index\",\"ui_name\":\"Bowtie Index Id\\n\",\"short_hint\":\"Bowtie Index Id\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.Bowtie2Indexes\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_obj_name\",\"ui_name\":\"bowtie2 read alignment output\\n\",\"short_hint\":\"bowtie2 read alignment output\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"reference\",\"ui_name\":\"Reference Assembly Id\\n\",\"short_hint\":\"Reference Assembly Id\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"phred33\",\"ui_name\":\"phred33\\n\",\"short_hint\":\"phred33\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"phred64\",\"ui_name\":\"phred64\\n\",\"short_hint\":\"phred64\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"local\",\"ui_name\":\"local\\n\",\"short_hint\":\"local\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"very-fast\",\"ui_name\":\"very fast\\n\",\"short_hint\":\"very fast\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"fast\",\"ui_name\":\"fast\\n\",\"short_hint\":\"fast\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"very-sensitive\",\"ui_name\":\"very sensitive\\n\",\"short_hint\":\"very sensitive\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"sensitive\",\"ui_name\":\"sensitive\\n\",\"short_hint\":\"sensitive\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"very-fast-local\",\"ui_name\":\"very fast local\\n\",\"short_hint\":\"very fast local\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"very-sensitive-local\",\"ui_name\":\"very sensitive local\\n\",\"short_hint\":\"very sensitive local\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"fast-local\",\"ui_name\":\"fast local\\n\",\"short_hint\":\"fast local\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"fast-sensitive\",\"ui_name\":\"fast sensitive\\n\",\"short_hint\":\"fast sensitive\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseRNASeq\",\"kb_service_version\":\"de513c80d9314363345d58c2644cd3376c7a323b\",\"kb_service_method\":\"Bowtie2Call\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"sample_id\",\"target_property\":\"sample_id\"},{\"input_parameter\":\"reference\",\"target_property\":\"reference\"},{\"input_parameter\":\"bowtie2_index\",\"target_property\":\"bowtie2_index\"},{\"input_parameter\":\"phred33\",\"target_property\":\"phred33\"},{\"input_parameter\":\"phred64\",\"target_property\":\"phred64\"},{\"input_parameter\":\"local\",\"target_property\":\"local\"},{\"input_parameter\":\"very-fast\",\"target_property\":\"very-fast\"},{\"input_parameter\":\"fast\",\"target_property\":\"fast\"},{\"input_parameter\":\"very-sensitive\",\"target_property\":\"very-sensitive\"},{\"input_parameter\":\"sensitive\",\"target_property\":\"sensitive\"},{\"input_parameter\":\"very-fast-local\",\"target_property\":\"very-fast-local\"},{\"input_parameter\":\"very-sensitive-local\",\"target_property\":\"very-sensitive-local\"},{\"input_parameter\":\"fast-local\",\"target_property\":\"fast-local\"},{\"input_parameter\":\"fast-sensitive\",\"target_property\":\"fast-sensitive\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\"],\"target_property\":\"Bowtie2Call\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-8-cb36509c-7365-4a7f-a91c-9d63d7021ad7'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Align Reads using Bowtie2", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"phred33": 0, "reference": "", "very-sensitive-local": 0, "output_obj_name": "", "very-fast": 0, "fast-local": 0, "fast-sensitive": 0, "sensitive": 0, "bowtie2_index": "", "fast": 0, "sample_id": "", "phred64": 0, "local": 0, "very-sensitive": 0, "very-fast-local": 0}}, "time": 1465865886178}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"phred33": 0, "reference": "", "very-sensitive-local": 0, "output_obj_name": "", "very-fast": 0, "fast-local": 0, "fast-sensitive": 0, "sensitive": 0, "bowtie2_index": "", "fast": 0, "sample_id": "", "phred64": 0, "local": 0, "very-sensitive": 0, "very-fast-local": 0}}, "time": 1455837447640}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Align Reads using Bowtie2\n", "name": "Align Reads using Bowtie2", "output_types": [], "namespace": "KBaseRNASeq", "tooltip": "Align Reads using Bowtie2\n", "input_types": ["KBaseGenomes.Genome", "KBaseRNASeq.Bowtie2Indexes", "KBaseRNASeq.RNASeqSample"], "authors": [], "module_name": "KBaseRNASeq", "id": "KBaseRNASeq/align_reads_using_bowtie2", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "RNASeq Sample\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.RNASeqSample"]}, "disabled": 0, "short_hint": "RNASeq Sample\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "sample_id", "advanced": 0}, {"field_type": "text", "ui_name": "Bowtie Index Id\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.Bowtie2Indexes"]}, "disabled": 0, "short_hint": "Bowtie Index Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "bowtie2_index", "advanced": 0}, {"field_type": "text", "ui_name": "bowtie2 read alignment output\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "bowtie2 read alignment output\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "output_obj_name", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Assembly Id\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Reference Assembly Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "reference", "advanced": 0}, {"field_type": "checkbox", "ui_name": "phred33\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "phred33\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "phred33", "advanced": 1}, {"field_type": "checkbox", "ui_name": "phred64\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "phred64\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "phred64", "advanced": 1}, {"field_type": "checkbox", "ui_name": "local\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "local\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "local", "advanced": 1}, {"field_type": "checkbox", "ui_name": "very fast\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "very fast\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "very-fast", "advanced": 1}, {"field_type": "checkbox", "ui_name": "fast\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "fast\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "fast", "advanced": 1}, {"field_type": "checkbox", "ui_name": "very sensitive\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "very sensitive\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "very-sensitive", "advanced": 1}, {"field_type": "checkbox", "ui_name": "sensitive\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "sensitive\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "sensitive", "advanced": 1}, {"field_type": "checkbox", "ui_name": "very fast local\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "very fast local\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "very-fast-local", "advanced": 1}, {"field_type": "checkbox", "ui_name": "very sensitive local\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "very sensitive local\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "very-sensitive-local", "advanced": 1}, {"field_type": "checkbox", "ui_name": "fast local\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "fast local\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "fast-local", "advanced": 1}, {"field_type": "checkbox", "ui_name": "fast sensitive\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "fast sensitive\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "fast-sensitive", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "Bowtie2Call", "kb_service_version": "de513c80d9314363345d58c2644cd3376c7a323b", "kb_service_output_mapping": [{"target_property": "Bowtie2Call", "service_method_output_path": ["0"]}], "kb_service_url": "", "kb_service_name": "KBaseRNASeq", "kb_service_input_mapping": [{"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "sample_id", "input_parameter": "sample_id"}, {"target_property": "reference", "input_parameter": "reference"}, {"target_property": "bowtie2_index", "input_parameter": "bowtie2_index"}, {"target_property": "phred33", "input_parameter": "phred33"}, {"target_property": "phred64", "input_parameter": "phred64"}, {"target_property": "local", "input_parameter": "local"}, {"target_property": "very-fast", "input_parameter": "very-fast"}, {"target_property": "fast", "input_parameter": "fast"}, {"target_property": "very-sensitive", "input_parameter": "very-sensitive"}, {"target_property": "sensitive", "input_parameter": "sensitive"}, {"target_property": "very-fast-local", "input_parameter": "very-fast-local"}, {"target_property": "very-sensitive-local", "input_parameter": "very-sensitive-local"}, {"target_property": "fast-local", "input_parameter": "fast-local"}, {"target_property": "fast-sensitive", "input_parameter": "fast-sensitive"}]}, "widgets": {"input": "null", "output": "null"}}}}}, {"source": "<div id='kb-cell-9-350b963a-aa1f-47a8-855d-ebf44e9df834'></div>\n<script>$('#kb-cell-9-350b963a-aa1f-47a8-855d-ebf44e9df834').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"KBaseRNASeq/align_reads_using_tophat\",\"module_name\":\"KBaseRNASeq\",\"name\":\"Align Reads using Tophat\",\"ver\":\"1.0.0\",\"subtitle\":\"Align Reads using Tophat\\n\",\"tooltip\":\"Align Reads using Tophat\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.Genome\",\"KBaseRNASeq.Bowtie2Indexes\",\"KBaseRNASeq.RNASeqSample\",\"KBaseRNASeq.ReferenceAnnotation\"],\"output_types\":[],\"namespace\":\"KBaseRNASeq\"},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"sample_id\",\"ui_name\":\"RNASeq Sample\\n\",\"short_hint\":\"RNASeq Sample\\n\",\"description\":\"RNASeq Sample\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.RNASeqSample\"],\"is_output_name\":0,\"placeholder\":\"placeholder text is possible\\n\",\"regex_constraint\":[]}},{\"id\":\"annotation_gtf\",\"ui_name\":\"Reference Annotation\\n\",\"short_hint\":\"Reference Annotation\\n\",\"description\":\"Reference Annotation\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.ReferenceAnnotation\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_obj_name\",\"ui_name\":\"tophat read alignment output\\n\",\"short_hint\":\"tophat read alignment output\\n\",\"description\":\"tophat read alignment output\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"reference\",\"ui_name\":\"Reference Assembly Id\\n\",\"short_hint\":\"Reference Assembly Id\\n\",\"description\":\"Reference Assembly Id\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"bowtie_index\",\"ui_name\":\"Bowtie Index Id\\n\",\"short_hint\":\"Bowtie Index Id\\n\",\"description\":\"Bowtie Index Id\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.Bowtie2Indexes\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_mismatches\",\"ui_name\":\"Mismatches in Reads\\n\",\"short_hint\":\"Mismatches in Reads\\n\",\"description\":\"Mismatches in Reads\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_gap_length\",\"ui_name\":\"Gap length in reads\\n\",\"short_hint\":\"Gap length in reads\\n\",\"description\":\"Gap length in reads\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_edit_dist\",\"ui_name\":\"read distance\\n\",\"short_hint\":\"read distance\\n\",\"description\":\"read distance    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"min_intron_length\",\"ui_name\":\"minimum length of intron\\n\",\"short_hint\":\"minimum length of intron\\n\",\"description\":\"minimum length of intron\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"max_intron_length\",\"ui_name\":\"max length of intron\\n\",\"short_hint\":\"max length of intron\\n\",\"description\":\"max length of intron\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"num_threads\",\"ui_name\":\"number of threads\\n\",\"short_hint\":\"number of threads\\n\",\"description\":\"number of threads    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"report_secondary_alignments\",\"ui_name\":\"report secondary alignments\\n\",\"short_hint\":\"report secondary alignments\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"no_coverage_search\",\"ui_name\":\"no coverage search\\n\",\"short_hint\":\"no coverage search\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"library_type\",\"ui_name\":\"library type\\n\",\"short_hint\":\"library type\\n\",\"description\":\"library type    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseRNASeq\",\"kb_service_version\":\"de513c80d9314363345d58c2644cd3376c7a323b\",\"kb_service_method\":\"TophatCall\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"sample_id\",\"target_property\":\"sample_id\"},{\"input_parameter\":\"annotation_gtf\",\"target_property\":\"annotation_gtf\"},{\"input_parameter\":\"reference\",\"target_property\":\"reference\"},{\"input_parameter\":\"bowtie_index\",\"target_property\":\"bowtie_index\"},{\"input_parameter\":\"read_mismatches\",\"target_property\":\"read_mismatches\"},{\"input_parameter\":\"read_gap_length\",\"target_property\":\"read_gap_length\"},{\"input_parameter\":\"read_edit_dist\",\"target_property\":\"read_edit_dist\"},{\"input_parameter\":\"min_intron_length\",\"target_property\":\"min_intron_length\"},{\"input_parameter\":\"max_intron_length\",\"target_property\":\"maxi_intron_length\"},{\"input_parameter\":\"num_threads\",\"target_property\":\"num_threads\"},{\"input_parameter\":\"report_secondary_alignments\",\"target_property\":\"report_secondary_alignments\"},{\"input_parameter\":\"no_coverage_search\",\"target_property\":\"no_coverage_search\"},{\"input_parameter\":\"library_type\",\"target_property\":\"library_type\"}],\"kb_service_output_mapping\":[{\"service_method_output_path\":[\"0\"],\"target_property\":\"TophatCall\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-9-350b963a-aa1f-47a8-855d-ebf44e9df834'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Align Reads using Tophat", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": null, "num_threads": null, "annotation_gtf": "", "reference": "", "no_coverage_search": 0, "max_intron_length": null, "output_obj_name": "", "min_intron_length": null, "sample_id": "", "read_edit_dist": null, "report_secondary_alignments": 0, "bowtie_index": "", "read_mismatches": null, "read_gap_length": null}}, "time": 1465865886178}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": null, "num_threads": null, "annotation_gtf": "", "reference": "", "no_coverage_search": 0, "max_intron_length": null, "output_obj_name": "", "min_intron_length": null, "sample_id": "", "read_edit_dist": null, "report_secondary_alignments": 0, "bowtie_index": "", "read_mismatches": null, "read_gap_length": null}}, "time": 1455837447641}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Align Reads using Tophat\n", "name": "Align Reads using Tophat", "output_types": [], "namespace": "KBaseRNASeq", "tooltip": "Align Reads using Tophat\n", "input_types": ["KBaseGenomes.Genome", "KBaseRNASeq.Bowtie2Indexes", "KBaseRNASeq.RNASeqSample", "KBaseRNASeq.ReferenceAnnotation"], "authors": [], "module_name": "KBaseRNASeq", "id": "KBaseRNASeq/align_reads_using_tophat", "categories": ["active"], "ver": "1.0.0"}, "parameters": [{"field_type": "text", "ui_name": "RNASeq Sample\n", "allow_multiple": 0, "description": "RNASeq Sample\n", "text_options": {"is_output_name": 0, "placeholder": "placeholder text is possible\n", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.RNASeqSample"]}, "disabled": 0, "short_hint": "RNASeq Sample\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "sample_id", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Annotation\n", "allow_multiple": 0, "description": "Reference Annotation\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.ReferenceAnnotation"]}, "disabled": 0, "short_hint": "Reference Annotation\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "annotation_gtf", "advanced": 0}, {"field_type": "text", "ui_name": "tophat read alignment output\n", "allow_multiple": 0, "description": "tophat read alignment output\n", "disabled": 0, "short_hint": "tophat read alignment output\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "output_obj_name", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Assembly Id\n", "allow_multiple": 0, "description": "Reference Assembly Id\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Reference Assembly Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "reference", "advanced": 0}, {"field_type": "text", "ui_name": "Bowtie Index Id\n", "allow_multiple": 0, "description": "Bowtie Index Id\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.Bowtie2Indexes"]}, "disabled": 0, "short_hint": "Bowtie Index Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "bowtie_index", "advanced": 0}, {"field_type": "text", "ui_name": "Mismatches in Reads\n", "allow_multiple": 0, "description": "Mismatches in Reads\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Mismatches in Reads\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "read_mismatches", "advanced": 1}, {"field_type": "text", "ui_name": "Gap length in reads\n", "allow_multiple": 0, "description": "Gap length in reads\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Gap length in reads\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "read_gap_length", "advanced": 1}, {"field_type": "text", "ui_name": "read distance\n", "allow_multiple": 0, "description": "read distance    \n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "read distance\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "read_edit_dist", "advanced": 1}, {"field_type": "text", "ui_name": "minimum length of intron\n", "allow_multiple": 0, "description": "minimum length of intron\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "minimum length of intron\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "min_intron_length", "advanced": 1}, {"field_type": "text", "ui_name": "max length of intron\n", "allow_multiple": 0, "description": "max length of intron\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "max length of intron\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "max_intron_length", "advanced": 1}, {"field_type": "text", "ui_name": "number of threads\n", "allow_multiple": 0, "description": "number of threads    \n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "number of threads\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "num_threads", "advanced": 1}, {"field_type": "checkbox", "ui_name": "report secondary alignments\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "report secondary alignments\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "report_secondary_alignments", "advanced": 1}, {"field_type": "checkbox", "ui_name": "no coverage search\n", "allow_multiple": 0, "description": "", "optional": 1, "disabled": 0, "short_hint": "no coverage search\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "no_coverage_search", "advanced": 1}, {"field_type": "text", "ui_name": "library type\n", "allow_multiple": 0, "description": "library type    \n", "disabled": 0, "short_hint": "library type\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "library_type", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_method": "TophatCall", "kb_service_version": "de513c80d9314363345d58c2644cd3376c7a323b", "kb_service_output_mapping": [{"target_property": "TophatCall", "service_method_output_path": ["0"]}], "kb_service_url": "", "kb_service_name": "KBaseRNASeq", "kb_service_input_mapping": [{"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "sample_id", "input_parameter": "sample_id"}, {"target_property": "annotation_gtf", "input_parameter": "annotation_gtf"}, {"target_property": "reference", "input_parameter": "reference"}, {"target_property": "bowtie_index", "input_parameter": "bowtie_index"}, {"target_property": "read_mismatches", "input_parameter": "read_mismatches"}, {"target_property": "read_gap_length", "input_parameter": "read_gap_length"}, {"target_property": "read_edit_dist", "input_parameter": "read_edit_dist"}, {"target_property": "min_intron_length", "input_parameter": "min_intron_length"}, {"target_property": "maxi_intron_length", "input_parameter": "max_intron_length"}, {"target_property": "num_threads", "input_parameter": "num_threads"}, {"target_property": "report_secondary_alignments", "input_parameter": "report_secondary_alignments"}, {"target_property": "no_coverage_search", "input_parameter": "no_coverage_search"}, {"target_property": "library_type", "input_parameter": "library_type"}]}, "widgets": {"input": "null", "output": "null"}}}}}, {"source": "<div id='kb-cell-10-5a126cb5-1854-4533-a2d8-c48a158aa8fb'></div>\n<script>$('#kb-cell-10-5a126cb5-1854-4533-a2d8-c48a158aa8fb').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"align_reads_using_tophat\",\"name\":\"align_reads_using_tophat\",\"ver\":\"1.0.0\",\"subtitle\":\"align_reads_using_tophat\\n\",\"tooltip\":\"align_reads_using_tophat\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseRNASeq.BowtieIndex\",\"KBaseRNASeq.RNASeqSample\",\"KBaseRNASeq.ReferenceAnnotation\",\"KBaseRNASeq.ReferenceAssembly\"],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"ws_rnaseqSample_id\",\"ui_name\":\"RNASeq Sample\\n\",\"short_hint\":\"RNASeq Sample\\n\",\"description\":\"RNASeq Sample\\n\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.RNASeqSample\"],\"is_output_name\":0,\"placeholder\":\"placeholder text is possible\\n\",\"regex_constraint\":[]}},{\"id\":\"ws_referenceAnnotation_id\",\"ui_name\":\"Reference Annotation\\n\",\"short_hint\":\"Reference Annotation\\n\",\"description\":\"Reference Annotation\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.ReferenceAnnotation\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_obj_name\",\"ui_name\":\"tophat read alignment output\\n\",\"short_hint\":\"tophat read alignment output\\n\",\"description\":\"tophat read alignment output\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"ws_reference_assembly_id\",\"ui_name\":\"Reference Assembly Id\\n\",\"short_hint\":\"Reference Assembly Id\\n\",\"description\":\"Reference Assembly Id\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.ReferenceAssembly\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"ws_bowtieIndex_id\",\"ui_name\":\"Bowtie Index Id\\n\",\"short_hint\":\"Bowtie Index Id\\n\",\"description\":\"Bowtie Index Id\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseRNASeq.BowtieIndex\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_mismatches\",\"ui_name\":\"Mismatches in Reads\\n\",\"short_hint\":\"Mismatches in Reads\\n\",\"description\":\"Mismatches in Reads\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_gap_length\",\"ui_name\":\"Gap length in reads\\n\",\"short_hint\":\"Gap length in reads\\n\",\"description\":\"Gap length in reads\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"read_edit_dist\",\"ui_name\":\"read distance\\n\",\"short_hint\":\"read distance\\n\",\"description\":\"read distance    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"min_intron_length\",\"ui_name\":\"minimum length of intron\\n\",\"short_hint\":\"minimum length of intron\\n\",\"description\":\"minimum length of intron\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"max_intron_length\",\"ui_name\":\"max length of intron\\n\",\"short_hint\":\"max length of intron\\n\",\"description\":\"max length of intron\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"num_threads\",\"ui_name\":\"number of threads\\n\",\"short_hint\":\"number of threads\\n\",\"description\":\"number of threads    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"report_secondary_alignments\",\"ui_name\":\"report secondary alignments\\n\",\"short_hint\":\"report secondary alignments\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"no_coverage_search\",\"ui_name\":\"no coverage search\\n\",\"short_hint\":\"no coverage search\\n\",\"description\":\"\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"library_type\",\"ui_name\":\"library type\\n\",\"short_hint\":\"library type\\n\",\"description\":\"library type    \\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseRNASeq\",\"kb_service_method\":\"align_reads_using_tophat\",\"kb_service_input_mapping\":[{\"input_parameter\":\"ws_rnaseqSample_id\",\"target_property\":\"ws_rnaseqSample_id\"},{\"input_parameter\":\"ws_referenceAnnotation_id\",\"target_property\":\"ws_referenceAnnotation_id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"ws_reference_assembly_id\",\"target_property\":\"ws_reference_assembly_id\"},{\"input_parameter\":\"ws_bowtieIndex_id\",\"target_property\":\"ws_bowtieIndex_id\"},{\"input_parameter\":\"read_mismatches\",\"target_property\":\"read_mismatches\"},{\"input_parameter\":\"read_gap_length\",\"target_property\":\"read_gap_length\"},{\"input_parameter\":\"read_edit_dist\",\"target_property\":\"read_edit_dist\"},{\"input_parameter\":\"min_intron_length\",\"target_property\":\"min_intron_length\"},{\"input_parameter\":\"max_intron_length\",\"target_property\":\"maxi_intron_length\"},{\"input_parameter\":\"num_threads\",\"target_property\":\"num_threads\"},{\"input_parameter\":\"report_secondary_alignments\",\"target_property\":\"report_secondary_alignments\"},{\"input_parameter\":\"no_coverage_search\",\"target_property\":\"no_coverage_search\"},{\"input_parameter\":\"library_type\",\"target_property\":\"library_type\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"output_obj_name\",\"target_property\":\"tophat_read_alignment_output_name\"}]}}', 'cellId' : 'kb-cell-10-5a126cb5-1854-4533-a2d8-c48a158aa8fb'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "align_reads_using_tophat", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": "", "num_threads": "", "no_coverage_search": 0, "max_intron_length": "", "output_obj_name": "", "min_intron_length": "", "ws_rnaseqSample_id": [""], "ws_referenceAnnotation_id": "", "ws_bowtieIndex_id": "", "read_edit_dist": "", "report_secondary_alignments": 0, "read_mismatches": "", "ws_reference_assembly_id": "", "read_gap_length": ""}}, "time": 1465865886178}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": "", "num_threads": "", "no_coverage_search": 0, "max_intron_length": "", "output_obj_name": "", "min_intron_length": "", "ws_rnaseqSample_id": [""], "ws_referenceAnnotation_id": "", "ws_bowtieIndex_id": "", "read_edit_dist": "", "report_secondary_alignments": 0, "read_mismatches": "", "ws_reference_assembly_id": "", "read_gap_length": ""}}, "time": 1455837447641}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "align_reads_using_tophat\n", "name": "align_reads_using_tophat", "output_types": [], "namespace": null, "tooltip": "align_reads_using_tophat\n", "input_types": ["KBaseRNASeq.BowtieIndex", "KBaseRNASeq.RNASeqSample", "KBaseRNASeq.ReferenceAnnotation", "KBaseRNASeq.ReferenceAssembly"], "authors": [], "ver": "1.0.0", "id": "align_reads_using_tophat", "categories": ["active"]}, "widgets": {"input": "null", "output": "null"}, "parameters": [{"field_type": "text", "ui_name": "RNASeq Sample\n", "allow_multiple": 1, "description": "RNASeq Sample\n", "text_options": {"is_output_name": 0, "placeholder": "placeholder text is possible\n", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.RNASeqSample"]}, "disabled": 0, "short_hint": "RNASeq Sample\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "ws_rnaseqSample_id", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Annotation\n", "allow_multiple": 0, "description": "Reference Annotation\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.ReferenceAnnotation"]}, "disabled": 0, "short_hint": "Reference Annotation\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "ws_referenceAnnotation_id", "advanced": 0}, {"field_type": "text", "ui_name": "tophat read alignment output\n", "allow_multiple": 0, "description": "tophat read alignment output\n", "disabled": 0, "short_hint": "tophat read alignment output\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "output_obj_name", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Assembly Id\n", "allow_multiple": 0, "description": "Reference Assembly Id\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.ReferenceAssembly"]}, "disabled": 0, "short_hint": "Reference Assembly Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "ws_reference_assembly_id", "advanced": 0}, {"field_type": "text", "ui_name": "Bowtie Index Id\n", "allow_multiple": 0, "description": "Bowtie Index Id\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseRNASeq.BowtieIndex"]}, "disabled": 0, "short_hint": "Bowtie Index Id\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "ws_bowtieIndex_id", "advanced": 0}, {"field_type": "text", "ui_name": "Mismatches in Reads\n", "allow_multiple": 0, "description": "Mismatches in Reads\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Mismatches in Reads\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "read_mismatches", "advanced": 0}, {"field_type": "text", "ui_name": "Gap length in reads\n", "allow_multiple": 0, "description": "Gap length in reads\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Gap length in reads\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "read_gap_length", "advanced": 0}, {"field_type": "text", "ui_name": "read distance\n", "allow_multiple": 0, "description": "read distance    \n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "read distance\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "read_edit_dist", "advanced": 0}, {"field_type": "text", "ui_name": "minimum length of intron\n", "allow_multiple": 0, "description": "minimum length of intron\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "minimum length of intron\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "min_intron_length", "advanced": 0}, {"field_type": "text", "ui_name": "max length of intron\n", "allow_multiple": 0, "description": "max length of intron\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "max length of intron\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "max_intron_length", "advanced": 0}, {"field_type": "text", "ui_name": "number of threads\n", "allow_multiple": 0, "description": "number of threads    \n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "number of threads\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "num_threads", "advanced": 0}, {"field_type": "checkbox", "ui_name": "report secondary alignments\n", "allow_multiple": 0, "description": "", "optional": 0, "disabled": 0, "short_hint": "report secondary alignments\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "report_secondary_alignments", "advanced": 0}, {"field_type": "checkbox", "ui_name": "no coverage search\n", "allow_multiple": 0, "description": "", "optional": 0, "disabled": 0, "short_hint": "no coverage search\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "no_coverage_search", "advanced": 0}, {"field_type": "text", "ui_name": "library type\n", "allow_multiple": 0, "description": "library type    \n", "disabled": 0, "short_hint": "library type\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "library_type", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseRNASeq", "kb_service_url": "", "kb_service_method": "align_reads_using_tophat", "kb_service_input_mapping": [{"target_property": "ws_rnaseqSample_id", "input_parameter": "ws_rnaseqSample_id"}, {"target_property": "ws_referenceAnnotation_id", "input_parameter": "ws_referenceAnnotation_id"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "ws_reference_assembly_id", "input_parameter": "ws_reference_assembly_id"}, {"target_property": "ws_bowtieIndex_id", "input_parameter": "ws_bowtieIndex_id"}, {"target_property": "read_mismatches", "input_parameter": "read_mismatches"}, {"target_property": "read_gap_length", "input_parameter": "read_gap_length"}, {"target_property": "read_edit_dist", "input_parameter": "read_edit_dist"}, {"target_property": "min_intron_length", "input_parameter": "min_intron_length"}, {"target_property": "maxi_intron_length", "input_parameter": "max_intron_length"}, {"target_property": "num_threads", "input_parameter": "num_threads"}, {"target_property": "report_secondary_alignments", "input_parameter": "report_secondary_alignments"}, {"target_property": "no_coverage_search", "input_parameter": "no_coverage_search"}, {"target_property": "library_type", "input_parameter": "library_type"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "tophat_read_alignment_output_name", "input_parameter": "output_obj_name"}]}}}}}, {"source": "<div id='kb-cell-11-e4766350-2417-44c7-a701-90cefd8fd28e'></div>\n<script>$('#kb-cell-11-e4766350-2417-44c7-a701-90cefd8fd28e').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"annotate_metagenome\",\"name\":\"Annotate Metagenome\",\"ver\":\"1.0.0\",\"subtitle\":\"Create and annotate metagenome from single or paired-end read library\\n\",\"tooltip\":\"Create and annotate metagenome from single or paired-end read library\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseAssembly.PairedEndLibrary\",\"KBaseAssembly.SingleEndLibrary\"],\"output_types\":[\"Communities.Metagenome\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"MetagenomeView\"},\"parameters\":[{\"id\":\"input_reads\",\"ui_name\":\"Input Read Library\\n\",\"short_hint\":\"The single or paired-end read library to annotate as a metagenome\\n\",\"description\":\"The single or paired-end read library to annotate as a metagenome\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseAssembly.SingleEndLibrary\",\"KBaseAssembly.PairedEndLibrary\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_metagenome\",\"ui_name\":\"Output Metagenome\\n\",\"short_hint\":\"Name to assign the output metagenome\\n\",\"description\":\"Name to assign the output metagenome\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"Communities.Metagenome\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"project_name\",\"ui_name\":\"Project Name\\n\",\"short_hint\":\"Name of project to add metagenome too.\\n\",\"description\":\"Name of project to add metagenome too.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"script_module\":\"communities_api\",\"script_name\":\"mg-submit\",\"script_has_files\":1,\"script_input_mapping\":[{\"input_parameter\":\"input_reads\",\"target_property\":\"json_in\"},{\"input_parameter\":\"output_metagenome\",\"target_property\":\"json_out\"},{\"input_parameter\":\"project_name\",\"target_property\":\"project_name\"},{\"narrative_system_variable\":\"token\",\"target_property\":\"token\"}],\"script_output_mapping\":[{\"input_parameter\":\"output_metagenome\",\"target_property\":\"id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"}]}}', 'cellId' : 'kb-cell-11-e4766350-2417-44c7-a701-90cefd8fd28e'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Annotate Metagenome", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_reads": "", "project_name": "", "output_metagenome": ""}}, "time": 1465865886179}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_reads": "", "project_name": "", "output_metagenome": ""}}, "time": 1455837447642}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Create and annotate metagenome from single or paired-end read library\n", "name": "Annotate Metagenome", "output_types": ["Communities.Metagenome"], "namespace": null, "tooltip": "Create and annotate metagenome from single or paired-end read library\n", "input_types": ["KBaseAssembly.PairedEndLibrary", "KBaseAssembly.SingleEndLibrary"], "authors": [], "ver": "1.0.0", "id": "annotate_metagenome", "categories": ["active"]}, "widgets": {"input": "null", "output": "MetagenomeView"}, "parameters": [{"field_type": "text", "ui_name": "Input Read Library\n", "allow_multiple": 0, "description": "The single or paired-end read library to annotate as a metagenome\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseAssembly.SingleEndLibrary", "KBaseAssembly.PairedEndLibrary"]}, "disabled": 0, "short_hint": "The single or paired-end read library to annotate as a metagenome\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_reads", "advanced": 0}, {"field_type": "text", "ui_name": "Output Metagenome\n", "allow_multiple": 0, "description": "Name to assign the output metagenome\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["Communities.Metagenome"]}, "disabled": 0, "short_hint": "Name to assign the output metagenome\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_metagenome", "advanced": 0}, {"field_type": "text", "ui_name": "Project Name\n", "allow_multiple": 0, "description": "Name of project to add metagenome too.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Name of project to add metagenome too.\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "project_name", "advanced": 0}], "fixed_parameters": [], "behavior": {"script_module": "communities_api", "script_input_mapping": [{"target_property": "json_in", "input_parameter": "input_reads"}, {"target_property": "json_out", "input_parameter": "output_metagenome"}, {"target_property": "project_name", "input_parameter": "project_name"}, {"target_property": "token", "narrative_system_variable": "token"}], "script_has_files": 1, "script_name": "mg-submit", "script_output_mapping": [{"target_property": "id", "input_parameter": "output_metagenome"}, {"target_property": "ws", "narrative_system_variable": "workspace"}]}}}}}, {"source": "<div id='kb-cell-12-65a6763b-8d34-4dc1-ae90-59fb3b8296f8'></div>\n<script>$('#kb-cell-12-65a6763b-8d34-4dc1-ae90-59fb3b8296f8').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"annotate_contigset\",\"name\":\"Annotate Microbial Contigs\",\"ver\":\"1.0.0\",\"subtitle\":\"Annotate bacterial or archaeal contigs using components from the RAST (Rapid Annotations using Subsystems Technology) toolkit (RASTtk).\\n\",\"tooltip\":\"Annotate bacterial or archaeal contigs using components from the RAST (Rapid Annotations using Subsystems Technology) toolkit (RASTtk).\\n\",\"icon\":{\"url\":\"img?method_id=annotate_contigset&image_name=icon.png\"},\"categories\":[\"active\"],\"authors\":[\"chenry\",\"olson\"],\"input_types\":[\"KBaseGenomes.ContigSet\"],\"output_types\":[\"KBaseGenomes.Genome\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseGenomeView\"},\"parameters\":[{\"id\":\"input_contigset\",\"ui_name\":\"Contig Set\\n\",\"short_hint\":\"The set of contig sequences to annotate\\n\",\"description\":\"The set of contig sequences to annotate\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.ContigSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"scientific_name\",\"ui_name\":\"Scientific Name\\n\",\"short_hint\":\"The scientific name to assign to the genome\\n\",\"description\":\"The scientific name to assign to the genome\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"domain\",\"ui_name\":\"Domain\\n\",\"short_hint\":\"The domain of life of the organism being annotated\\n\",\"description\":\"The domain of life of the organism being annotated\\n\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"B\"],\"dropdown_options\":{\"options\":[{\"value\":\"B\",\"display\":\"B (Bacteria)\"},{\"value\":\"A\",\"display\":\"A (Archaea)\"}]}},{\"id\":\"genetic_code\",\"ui_name\":\"Genetic Code\\n\",\"short_hint\":\"The genetic code used in translating to protein sequences\\n\",\"description\":\"The genetic code used in translating to protein sequences\\n\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"11\"],\"dropdown_options\":{\"options\":[{\"value\":\"11\",\"display\":\"11 (Archaea, most Bacteria, most Virii, and some Mitochondria)\"},{\"value\":\"4\",\"display\":\"4 (Mycoplasmaea, Spiroplasmaea, Ureoplasmaea, and Fungal Mitochondria)\"}]}},{\"id\":\"output_genome\",\"ui_name\":\"Output Genome Name\\n\",\"short_hint\":\"Name to assign the output genome\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"call_features_rRNA_SEED\",\"ui_name\":\"Call rRNAs\\n\",\"short_hint\":\"Call rRNAs\\n\",\"description\":\"Call rRNAs\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_tRNA_trnascan\",\"ui_name\":\"Call tRNAs with tRNAscan\\n\",\"short_hint\":\"Call tRNAs with tRNAscan\\n\",\"description\":\"Call tRNAs with tRNAscan\\n    \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_selenoproteins\",\"ui_name\":\"Call selenoproteins\\n\",\"short_hint\":\"Call selenoproteins\\n\",\"description\":\"Call selenoproteins\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_pyrrolysoproteins\",\"ui_name\":\"Call pyrrolysoproteins\\n\",\"short_hint\":\"Call pyrrolysoproteins\\n\",\"description\":\"Call pyrrolysoproteins\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_repeat_region_SEED\",\"ui_name\":\"Call large repeat regions\\n\",\"short_hint\":\"Call pyrrolysoproteins\\n\",\"description\":\"Call pyrrolysoproteins\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_insertion_sequences\",\"ui_name\":\"Call insertion sequences\\n\",\"short_hint\":\"Call insertion sequences\\n\",\"description\":\"Call insertion sequences\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_strep_suis_repeat\",\"ui_name\":\"Find Streptococcus repeat regions\\n\",\"short_hint\":\"Find Streptococcus repeat regions\\n\",\"description\":\"Find Streptococcus repeat regions\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_strep_pneumo_repeat\",\"ui_name\":\"Call features strep pneumo repeat\\n\",\"short_hint\":\"Call features strep pneumo repeat\\n\",\"description\":\"Call features strep pneumo repeat\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_crispr\",\"ui_name\":\"Call CRISPRs\\n\",\"short_hint\":\"Call CRISPRs\\n\",\"description\":\"Call CRISPRs\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_CDS_glimmer3\",\"ui_name\":\"Call protein-encoding genes with Glimmer3\\n\",\"short_hint\":\"Call protein-encoding genes with Glimmer3\\n\",\"description\":\"Call protein-encoding genes with Glimmer3\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_CDS_prodigal\",\"ui_name\":\"Call protein-encoding genes with Prodigal\\n\",\"short_hint\":\"Call protein-encoding genes with Prodigal\\n\",\"description\":\"Call protein-encoding genes with Prodigal\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"annotate_proteins_kmer_v2\",\"ui_name\":\"Annotate protein-encoding genes with k-mers v2\\n\",\"short_hint\":\"Annotate protein-encoding genes with k-mers v2\\n\",\"description\":\"Annotate protein-encoding genes with k-mers v2\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"kmer_v1_parameters\",\"ui_name\":\"Annotate remaining hypothetical proteins with k-mers\\n\",\"short_hint\":\"Annotate remaining hypothetical proteins with k-mers\\n\",\"description\":\"Annotate remaining hypothetical proteins with k-mers\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"annotate_proteins_similarity\",\"ui_name\":\"Annotate remaining hypothetical proteins by searching against close relatives\\n\",\"short_hint\":\"Annotate remaining hypothetical proteins by searching against close relatives\\n\",\"description\":\"Annotate remaining hypothetical proteins by searching against close relatives\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"resolve_overlapping_features\",\"ui_name\":\"Perform basic gene overlap removal\\n\",\"short_hint\":\"Perform basic gene overlap removal\\n\",\"description\":\"Perform basic gene overlap removal\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"find_close_neighbors\",\"ui_name\":\"Find close neighbors\\n\",\"short_hint\":\"Find close neighbors\\n\",\"description\":\"Find close neighbors\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_prophage_phispy\",\"ui_name\":\"Find prophage elements with phispy\\n\",\"short_hint\":\"Find prophage elements with phispy\\n\",\"description\":\"Find prophage elements with phispy\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"genome_annotation\",\"kb_service_method\":\"annotate_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_contigset\",\"target_property\":\"input_contigset\"},{\"input_parameter\":\"scientific_name\",\"target_property\":\"scientific_name\"},{\"input_parameter\":\"domain\",\"target_property\":\"domain\"},{\"input_parameter\":\"genetic_code\",\"target_property\":\"genetic_code\"},{\"input_parameter\":\"call_features_rRNA_SEED\",\"target_property\":\"call_features_rRNA_SEED\"},{\"input_parameter\":\"call_features_tRNA_trnascan\",\"target_property\":\"call_features_tRNA_trnascan\"},{\"input_parameter\":\"call_selenoproteins\",\"target_property\":\"call_selenoproteins\"},{\"input_parameter\":\"call_pyrrolysoproteins\",\"target_property\":\"call_pyrrolysoproteins\"},{\"input_parameter\":\"call_features_repeat_region_SEED\",\"target_property\":\"call_features_repeat_region_SEED\"},{\"input_parameter\":\"call_features_insertion_sequences\",\"target_property\":\"call_features_insertion_sequences\"},{\"input_parameter\":\"call_features_strep_suis_repeat\",\"target_property\":\"call_features_strep_suis_repeat\"},{\"input_parameter\":\"call_features_strep_pneumo_repeat\",\"target_property\":\"call_features_strep_pneumo_repeat\"},{\"input_parameter\":\"call_features_crispr\",\"target_property\":\"call_features_crispr\"},{\"input_parameter\":\"call_features_CDS_glimmer3\",\"target_property\":\"call_features_CDS_glimmer3\"},{\"input_parameter\":\"call_features_CDS_prodigal\",\"target_property\":\"call_features_CDS_prodigal\"},{\"input_parameter\":\"annotate_proteins_kmer_v2\",\"target_property\":\"annotate_proteins_kmer_v2\"},{\"input_parameter\":\"kmer_v1_parameters\",\"target_property\":\"kmer_v1_parameters\"},{\"input_parameter\":\"annotate_proteins_similarity\",\"target_property\":\"annotate_proteins_similarity\"},{\"input_parameter\":\"resolve_overlapping_features\",\"target_property\":\"resolve_overlapping_features\"},{\"input_parameter\":\"find_close_neighbors\",\"target_property\":\"find_close_neighbors\"},{\"input_parameter\":\"call_features_prophage_phispy\",\"target_property\":\"call_features_prophage_phispy\"},{\"input_parameter\":\"output_genome\",\"generated_value\":{\"prefix\":\"genome_\"},\"target_property\":\"output_genome\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"output_genome\",\"target_property\":\"id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"}]}}', 'cellId' : 'kb-cell-12-65a6763b-8d34-4dc1-ae90-59fb3b8296f8'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Annotate Microbial Contigs", "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=annotate_contigset&amp;image_name=icon.png\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"domain": "B", "kmer_v1_parameters": 1, "genetic_code": "11", "call_features_CDS_prodigal": 1, "call_features_rRNA_SEED": 1, "call_features_insertion_sequences": 0, "call_features_strep_pneumo_repeat": 1, "call_selenoproteins": 1, "annotate_proteins_similarity": 1, "scientific_name": "", "find_close_neighbors": 1, "call_features_repeat_region_SEED": 1, "call_pyrrolysoproteins": 1, "call_features_strep_suis_repeat": 1, "call_features_crispr": 1, "annotate_proteins_kmer_v2": 1, "call_features_prophage_phispy": 0, "call_features_tRNA_trnascan": 1, "input_contigset": "", "call_features_CDS_glimmer3": 1, "output_genome": "", "resolve_overlapping_features": 1}}, "time": 1465865886181}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"domain": "B", "kmer_v1_parameters": 1, "genetic_code": "11", "call_features_CDS_prodigal": 1, "call_features_rRNA_SEED": 1, "call_features_insertion_sequences": 0, "call_features_strep_pneumo_repeat": 1, "call_selenoproteins": 1, "annotate_proteins_similarity": 1, "scientific_name": "", "find_close_neighbors": 1, "call_features_repeat_region_SEED": 1, "call_pyrrolysoproteins": 1, "call_features_strep_suis_repeat": 1, "call_features_crispr": 1, "annotate_proteins_kmer_v2": 1, "call_features_prophage_phispy": 0, "call_features_tRNA_trnascan": 1, "input_contigset": "", "call_features_CDS_glimmer3": 1, "output_genome": "", "resolve_overlapping_features": 1}}, "time": 1455837447643}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Annotate bacterial or archaeal contigs using components from the RAST (Rapid Annotations using Subsystems Technology) toolkit (RASTtk).\n", "name": "Annotate Microbial Contigs", "output_types": ["KBaseGenomes.Genome"], "namespace": null, "tooltip": "Annotate bacterial or archaeal contigs using components from the RAST (Rapid Annotations using Subsystems Technology) toolkit (RASTtk).\n", "input_types": ["KBaseGenomes.ContigSet"], "authors": ["chenry", "olson"], "ver": "1.0.0", "id": "annotate_contigset", "categories": ["active"], "icon": {"url": "img?method_id=annotate_contigset&image_name=icon.png"}}, "widgets": {"input": "null", "output": "kbaseGenomeView"}, "parameters": [{"field_type": "text", "ui_name": "Contig Set\n", "allow_multiple": 0, "description": "The set of contig sequences to annotate\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.ContigSet"]}, "disabled": 0, "short_hint": "The set of contig sequences to annotate\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_contigset", "advanced": 0}, {"field_type": "text", "ui_name": "Scientific Name\n", "allow_multiple": 0, "description": "The scientific name to assign to the genome\n", "disabled": 0, "short_hint": "The scientific name to assign to the genome\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "scientific_name", "advanced": 0}, {"field_type": "dropdown", "ui_name": "Domain\n", "allow_multiple": 0, "description": "The domain of life of the organism being annotated\n", "dropdown_options": {"options": [{"display": "B (Bacteria)", "value": "B"}, {"display": "A (Archaea)", "value": "A"}]}, "disabled": 0, "short_hint": "The domain of life of the organism being annotated\n", "default_values": ["B"], "ui_class": "parameter", "optional": 0, "id": "domain", "advanced": 0}, {"field_type": "dropdown", "ui_name": "Genetic Code\n", "allow_multiple": 0, "description": "The genetic code used in translating to protein sequences\n", "dropdown_options": {"options": [{"display": "11 (Archaea, most Bacteria, most Virii, and some Mitochondria)", "value": "11"}, {"display": "4 (Mycoplasmaea, Spiroplasmaea, Ureoplasmaea, and Fungal Mitochondria)", "value": "4"}]}, "disabled": 0, "short_hint": "The genetic code used in translating to protein sequences\n", "default_values": ["11"], "ui_class": "parameter", "optional": 0, "id": "genetic_code", "advanced": 0}, {"field_type": "text", "ui_name": "Output Genome Name\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Name to assign the output genome\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_genome", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Call rRNAs\n", "allow_multiple": 0, "description": "Call rRNAs\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call rRNAs\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_rRNA_SEED", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call tRNAs with tRNAscan\n", "allow_multiple": 0, "description": "Call tRNAs with tRNAscan\n    \n", "optional": 0, "disabled": 0, "short_hint": "Call tRNAs with tRNAscan\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_tRNA_trnascan", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call selenoproteins\n", "allow_multiple": 0, "description": "Call selenoproteins\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call selenoproteins\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_selenoproteins", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call pyrrolysoproteins\n", "allow_multiple": 0, "description": "Call pyrrolysoproteins\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call pyrrolysoproteins\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_pyrrolysoproteins", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call large repeat regions\n", "allow_multiple": 0, "description": "Call pyrrolysoproteins\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call pyrrolysoproteins\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_repeat_region_SEED", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call insertion sequences\n", "allow_multiple": 0, "description": "Call insertion sequences\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call insertion sequences\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_insertion_sequences", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Find Streptococcus repeat regions\n", "allow_multiple": 0, "description": "Find Streptococcus repeat regions\n            \n", "optional": 0, "disabled": 0, "short_hint": "Find Streptococcus repeat regions\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_strep_suis_repeat", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features strep pneumo repeat\n", "allow_multiple": 0, "description": "Call features strep pneumo repeat\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call features strep pneumo repeat\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_strep_pneumo_repeat", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call CRISPRs\n", "allow_multiple": 0, "description": "Call CRISPRs\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call CRISPRs\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_crispr", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call protein-encoding genes with Glimmer3\n", "allow_multiple": 0, "description": "Call protein-encoding genes with Glimmer3\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call protein-encoding genes with Glimmer3\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_CDS_glimmer3", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call protein-encoding genes with Prodigal\n", "allow_multiple": 0, "description": "Call protein-encoding genes with Prodigal\n            \n", "optional": 0, "disabled": 0, "short_hint": "Call protein-encoding genes with Prodigal\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_CDS_prodigal", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Annotate protein-encoding genes with k-mers v2\n", "allow_multiple": 0, "description": "Annotate protein-encoding genes with k-mers v2\n            \n", "optional": 0, "disabled": 0, "short_hint": "Annotate protein-encoding genes with k-mers v2\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "annotate_proteins_kmer_v2", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Annotate remaining hypothetical proteins with k-mers\n", "allow_multiple": 0, "description": "Annotate remaining hypothetical proteins with k-mers\n            \n", "optional": 0, "disabled": 0, "short_hint": "Annotate remaining hypothetical proteins with k-mers\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "kmer_v1_parameters", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Annotate remaining hypothetical proteins by searching against close relatives\n", "allow_multiple": 0, "description": "Annotate remaining hypothetical proteins by searching against close relatives\n            \n", "optional": 0, "disabled": 0, "short_hint": "Annotate remaining hypothetical proteins by searching against close relatives\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "annotate_proteins_similarity", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Perform basic gene overlap removal\n", "allow_multiple": 0, "description": "Perform basic gene overlap removal\n            \n", "optional": 0, "disabled": 0, "short_hint": "Perform basic gene overlap removal\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "resolve_overlapping_features", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Find close neighbors\n", "allow_multiple": 0, "description": "Find close neighbors\n            \n", "optional": 0, "disabled": 0, "short_hint": "Find close neighbors\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "find_close_neighbors", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Find prophage elements with phispy\n", "allow_multiple": 0, "description": "Find prophage elements with phispy\n", "optional": 0, "disabled": 0, "short_hint": "Find prophage elements with phispy\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_prophage_phispy", "advanced": 1}], "fixed_parameters": [], "behavior": {"kb_service_name": "genome_annotation", "kb_service_url": "", "kb_service_method": "annotate_genome", "kb_service_input_mapping": [{"target_property": "input_contigset", "input_parameter": "input_contigset"}, {"target_property": "scientific_name", "input_parameter": "scientific_name"}, {"target_property": "domain", "input_parameter": "domain"}, {"target_property": "genetic_code", "input_parameter": "genetic_code"}, {"target_property": "call_features_rRNA_SEED", "input_parameter": "call_features_rRNA_SEED"}, {"target_property": "call_features_tRNA_trnascan", "input_parameter": "call_features_tRNA_trnascan"}, {"target_property": "call_selenoproteins", "input_parameter": "call_selenoproteins"}, {"target_property": "call_pyrrolysoproteins", "input_parameter": "call_pyrrolysoproteins"}, {"target_property": "call_features_repeat_region_SEED", "input_parameter": "call_features_repeat_region_SEED"}, {"target_property": "call_features_insertion_sequences", "input_parameter": "call_features_insertion_sequences"}, {"target_property": "call_features_strep_suis_repeat", "input_parameter": "call_features_strep_suis_repeat"}, {"target_property": "call_features_strep_pneumo_repeat", "input_parameter": "call_features_strep_pneumo_repeat"}, {"target_property": "call_features_crispr", "input_parameter": "call_features_crispr"}, {"target_property": "call_features_CDS_glimmer3", "input_parameter": "call_features_CDS_glimmer3"}, {"target_property": "call_features_CDS_prodigal", "input_parameter": "call_features_CDS_prodigal"}, {"target_property": "annotate_proteins_kmer_v2", "input_parameter": "annotate_proteins_kmer_v2"}, {"target_property": "kmer_v1_parameters", "input_parameter": "kmer_v1_parameters"}, {"target_property": "annotate_proteins_similarity", "input_parameter": "annotate_proteins_similarity"}, {"target_property": "resolve_overlapping_features", "input_parameter": "resolve_overlapping_features"}, {"target_property": "find_close_neighbors", "input_parameter": "find_close_neighbors"}, {"target_property": "call_features_prophage_phispy", "input_parameter": "call_features_prophage_phispy"}, {"target_property": "output_genome", "input_parameter": "output_genome", "generated_value": {"prefix": "genome_"}}, {"target_property": "workspace", "narrative_system_variable": "workspace"}], "kb_service_output_mapping": [{"target_property": "id", "input_parameter": "output_genome"}, {"target_property": "ws", "narrative_system_variable": "workspace"}]}}}}}, {"source": "<div id='kb-cell-13-7f5c5e7f-2092-4deb-b9e9-cd62e36d2875'></div>\n<script>$('#kb-cell-13-7f5c5e7f-2092-4deb-b9e9-cd62e36d2875').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"reannotate_microbial_genome\",\"name\":\"Annotate Microbial Genome\",\"ver\":\"1.0.0\",\"subtitle\":\"Annotate or re-annotate bacterial or archaeal genome using RASTtk.\\n\",\"tooltip\":\"Annotate or re-annotate bacterial or archaeal genome using RASTtk.\\n\",\"icon\":{\"url\":\"img?method_id=reannotate_microbial_genome&image_name=icon.png\"},\"categories\":[\"active\"],\"authors\":[\"chenry\",\"olson\"],\"input_types\":[\"KBaseGenomes.Genome\"],\"output_types\":[\"KBaseGenomes.Genome\"],\"namespace\":null},\"replacement_text\":\"Annotated the microbial genome named {{{input_genome}}}\",\"widgets\":{\"input\":\"null\",\"output\":\"kbaseGenomeView\"},\"parameters\":[{\"id\":\"input_genome\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"A genome (set of DNA contigs) including structural and functional annotations\\n\",\"description\":\"A genome (set of DNA contigs) including structural and functional annotations\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_genome\",\"ui_name\":\"Output Genome Name\\n\",\"short_hint\":\"A genome with updated structural and functional annotations\\n\",\"description\":\"A genome with updated structural and functional annotations\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":1,\"placeholder\":\"Name to assign genome\\n\",\"regex_constraint\":[]}},{\"id\":\"call_features_rRNA_SEED\",\"ui_name\":\"Call features rRNA SEED\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_tRNA_trnascan\",\"ui_name\":\"Call features tRNA trnascan\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n    \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_selenoproteins\",\"ui_name\":\"Call selenoproteins\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_pyrrolysoproteins\",\"ui_name\":\"Call pyrrolysoproteins\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_repeat_region_SEED\",\"ui_name\":\"Call features repeat region SEED\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_insertion_sequences\",\"ui_name\":\"Call features insertion sequences\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_strep_suis_repeat\",\"ui_name\":\"Call features strep suis repeat\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_strep_pneumo_repeat\",\"ui_name\":\"Call features strep pneumo repeat\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_crispr\",\"ui_name\":\"Call features crispr\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_CDS_glimmer3\",\"ui_name\":\"Call features CDS glimmer3\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_CDS_prodigal\",\"ui_name\":\"Call features CDS prodigal\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"annotate_proteins_kmer_v2\",\"ui_name\":\"Annotate proteins kmer v2\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"kmer_v1_parameters\",\"ui_name\":\"Kmer v1 parameters\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"annotate_proteins_similarity\",\"ui_name\":\"Annotate proteins similarity\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n    \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"retain_old_anno_for_hypotheticals\",\"ui_name\":\"Retain old annotations for hypotheticals\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n    \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"resolve_overlapping_features\",\"ui_name\":\"Resolve overlapping features\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"find_close_neighbors\",\"ui_name\":\"Find close neighbors\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n            \\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"call_features_prophage_phispy\",\"ui_name\":\"Call features prophage phispy\\n\",\"short_hint\":\"See manual page for description of annotation pipieline\\n\",\"description\":\"See manual page for description of annotation pipieline\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"genome_annotation\",\"kb_service_method\":\"annotate_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_genome\",\"target_property\":\"input_genome\"},{\"input_parameter\":\"call_features_rRNA_SEED\",\"target_property\":\"call_features_rRNA_SEED\"},{\"input_parameter\":\"call_features_tRNA_trnascan\",\"target_property\":\"call_features_tRNA_trnascan\"},{\"input_parameter\":\"call_selenoproteins\",\"target_property\":\"call_selenoproteins\"},{\"input_parameter\":\"call_pyrrolysoproteins\",\"target_property\":\"call_pyrrolysoproteins\"},{\"input_parameter\":\"call_features_repeat_region_SEED\",\"target_property\":\"call_features_repeat_region_SEED\"},{\"input_parameter\":\"call_features_insertion_sequences\",\"target_property\":\"call_features_insertion_sequences\"},{\"input_parameter\":\"call_features_strep_suis_repeat\",\"target_property\":\"call_features_strep_suis_repeat\"},{\"input_parameter\":\"call_features_strep_pneumo_repeat\",\"target_property\":\"call_features_strep_pneumo_repeat\"},{\"input_parameter\":\"call_features_crispr\",\"target_property\":\"call_features_crispr\"},{\"input_parameter\":\"call_features_CDS_glimmer3\",\"target_property\":\"call_features_CDS_glimmer3\"},{\"input_parameter\":\"call_features_CDS_prodigal\",\"target_property\":\"call_features_CDS_prodigal\"},{\"input_parameter\":\"annotate_proteins_kmer_v2\",\"target_property\":\"annotate_proteins_kmer_v2\"},{\"input_parameter\":\"kmer_v1_parameters\",\"target_property\":\"kmer_v1_parameters\"},{\"input_parameter\":\"annotate_proteins_similarity\",\"target_property\":\"annotate_proteins_similarity\"},{\"input_parameter\":\"resolve_overlapping_features\",\"target_property\":\"resolve_overlapping_features\"},{\"input_parameter\":\"find_close_neighbors\",\"target_property\":\"find_close_neighbors\"},{\"input_parameter\":\"call_features_prophage_phispy\",\"target_property\":\"call_features_prophage_phispy\"},{\"input_parameter\":\"output_genome\",\"generated_value\":{\"prefix\":\"genome_\"},\"target_property\":\"output_genome\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"output_genome\",\"target_property\":\"id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"}]}}', 'cellId' : 'kb-cell-13-7f5c5e7f-2092-4deb-b9e9-cd62e36d2875'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Annotate Microbial Genome", "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=reannotate_microbial_genome&amp;image_name=icon.png\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"call_pyrrolysoproteins": 0, "call_features_strep_suis_repeat": 0, "call_features_strep_pneumo_repeat": 0, "call_selenoproteins": 0, "kmer_v1_parameters": 1, "call_features_CDS_prodigal": 0, "call_features_crispr": 0, "call_features_rRNA_SEED": 0, "call_features_tRNA_trnascan": 0, "annotate_proteins_similarity": 1, "retain_old_anno_for_hypotheticals": 0, "call_features_insertion_sequences": 0, "annotate_proteins_kmer_v2": 1, "find_close_neighbors": 1, "resolve_overlapping_features": 0, "output_genome": null, "call_features_CDS_glimmer3": 0, "input_genome": "", "call_features_repeat_region_SEED": 0, "call_features_prophage_phispy": 0}}, "time": 1465865886182}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"call_pyrrolysoproteins": 0, "call_features_strep_suis_repeat": 0, "call_features_strep_pneumo_repeat": 0, "call_selenoproteins": 0, "kmer_v1_parameters": 1, "call_features_CDS_prodigal": 0, "call_features_crispr": 0, "call_features_rRNA_SEED": 0, "call_features_tRNA_trnascan": 0, "annotate_proteins_similarity": 1, "retain_old_anno_for_hypotheticals": 0, "call_features_insertion_sequences": 0, "annotate_proteins_kmer_v2": 1, "find_close_neighbors": 1, "resolve_overlapping_features": 0, "output_genome": null, "call_features_CDS_glimmer3": 0, "input_genome": "", "call_features_repeat_region_SEED": 0, "call_features_prophage_phispy": 0}}, "time": 1455837447644}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Annotate or re-annotate bacterial or archaeal genome using RASTtk.\n", "name": "Annotate Microbial Genome", "output_types": ["KBaseGenomes.Genome"], "namespace": null, "tooltip": "Annotate or re-annotate bacterial or archaeal genome using RASTtk.\n", "input_types": ["KBaseGenomes.Genome"], "authors": ["chenry", "olson"], "ver": "1.0.0", "id": "reannotate_microbial_genome", "categories": ["active"], "icon": {"url": "img?method_id=reannotate_microbial_genome&image_name=icon.png"}}, "parameters": [{"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 0, "description": "A genome (set of DNA contigs) including structural and functional annotations\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "A genome (set of DNA contigs) including structural and functional annotations\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_genome", "advanced": 0}, {"field_type": "text", "ui_name": "Output Genome Name\n", "allow_multiple": 0, "description": "A genome with updated structural and functional annotations\n", "text_options": {"is_output_name": 1, "placeholder": "Name to assign genome\n", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "A genome with updated structural and functional annotations\n", "default_values": [""], "ui_class": "output", "optional": 1, "id": "output_genome", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Call features rRNA SEED\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_rRNA_SEED", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features tRNA trnascan\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n    \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_tRNA_trnascan", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call selenoproteins\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_selenoproteins", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call pyrrolysoproteins\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_pyrrolysoproteins", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features repeat region SEED\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_repeat_region_SEED", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features insertion sequences\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_insertion_sequences", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features strep suis repeat\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_strep_suis_repeat", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features strep pneumo repeat\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_strep_pneumo_repeat", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features crispr\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_crispr", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features CDS glimmer3\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_CDS_glimmer3", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features CDS prodigal\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_CDS_prodigal", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Annotate proteins kmer v2\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "annotate_proteins_kmer_v2", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Kmer v1 parameters\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "kmer_v1_parameters", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Annotate proteins similarity\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n    \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "annotate_proteins_similarity", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Retain old annotations for hypotheticals\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n    \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "retain_old_anno_for_hypotheticals", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Resolve overlapping features\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "resolve_overlapping_features", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Find close neighbors\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n            \n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["1"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "find_close_neighbors", "advanced": 1}, {"field_type": "checkbox", "ui_name": "Call features prophage phispy\n", "allow_multiple": 0, "description": "See manual page for description of annotation pipieline\n", "optional": 0, "disabled": 0, "short_hint": "See manual page for description of annotation pipieline\n", "default_values": ["0"], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "call_features_prophage_phispy", "advanced": 1}], "fixed_parameters": [], "replacement_text": "Annotated the microbial genome named {{{input_genome}}}", "behavior": {"kb_service_name": "genome_annotation", "kb_service_url": "", "kb_service_method": "annotate_genome", "kb_service_input_mapping": [{"target_property": "input_genome", "input_parameter": "input_genome"}, {"target_property": "call_features_rRNA_SEED", "input_parameter": "call_features_rRNA_SEED"}, {"target_property": "call_features_tRNA_trnascan", "input_parameter": "call_features_tRNA_trnascan"}, {"target_property": "call_selenoproteins", "input_parameter": "call_selenoproteins"}, {"target_property": "call_pyrrolysoproteins", "input_parameter": "call_pyrrolysoproteins"}, {"target_property": "call_features_repeat_region_SEED", "input_parameter": "call_features_repeat_region_SEED"}, {"target_property": "call_features_insertion_sequences", "input_parameter": "call_features_insertion_sequences"}, {"target_property": "call_features_strep_suis_repeat", "input_parameter": "call_features_strep_suis_repeat"}, {"target_property": "call_features_strep_pneumo_repeat", "input_parameter": "call_features_strep_pneumo_repeat"}, {"target_property": "call_features_crispr", "input_parameter": "call_features_crispr"}, {"target_property": "call_features_CDS_glimmer3", "input_parameter": "call_features_CDS_glimmer3"}, {"target_property": "call_features_CDS_prodigal", "input_parameter": "call_features_CDS_prodigal"}, {"target_property": "annotate_proteins_kmer_v2", "input_parameter": "annotate_proteins_kmer_v2"}, {"target_property": "kmer_v1_parameters", "input_parameter": "kmer_v1_parameters"}, {"target_property": "annotate_proteins_similarity", "input_parameter": "annotate_proteins_similarity"}, {"target_property": "resolve_overlapping_features", "input_parameter": "resolve_overlapping_features"}, {"target_property": "find_close_neighbors", "input_parameter": "find_close_neighbors"}, {"target_property": "call_features_prophage_phispy", "input_parameter": "call_features_prophage_phispy"}, {"target_property": "output_genome", "input_parameter": "output_genome", "generated_value": {"prefix": "genome_"}}, {"target_property": "workspace", "narrative_system_variable": "workspace"}], "kb_service_output_mapping": [{"target_property": "id", "input_parameter": "output_genome"}, {"target_property": "ws", "narrative_system_variable": "workspace"}]}, "widgets": {"input": "null", "output": "kbaseGenomeView"}}}}}, {"source": "<div id='kb-cell-14-f4f86262-d3b6-4297-bbcc-53853f6e5740'></div>\n<script>$('#kb-cell-14-f4f86262-d3b6-4297-bbcc-53853f6e5740').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"annotate_plant_transcripts\",\"name\":\"Annotate Plant Transcripts with Metabolic Functions\",\"ver\":\"1.0.0\",\"subtitle\":\"Annotate a set of plant transcripts with metabolic functions from the PlantSEED project.\\n\",\"tooltip\":\"Annotate a set of plant transcripts with metabolic functions from the PlantSEED project.\\n\",\"icon\":{\"url\":\"img?method_id=annotate_plant_transcripts&image_name=icon.png\"},\"categories\":[\"active\"],\"authors\":[\"seaver\"],\"input_types\":[\"KBaseGenomes.Genome\"],\"output_types\":[\"KBaseGenomes.Genome\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseGenomeView\"},\"parameters\":[{\"id\":\"input_genome\",\"ui_name\":\"Plant Transcripts\\n\",\"short_hint\":\"The set of plant transcripts to annotate\\n\",\"description\":\"The set of plant transcripts to annotate\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"output_genome\",\"ui_name\":\"Output Genome\\n\",\"short_hint\":\"A set of metabolically annotated transcripts saved as a &quot;Genome&quot; object\\n\",\"description\":\"A set of metabolically annotated transcripts saved as a &quot;Genome&quot; object\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":1,\"placeholder\":\"Name of Output Genome\\n\",\"regex_constraint\":[]}}],\"fixed_parameters\":[{\"ui_name\":\"Dataset name\",\"description\":\"The name of the set of signature k-mers to use for annotating the plant transcripts. The SEED project frequently releases new and updated sets of signature k-mers for each round of annotation accomplished. The set that contains this parameter allows us to retrieve and use the signature k-mers computed via the PlantSEED project. We are currently using Release 70.\"},{\"ui_name\":\"k-mer size\",\"description\":\"The length of k-mer to use when annotating plant transcripts. When a set of signature k-mers is computed, the computation is done at various k-mer lengths. By default we are using the signature k-mers of 8 amino acids in length.\"}],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"genome_annotation\",\"kb_service_method\":\"annotate_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_genome\",\"target_property\":\"input_genome\"},{\"input_parameter\":\"output_genome\",\"target_property\":\"output_genome\"},{\"constant_value\":\"1\",\"target_property\":\"kmer_v1_parameters\"},{\"constant_value\":\"1\",\"target_property\":\"retain_old_anno_for_hypotheticals\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspace\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"output_genome\",\"target_property\":\"id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws\"}]}}', 'cellId' : 'kb-cell-14-f4f86262-d3b6-4297-bbcc-53853f6e5740'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Annotate Plant Transcripts with Metabolic Functions", "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=annotate_plant_transcripts&amp;image_name=icon.png\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"output_genome": "", "input_genome": ""}}, "time": 1465865886182}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"output_genome": "", "input_genome": ""}}, "time": 1455837447644}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Annotate a set of plant transcripts with metabolic functions from the PlantSEED project.\n", "name": "Annotate Plant Transcripts with Metabolic Functions", "output_types": ["KBaseGenomes.Genome"], "namespace": null, "tooltip": "Annotate a set of plant transcripts with metabolic functions from the PlantSEED project.\n", "input_types": ["KBaseGenomes.Genome"], "authors": ["seaver"], "ver": "1.0.0", "id": "annotate_plant_transcripts", "categories": ["active"], "icon": {"url": "img?method_id=annotate_plant_transcripts&image_name=icon.png"}}, "widgets": {"input": "null", "output": "kbaseGenomeView"}, "parameters": [{"field_type": "text", "ui_name": "Plant Transcripts\n", "allow_multiple": 0, "description": "The set of plant transcripts to annotate\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "The set of plant transcripts to annotate\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_genome", "advanced": 0}, {"field_type": "text", "ui_name": "Output Genome\n", "allow_multiple": 0, "description": "A set of metabolically annotated transcripts saved as a \"Genome\" object\n", "text_options": {"is_output_name": 1, "placeholder": "Name of Output Genome\n", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "A set of metabolically annotated transcripts saved as a \"Genome\" object\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_genome", "advanced": 0}], "fixed_parameters": [{"ui_name": "Dataset name", "description": "The name of the set of signature k-mers to use for annotating the plant transcripts. The SEED project frequently releases new and updated sets of signature k-mers for each round of annotation accomplished. The set that contains this parameter allows us to retrieve and use the signature k-mers computed via the PlantSEED project. We are currently using Release 70."}, {"ui_name": "k-mer size", "description": "The length of k-mer to use when annotating plant transcripts. When a set of signature k-mers is computed, the computation is done at various k-mer lengths. By default we are using the signature k-mers of 8 amino acids in length."}], "behavior": {"kb_service_name": "genome_annotation", "kb_service_url": "", "kb_service_method": "annotate_genome", "kb_service_input_mapping": [{"target_property": "input_genome", "input_parameter": "input_genome"}, {"target_property": "output_genome", "input_parameter": "output_genome"}, {"target_property": "kmer_v1_parameters", "constant_value": "1"}, {"target_property": "retain_old_anno_for_hypotheticals", "constant_value": "1"}, {"target_property": "workspace", "narrative_system_variable": "workspace"}], "kb_service_output_mapping": [{"target_property": "id", "input_parameter": "output_genome"}, {"target_property": "ws", "narrative_system_variable": "workspace"}]}}}}}, {"source": "<div id='kb-cell-15-00c7cc23-7d0e-4c23-aeaf-820b827b8294'></div>\n<script>$('#kb-cell-15-00c7cc23-7d0e-4c23-aeaf-820b827b8294').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"expression_toolkit_reconnect_to_genome\",\"name\":\"Associate Expression Matrix to Genome Features\",\"ver\":\"1.0.0\",\"subtitle\":\"Associate an Expression Matrix with an annotated Genome that contains features referenced in the matrix.\\n\",\"tooltip\":\"Associate an Expression Matrix with an annotated Genome that contains features referenced in the matrix.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseFeatureValues.ExpressionMatrix\",\"KBaseGenomes.Genome\"],\"output_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"namespace\":null},\"replacement_text\":\"Associated Expression data {{{input_data}}} to Genome {{{genome_id}}}\",\"widgets\":{\"input\":\"null\",\"output\":\"kbaseExpressionMatrix\"},\"parameters\":[{\"id\":\"input_data\",\"ui_name\":\"Expression Matrix\\n\",\"short_hint\":\"Select the Expression Matrix to associate with the Genome that references features contained within the expression data\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"genome_id\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"Select the Genome containing features referenced by the Expression Matrix\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"out_matrix_id\",\"ui_name\":\"Output Expression Matrix Name\\n\",\"short_hint\":\"Provide a name for the new Expression Matrix associated with the Genome\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"https://ci.kbase.us/services/feature_values/jsonrpc\",\"kb_service_name\":\"KBaseFeatureValues\",\"kb_service_method\":\"reconnect_matrix_to_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"input_data\",\"target_property\":\"input_data\",\"target_type_transform\":\"ref\"},{\"input_parameter\":\"genome_id\",\"target_property\":\"genome_ref\",\"target_type_transform\":\"ref\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"out_workspace\"},{\"input_parameter\":\"out_matrix_id\",\"target_property\":\"out_matrix_id\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"out_matrix_id\",\"target_property\":\"expressionMatrixID\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceID\"},{\"service_method_output_path\":[],\"target_property\":\"job_id\"}]},\"job_id_output_field\":\"job_id\"}', 'cellId' : 'kb-cell-15-00c7cc23-7d0e-4c23-aeaf-820b827b8294'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Associate Expression Matrix to Genome Features", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_data": "", "genome_id": "", "out_matrix_id": null}}, "time": 1465865886183}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_data": "", "genome_id": "", "out_matrix_id": null}}, "time": 1455837447644}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Associate an Expression Matrix with an annotated Genome that contains features referenced in the matrix.\n", "name": "Associate Expression Matrix to Genome Features", "output_types": ["KBaseFeatureValues.ExpressionMatrix"], "namespace": null, "tooltip": "Associate an Expression Matrix with an annotated Genome that contains features referenced in the matrix.\n", "input_types": ["KBaseFeatureValues.ExpressionMatrix", "KBaseGenomes.Genome"], "authors": [], "ver": "1.0.0", "id": "expression_toolkit_reconnect_to_genome", "categories": ["active"]}, "parameters": [{"field_type": "text", "ui_name": "Expression Matrix\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "Select the Expression Matrix to associate with the Genome that references features contained within the expression data\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_data", "advanced": 0}, {"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Select the Genome containing features referenced by the Expression Matrix\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "genome_id", "advanced": 0}, {"field_type": "text", "ui_name": "Output Expression Matrix Name\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "Provide a name for the new Expression Matrix associated with the Genome\n", "default_values": [""], "ui_class": "output", "optional": 1, "id": "out_matrix_id", "advanced": 0}], "job_id_output_field": "job_id", "fixed_parameters": [], "replacement_text": "Associated Expression data {{{input_data}}} to Genome {{{genome_id}}}", "behavior": {"kb_service_name": "KBaseFeatureValues", "kb_service_url": "https://ci.kbase.us/services/feature_values/jsonrpc", "kb_service_method": "reconnect_matrix_to_genome", "kb_service_input_mapping": [{"target_property": "input_data", "input_parameter": "input_data", "target_type_transform": "ref"}, {"target_property": "genome_ref", "input_parameter": "genome_id", "target_type_transform": "ref"}, {"target_property": "out_workspace", "narrative_system_variable": "workspace"}, {"target_property": "out_matrix_id", "input_parameter": "out_matrix_id"}], "kb_service_output_mapping": [{"target_property": "expressionMatrixID", "input_parameter": "out_matrix_id"}, {"target_property": "workspaceID", "narrative_system_variable": "workspace"}, {"target_property": "job_id", "service_method_output_path": []}]}, "widgets": {"input": "null", "output": "kbaseExpressionMatrix"}}}}}, {"source": "<div id='kb-cell-16-c4aa6418-e245-40d5-991f-ab18dec0920b'></div>\n<script>$('#kb-cell-16-c4aa6418-e245-40d5-991f-ab18dec0920b').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"associate_metadata_to_reads\",\"name\":\"Associate Reads to RNASeqSample\",\"ver\":\"1.0.0\",\"subtitle\":\"Explain the sample details of a RNASeqSample.\\n\",\"tooltip\":\"Explain the sample details of a RNASeqSample.\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseAssembly.PairedEndLibrary\",\"KBaseAssembly.RNASeqAnalysis\",\"KBaseAssembly.SingleEndLibrary\",\"KBaseGenomes.Genome\"],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"singleend_sample\",\"ui_name\":\"SingleEnd Read\\n\",\"short_hint\":\"Select the SingleEnd Read for a RNASeq Sample.\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseAssembly.SingleEndLibrary\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"pairedend_sample\",\"ui_name\":\"PairedEnd Read\\n\",\"short_hint\":\"Select the PairedEnd Read for a RNASeq Sample.\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseAssembly.PairedEndLibrary\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"analysis_id\",\"ui_name\":\"Analysis ID\\n\",\"short_hint\":\"Specify the RNASeq Analysis ID that sample belongs to\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseAssembly.RNASeqAnalysis\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"sample_id\",\"ui_name\":\"RNASeq Sample Id\\n\",\"short_hint\":\"Enter the RNASeq Sample ID.\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"replicate_id\",\"ui_name\":\"RNASeq Sample Replicate ID\\n\",\"short_hint\":\"Specify the replicate ID for the sample replicates\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"sample_desc\",\"ui_name\":\"Sample Description\\n\",\"short_hint\":\"Select the description of the  RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"title\",\"ui_name\":\"Title\\n\",\"short_hint\":\"Title for the RNASeq sample in the Experiment\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"platform\",\"ui_name\":\"Platform\\n\",\"short_hint\":\"Enter the Sequencing Platform used\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"library_type\",\"ui_name\":\"Library Type\\n\",\"short_hint\":\"Select Library Type PairedEnd or SingleEnd\\n\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"dropdown_options\":{\"options\":[{\"value\":\"singleEnd\",\"display\":\"Single-End\"},{\"value\":\"pairedEnd\",\"display\":\"Paired-End\"}]}},{\"id\":\"genome_id\",\"ui_name\":\"Reference Genome\\n\",\"short_hint\":\"Select the reference genome of the RNASeq Experiment\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"tissue\",\"ui_name\":\"Tissue\\n\",\"short_hint\":\"Enter the Tissue of the samples where extracted from\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"condition\",\"ui_name\":\"Condition/Treatment\\n\",\"short_hint\":\"Enter the Specific condition or treatment of the RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"source\",\"ui_name\":\"Source\\n\",\"short_hint\":\"Enter the Source for the RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"source_id\",\"ui_name\":\"Source ID\\n\",\"short_hint\":\"Enter the Source ID for the RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"domain\",\"ui_name\":\"Domain\\n\",\"short_hint\":\"Enter the domain of the RNASeq Sample\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]},{\"id\":\"ext_source_date\",\"ui_name\":\"Source Date\\n\",\"short_hint\":\"Enter the Source Date\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"]}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseRNASeq\",\"kb_service_method\":\"associateReads\",\"kb_service_input_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_argument_position\":0},{\"input_parameter\":\"singleend_sample\",\"target_argument_position\":1},{\"input_parameter\":\"pairedend_sample\",\"target_argument_position\":2},{\"input_parameter\":\"analysis_id\",\"target_argument_position\":3},{\"input_parameter\":\"sample_id\",\"target_argument_position\":4},{\"input_parameter\":\"replicate_id\",\"target_argument_position\":6},{\"input_parameter\":\"sample_desc\",\"target_argument_position\":8},{\"input_parameter\":\"platform\",\"target_argument_position\":7},{\"input_parameter\":\"library_type\",\"target_argument_position\":5},{\"input_parameter\":\"title\",\"target_argument_position\":9},{\"input_parameter\":\"source\",\"target_argument_position\":10},{\"input_parameter\":\"tissue\",\"target_argument_position\":15},{\"input_parameter\":\"condition\",\"target_argument_position\":16},{\"input_parameter\":\"source_id\",\"target_argument_position\":11},{\"input_parameter\":\"domain\",\"target_argument_position\":13},{\"input_parameter\":\"ext_source_date\",\"target_argument_position\":12},{\"input_parameter\":\"genome_id\",\"target_argument_position\":14}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"sample_id\",\"target_property\":\"output\"},{\"service_method_output_path\":[\"0\"],\"target_property\":\"associateReads\"}]},\"job_id_output_field\":\"docker\"}', 'cellId' : 'kb-cell-16-c4aa6418-e245-40d5-991f-ab18dec0920b'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Associate Reads to RNASeqSample", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": "singleEnd", "singleend_sample": null, "domain": null, "replicate_id": null, "analysis_id": null, "source": null, "title": null, "platform": null, "tissue": null, "sample_id": "", "source_id": null, "pairedend_sample": null, "genome_id": null, "sample_desc": null, "condition": null, "ext_source_date": null}}, "time": 1465865886183}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"library_type": "singleEnd", "singleend_sample": null, "domain": null, "replicate_id": null, "analysis_id": null, "source": null, "title": null, "platform": null, "tissue": null, "sample_id": "", "source_id": null, "pairedend_sample": null, "genome_id": null, "sample_desc": null, "condition": null, "ext_source_date": null}}, "time": 1455837447644}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Explain the sample details of a RNASeqSample.\n", "name": "Associate Reads to RNASeqSample", "output_types": [], "namespace": null, "tooltip": "Explain the sample details of a RNASeqSample.\n", "input_types": ["KBaseAssembly.PairedEndLibrary", "KBaseAssembly.RNASeqAnalysis", "KBaseAssembly.SingleEndLibrary", "KBaseGenomes.Genome"], "authors": [], "ver": "1.0.0", "id": "associate_metadata_to_reads", "categories": ["active"]}, "parameters": [{"field_type": "text", "ui_name": "SingleEnd Read\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseAssembly.SingleEndLibrary"]}, "disabled": 0, "short_hint": "Select the SingleEnd Read for a RNASeq Sample.\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "singleend_sample", "advanced": 0}, {"field_type": "text", "ui_name": "PairedEnd Read\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseAssembly.PairedEndLibrary"]}, "disabled": 0, "short_hint": "Select the PairedEnd Read for a RNASeq Sample.\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "pairedend_sample", "advanced": 0}, {"field_type": "text", "ui_name": "Analysis ID\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseAssembly.RNASeqAnalysis"]}, "disabled": 0, "short_hint": "Specify the RNASeq Analysis ID that sample belongs to\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "analysis_id", "advanced": 0}, {"field_type": "text", "ui_name": "RNASeq Sample Id\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Enter the RNASeq Sample ID.\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "sample_id", "advanced": 0}, {"field_type": "text", "ui_name": "RNASeq Sample Replicate ID\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Specify the replicate ID for the sample replicates\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "replicate_id", "advanced": 0}, {"field_type": "textarea", "ui_name": "Sample Description\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Select the description of the  RNASeq Sample\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "sample_desc", "advanced": 1}, {"field_type": "text", "ui_name": "Title\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Title for the RNASeq sample in the Experiment\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "title", "advanced": 1}, {"field_type": "text", "ui_name": "Platform\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Enter the Sequencing Platform used\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "platform", "advanced": 0}, {"field_type": "dropdown", "ui_name": "Library Type\n", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "Single-End", "value": "singleEnd"}, {"display": "Paired-End", "value": "pairedEnd"}]}, "disabled": 0, "short_hint": "Select Library Type PairedEnd or SingleEnd\n", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "library_type", "advanced": 0}, {"field_type": "text", "ui_name": "Reference Genome\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Select the reference genome of the RNASeq Experiment\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "genome_id", "advanced": 0}, {"field_type": "text", "ui_name": "Tissue\n", "allow_multiple": 1, "description": "", "disabled": 0, "short_hint": "Enter the Tissue of the samples where extracted from\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "tissue", "advanced": 0}, {"field_type": "text", "ui_name": "Condition/Treatment\n", "allow_multiple": 1, "description": "", "disabled": 0, "short_hint": "Enter the Specific condition or treatment of the RNASeq Sample\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "condition", "advanced": 0}, {"field_type": "text", "ui_name": "Source\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Enter the Source for the RNASeq Sample\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "source", "advanced": 1}, {"field_type": "text", "ui_name": "Source ID\n", "allow_multiple": 1, "description": "", "disabled": 0, "short_hint": "Enter the Source ID for the RNASeq Sample\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "source_id", "advanced": 1}, {"field_type": "text", "ui_name": "Domain\n", "allow_multiple": 1, "description": "", "disabled": 0, "short_hint": "Enter the domain of the RNASeq Sample\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "domain", "advanced": 1}, {"field_type": "text", "ui_name": "Source Date\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Enter the Source Date\n", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "ext_source_date", "advanced": 1}], "job_id_output_field": "docker", "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseRNASeq", "kb_service_url": "", "kb_service_method": "associateReads", "kb_service_input_mapping": [{"target_argument_position": 0, "narrative_system_variable": "workspace"}, {"input_parameter": "singleend_sample", "target_argument_position": 1}, {"input_parameter": "pairedend_sample", "target_argument_position": 2}, {"input_parameter": "analysis_id", "target_argument_position": 3}, {"input_parameter": "sample_id", "target_argument_position": 4}, {"input_parameter": "replicate_id", "target_argument_position": 6}, {"input_parameter": "sample_desc", "target_argument_position": 8}, {"input_parameter": "platform", "target_argument_position": 7}, {"input_parameter": "library_type", "target_argument_position": 5}, {"input_parameter": "title", "target_argument_position": 9}, {"input_parameter": "source", "target_argument_position": 10}, {"input_parameter": "tissue", "target_argument_position": 15}, {"input_parameter": "condition", "target_argument_position": 16}, {"input_parameter": "source_id", "target_argument_position": 11}, {"input_parameter": "domain", "target_argument_position": 13}, {"input_parameter": "ext_source_date", "target_argument_position": 12}, {"input_parameter": "genome_id", "target_argument_position": 14}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "output", "input_parameter": "sample_id"}, {"target_property": "associateReads", "service_method_output_path": ["0"]}]}, "widgets": {"input": "null", "output": "null"}}}}}, {"source": "<div id='kb-cell-17-9025f108-21c4-4aaa-94f8-b63edc8eba78'></div>\n<script>$('#kb-cell-17-9025f108-21c4-4aaa-94f8-b63edc8eba78').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"genome_util_blastn_seq_against_seq\",\"name\":\"BLASTN search against sequences\",\"ver\":\"1.0.0\",\"subtitle\":\"BLASTN search against sequences\\n\",\"tooltip\":\"BLASTN search against sequences\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseBlastOutput\"},\"parameters\":[{\"id\":\"target_seqs\",\"ui_name\":\"Target sequences\\n\",\"short_hint\":\"Copy/paste the target nucleotide sequences in FASTA format\\n\",\"description\":\"Multiple target sequences can be pasted in FASTA format. Blank lines are not allowed in the middle of bare sequence input.\\n\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"query\",\"ui_name\":\"Query Sequence\\n\",\"short_hint\":\"Copy/paste the nucleotide sequence in FASTA format\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"e-value\",\"ui_name\":\"E-value\",\"short_hint\":\"E-value cut off threshold. Results with an expected value above this threshold will not be returned\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.05\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_opening_penalty\",\"ui_name\":\"Gap opening penalty\",\"short_hint\":\"The cost to open new gap where gap is inserted in an alignment\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_extension_penalty\",\"ui_name\":\"Gap extension penalty\",\"short_hint\":\"The cost of extending an existing gap\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"nucleotide_match_reward\",\"ui_name\":\"Nucleotide match reward\",\"short_hint\":\"The reward for a nucleotide match\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"nucleotide_mismatch_penalty\",\"ui_name\":\"Nucleotide mismatch penalty\",\"short_hint\":\"The penalty of a nucleotide mismatch\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-3\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"word_size\",\"ui_name\":\"Word size\",\"short_hint\":\"The size of the initial word that must be matched between the query sequence and target sequence. The default is 11 for blastn and 28 for megablast\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"11\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_alignment_2show\",\"ui_name\":\"Number of alignments\",\"short_hint\":\"Maximum number of alignments to show\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"250\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"extending_hits\",\"ui_name\":\"Threshold for extending hits\",\"short_hint\":\"Specify threshold for extending hits\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_seq_2show\",\"ui_name\":\"Max target sequences\",\"short_hint\":\"Select the maximum number of aligned sequences to display\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"500\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mega_blast\",\"ui_name\":\"Algorithm\",\"short_hint\":\"The default is blastn. Use Megablast for comparing a query to closely related sequences\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"F\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"Use blastn\"},{\"value\":\"T\",\"display\":\"Use MEGABLAST\"}]}},{\"id\":\"gapped_alignment\",\"ui_name\":\"Gapped alignment\",\"short_hint\":\"Perform gapped alignment\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"filter_query_seq\",\"ui_name\":\"Filter query sequence\",\"short_hint\":\"Filter out segments of the query sequence that have low compositional complexity\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"output_name\",\"ui_name\":\"Output object name\",\"short_hint\":\"Your desired output object name in the workspace\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"blast_output_\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseGenomeUtil\",\"kb_service_method\":\"blast_against_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"target_seqs\",\"target_property\":\"target_seqs\"},{\"input_parameter\":\"query\",\"target_property\":\"query\"},{\"constant_value\":\"blastn\",\"target_property\":\"blast_program\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"e-value\",\"target_property\":\"e-value\"},{\"input_parameter\":\"gap_opening_penalty\",\"target_property\":\"gap_opening_penalty\"},{\"input_parameter\":\"gap_extension_penalty\",\"target_property\":\"gap_extension_penalty\"},{\"input_parameter\":\"nucleotide_match_reward\",\"target_property\":\"nucleotide_match_reward\"},{\"input_parameter\":\"nucleotide_mismatch_penalty\",\"target_property\":\"nucleotide_mismatch_penalty\"},{\"input_parameter\":\"word_size\",\"target_property\":\"word_size\"},{\"input_parameter\":\"maximum_alignment_2show\",\"target_property\":\"maximum_alignment_2show\"},{\"input_parameter\":\"mega_blast\",\"target_property\":\"mega_blast\"},{\"input_parameter\":\"gapped_alignment\",\"target_property\":\"gapped_alignment\"},{\"input_parameter\":\"filter_query_seq\",\"target_property\":\"filter_query_seq\"},{\"input_parameter\":\"extending_hits\",\"target_property\":\"extending_hits\"},{\"input_parameter\":\"maximum_seq_2show\",\"target_property\":\"maximum_seq_2show\"},{\"input_parameter\":\"output_name\",\"target_property\":\"output_name\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"output_name\",\"target_property\":\"blast_output_name\"}]}}', 'cellId' : 'kb-cell-17-9025f108-21c4-4aaa-94f8-b63edc8eba78'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "BLASTN search against sequences", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"nucleotide_mismatch_penalty": "-3", "nucleotide_match_reward": "1", "mega_blast": "F", "extending_hits": "0", "gapped_alignment": "T", "filter_query_seq": "T", "word_size": "11", "target_seqs": "", "query": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "250", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1465865886183}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"nucleotide_mismatch_penalty": "-3", "nucleotide_match_reward": "1", "mega_blast": "F", "extending_hits": "0", "gapped_alignment": "T", "filter_query_seq": "T", "word_size": "11", "target_seqs": "", "query": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "250", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1455837447645}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "BLASTN search against sequences\n", "name": "BLASTN search against sequences", "output_types": [], "namespace": null, "tooltip": "BLASTN search against sequences\n", "input_types": [], "authors": [], "ver": "1.0.0", "id": "genome_util_blastn_seq_against_seq", "categories": ["active"]}, "widgets": {"input": "null", "output": "kbaseBlastOutput"}, "parameters": [{"field_type": "textarea", "ui_name": "Target sequences\n", "allow_multiple": 0, "description": "Multiple target sequences can be pasted in FASTA format. Blank lines are not allowed in the middle of bare sequence input.\n", "disabled": 0, "short_hint": "Copy/paste the target nucleotide sequences in FASTA format\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "target_seqs", "advanced": 0}, {"field_type": "textarea", "ui_name": "Query Sequence\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Copy/paste the nucleotide sequence in FASTA format\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "query", "advanced": 0}, {"field_type": "text", "ui_name": "E-value", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "E-value cut off threshold. Results with an expected value above this threshold will not be returned", "default_values": ["0.05"], "ui_class": "parameter", "optional": 1, "id": "e-value", "advanced": 0}, {"field_type": "text", "ui_name": "Gap opening penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The cost to open new gap where gap is inserted in an alignment", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_opening_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Gap extension penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The cost of extending an existing gap", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_extension_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Nucleotide match reward", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The reward for a nucleotide match", "default_values": ["1"], "ui_class": "parameter", "optional": 1, "id": "nucleotide_match_reward", "advanced": 1}, {"field_type": "text", "ui_name": "Nucleotide mismatch penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The penalty of a nucleotide mismatch", "default_values": ["-3"], "ui_class": "parameter", "optional": 1, "id": "nucleotide_mismatch_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Word size", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The size of the initial word that must be matched between the query sequence and target sequence. The default is 11 for blastn and 28 for megablast", "default_values": ["11"], "ui_class": "parameter", "optional": 1, "id": "word_size", "advanced": 1}, {"field_type": "text", "ui_name": "Number of alignments", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Maximum number of alignments to show", "default_values": ["250"], "ui_class": "parameter", "optional": 1, "id": "maximum_alignment_2show", "advanced": 1}, {"field_type": "text", "ui_name": "Threshold for extending hits", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Specify threshold for extending hits", "default_values": ["0"], "ui_class": "parameter", "optional": 1, "id": "extending_hits", "advanced": 1}, {"field_type": "text", "ui_name": "Max target sequences", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Select the maximum number of aligned sequences to display", "default_values": ["500"], "ui_class": "parameter", "optional": 1, "id": "maximum_seq_2show", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Algorithm", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "Use blastn", "value": "F"}, {"display": "Use MEGABLAST", "value": "T"}]}, "disabled": 0, "short_hint": "The default is blastn. Use Megablast for comparing a query to closely related sequences", "default_values": ["F"], "ui_class": "parameter", "optional": 1, "id": "mega_blast", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Gapped alignment", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Perform gapped alignment", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "gapped_alignment", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Filter query sequence", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Filter out segments of the query sequence that have low compositional complexity", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "filter_query_seq", "advanced": 1}, {"field_type": "text", "ui_name": "Output object name", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Your desired output object name in the workspace", "default_values": ["blast_output_"], "ui_class": "parameter", "optional": 0, "id": "output_name", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseGenomeUtil", "kb_service_url": "", "kb_service_method": "blast_against_genome", "kb_service_input_mapping": [{"target_property": "target_seqs", "input_parameter": "target_seqs"}, {"target_property": "query", "input_parameter": "query"}, {"target_property": "blast_program", "constant_value": "blastn"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "e-value", "input_parameter": "e-value"}, {"target_property": "gap_opening_penalty", "input_parameter": "gap_opening_penalty"}, {"target_property": "gap_extension_penalty", "input_parameter": "gap_extension_penalty"}, {"target_property": "nucleotide_match_reward", "input_parameter": "nucleotide_match_reward"}, {"target_property": "nucleotide_mismatch_penalty", "input_parameter": "nucleotide_mismatch_penalty"}, {"target_property": "word_size", "input_parameter": "word_size"}, {"target_property": "maximum_alignment_2show", "input_parameter": "maximum_alignment_2show"}, {"target_property": "mega_blast", "input_parameter": "mega_blast"}, {"target_property": "gapped_alignment", "input_parameter": "gapped_alignment"}, {"target_property": "filter_query_seq", "input_parameter": "filter_query_seq"}, {"target_property": "extending_hits", "input_parameter": "extending_hits"}, {"target_property": "maximum_seq_2show", "input_parameter": "maximum_seq_2show"}, {"target_property": "output_name", "input_parameter": "output_name"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "blast_output_name", "input_parameter": "output_name"}]}}}}}, {"source": "<div id='kb-cell-18-3a492a6d-0c1d-4dcf-9e4d-02a7f6f55a31'></div>\n<script>$('#kb-cell-18-3a492a6d-0c1d-4dcf-9e4d-02a7f6f55a31').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"genome_util_blastn_seq_against_genome\",\"name\":\"BLASTN search against a genome\",\"ver\":\"1.0.0\",\"subtitle\":\"BLASTN search against a genome\\n\",\"tooltip\":\"BLASTN search against a genome\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"GenomeUtil.BlastIndex\"],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseBlastOutput\"},\"parameters\":[{\"id\":\"blastindex_name\",\"ui_name\":\"Pre-indexed genome\\n\",\"short_hint\":\"Select the pre-indexed genome of interest\\n\",\"description\":\"A single genome or multiple genomes of interest must be indexed using    Build Genome Search Index    method.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"GenomeUtil.BlastIndex\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"query\",\"ui_name\":\"Query Sequence\\n\",\"short_hint\":\"Copy/paste the nucleotide sequence in FASTA format\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"e-value\",\"ui_name\":\"E-value\",\"short_hint\":\"E-value cut off threshold. Results with an expected value above this threshold will not be returned\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.05\"],\"text_options\":{\"validate_as\":\"float\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_opening_penalty\",\"ui_name\":\"Gap opening penalty\",\"short_hint\":\"The cost to open new gap where gap is inserted in an alignment\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_extension_penalty\",\"ui_name\":\"Gap extension penalty\",\"short_hint\":\"The cost of extending an existing gap\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"nucleotide_match_reward\",\"ui_name\":\"Nucleotide match reward\",\"short_hint\":\"The reward for a nucleotide match\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"1\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"nucleotide_mismatch_penalty\",\"ui_name\":\"Nucleotide mismatch penalty\",\"short_hint\":\"The penalty of a nucleotide mismatch\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-3\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"word_size\",\"ui_name\":\"Word size\",\"short_hint\":\"The size of the initial word that must be matched between the query sequence and target sequence. The default is 11 for blastn and 28 for megablast\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"11\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_alignment_2show\",\"ui_name\":\"Number of alignments\",\"short_hint\":\"Maximum number of alignments to show\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"250\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"extending_hits\",\"ui_name\":\"Threshold for extending hits\",\"short_hint\":\"Specify threshold for extending hits\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_seq_2show\",\"ui_name\":\"Max target sequences\",\"short_hint\":\"Select the maximum number of aligned sequences to display\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"500\"],\"text_options\":{\"validate_as\":\"int\",\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"mega_blast\",\"ui_name\":\"Algorithm\",\"short_hint\":\"The default is blastn. Use Megablast for comparing a query to closely related sequences\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"F\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"Use blastn\"},{\"value\":\"T\",\"display\":\"Use MEGABLAST\"}]}},{\"id\":\"gapped_alignment\",\"ui_name\":\"Gapped alignment\",\"short_hint\":\"Perform gapped alignment\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"filter_query_seq\",\"ui_name\":\"Filter query sequence\",\"short_hint\":\"Filter out segments of the query sequence that have low compositional complexity\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"output_name\",\"ui_name\":\"Output object name\",\"short_hint\":\"Your desired output object name in the workspace\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"blast_output_\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseGenomeUtil\",\"kb_service_method\":\"blast_against_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"blastindex_name\",\"target_property\":\"blastindex_name\"},{\"input_parameter\":\"query\",\"target_property\":\"query\"},{\"constant_value\":\"blastn\",\"target_property\":\"blast_program\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"e-value\",\"target_property\":\"e-value\"},{\"input_parameter\":\"gap_opening_penalty\",\"target_property\":\"gap_opening_penalty\"},{\"input_parameter\":\"gap_extension_penalty\",\"target_property\":\"gap_extension_penalty\"},{\"input_parameter\":\"nucleotide_match_reward\",\"target_property\":\"nucleotide_match_reward\"},{\"input_parameter\":\"nucleotide_mismatch_penalty\",\"target_property\":\"nucleotide_mismatch_penalty\"},{\"input_parameter\":\"word_size\",\"target_property\":\"word_size\"},{\"input_parameter\":\"maximum_alignment_2show\",\"target_property\":\"maximum_alignment_2show\"},{\"input_parameter\":\"mega_blast\",\"target_property\":\"mega_blast\"},{\"input_parameter\":\"gapped_alignment\",\"target_property\":\"gapped_alignment\"},{\"input_parameter\":\"filter_query_seq\",\"target_property\":\"filter_query_seq\"},{\"input_parameter\":\"extending_hits\",\"target_property\":\"extending_hits\"},{\"input_parameter\":\"maximum_seq_2show\",\"target_property\":\"maximum_seq_2show\"},{\"input_parameter\":\"output_name\",\"target_property\":\"output_name\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"output_name\",\"target_property\":\"blast_output_name\"}]}}', 'cellId' : 'kb-cell-18-3a492a6d-0c1d-4dcf-9e4d-02a7f6f55a31'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "BLASTN search against a genome", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"nucleotide_mismatch_penalty": "-3", "nucleotide_match_reward": "1", "mega_blast": "F", "extending_hits": "0", "gapped_alignment": "T", "filter_query_seq": "T", "query": "", "word_size": "11", "blastindex_name": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "250", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1465865886184}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"nucleotide_mismatch_penalty": "-3", "nucleotide_match_reward": "1", "mega_blast": "F", "extending_hits": "0", "gapped_alignment": "T", "filter_query_seq": "T", "query": "", "word_size": "11", "blastindex_name": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "250", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1455837447645}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "BLASTN search against a genome\n", "name": "BLASTN search against a genome", "output_types": [], "namespace": null, "tooltip": "BLASTN search against a genome\n", "input_types": ["GenomeUtil.BlastIndex"], "authors": [], "ver": "1.0.0", "id": "genome_util_blastn_seq_against_genome", "categories": ["active"]}, "widgets": {"input": "null", "output": "kbaseBlastOutput"}, "parameters": [{"field_type": "text", "ui_name": "Pre-indexed genome\n", "allow_multiple": 0, "description": "A single genome or multiple genomes of interest must be indexed using    Build Genome Search Index    method.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["GenomeUtil.BlastIndex"]}, "disabled": 0, "short_hint": "Select the pre-indexed genome of interest\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "blastindex_name", "advanced": 0}, {"field_type": "textarea", "ui_name": "Query Sequence\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Copy/paste the nucleotide sequence in FASTA format\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "query", "advanced": 0}, {"field_type": "text", "ui_name": "E-value", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "float"}, "disabled": 0, "short_hint": "E-value cut off threshold. Results with an expected value above this threshold will not be returned", "default_values": ["0.05"], "ui_class": "parameter", "optional": 1, "id": "e-value", "advanced": 0}, {"field_type": "text", "ui_name": "Gap opening penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "The cost to open new gap where gap is inserted in an alignment", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_opening_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Gap extension penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "The cost of extending an existing gap", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_extension_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Nucleotide match reward", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "The reward for a nucleotide match", "default_values": ["1"], "ui_class": "parameter", "optional": 1, "id": "nucleotide_match_reward", "advanced": 1}, {"field_type": "text", "ui_name": "Nucleotide mismatch penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "The penalty of a nucleotide mismatch", "default_values": ["-3"], "ui_class": "parameter", "optional": 1, "id": "nucleotide_mismatch_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Word size", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "The size of the initial word that must be matched between the query sequence and target sequence. The default is 11 for blastn and 28 for megablast", "default_values": ["11"], "ui_class": "parameter", "optional": 1, "id": "word_size", "advanced": 1}, {"field_type": "text", "ui_name": "Number of alignments", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Maximum number of alignments to show", "default_values": ["250"], "ui_class": "parameter", "optional": 1, "id": "maximum_alignment_2show", "advanced": 1}, {"field_type": "text", "ui_name": "Threshold for extending hits", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Specify threshold for extending hits", "default_values": ["0"], "ui_class": "parameter", "optional": 1, "id": "extending_hits", "advanced": 1}, {"field_type": "text", "ui_name": "Max target sequences", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "validate_as": "int"}, "disabled": 0, "short_hint": "Select the maximum number of aligned sequences to display", "default_values": ["500"], "ui_class": "parameter", "optional": 1, "id": "maximum_seq_2show", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Algorithm", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "Use blastn", "value": "F"}, {"display": "Use MEGABLAST", "value": "T"}]}, "disabled": 0, "short_hint": "The default is blastn. Use Megablast for comparing a query to closely related sequences", "default_values": ["F"], "ui_class": "parameter", "optional": 1, "id": "mega_blast", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Gapped alignment", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Perform gapped alignment", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "gapped_alignment", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Filter query sequence", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Filter out segments of the query sequence that have low compositional complexity", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "filter_query_seq", "advanced": 1}, {"field_type": "text", "ui_name": "Output object name", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Your desired output object name in the workspace", "default_values": ["blast_output_"], "ui_class": "parameter", "optional": 0, "id": "output_name", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseGenomeUtil", "kb_service_url": "", "kb_service_method": "blast_against_genome", "kb_service_input_mapping": [{"target_property": "blastindex_name", "input_parameter": "blastindex_name"}, {"target_property": "query", "input_parameter": "query"}, {"target_property": "blast_program", "constant_value": "blastn"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "e-value", "input_parameter": "e-value"}, {"target_property": "gap_opening_penalty", "input_parameter": "gap_opening_penalty"}, {"target_property": "gap_extension_penalty", "input_parameter": "gap_extension_penalty"}, {"target_property": "nucleotide_match_reward", "input_parameter": "nucleotide_match_reward"}, {"target_property": "nucleotide_mismatch_penalty", "input_parameter": "nucleotide_mismatch_penalty"}, {"target_property": "word_size", "input_parameter": "word_size"}, {"target_property": "maximum_alignment_2show", "input_parameter": "maximum_alignment_2show"}, {"target_property": "mega_blast", "input_parameter": "mega_blast"}, {"target_property": "gapped_alignment", "input_parameter": "gapped_alignment"}, {"target_property": "filter_query_seq", "input_parameter": "filter_query_seq"}, {"target_property": "extending_hits", "input_parameter": "extending_hits"}, {"target_property": "maximum_seq_2show", "input_parameter": "maximum_seq_2show"}, {"target_property": "output_name", "input_parameter": "output_name"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "blast_output_name", "input_parameter": "output_name"}]}}}}}, {"source": "<div id='kb-cell-19-43cf367a-3f36-47e7-8f39-f1f5484502a2'></div>\n<script>$('#kb-cell-19-43cf367a-3f36-47e7-8f39-f1f5484502a2').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"genome_util_blastoutput_to_featureset\",\"name\":\"BlastOutput to FeatureSet\",\"ver\":\"1.0.0\",\"subtitle\":\"Convert BlastOutput to FeatureSet with filtering conditions\\n\",\"tooltip\":\"Convert BlastOutput to FeatureSet with filtering conditions\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"GenomeUtil.BlastOutput\"],\"output_types\":[\"KBaseCollections.FeatureSet\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseFeatureSet\"},\"parameters\":[{\"id\":\"in_id\",\"ui_name\":\"BlastOutput object to convert\\n\",\"short_hint\":\"BlastOutput object to convert\\n\",\"description\":\"BlastOutput object to convert\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"GenomeUtil.BlastOutput\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"out_id\",\"ui_name\":\"FeatureSet name\\n\",\"short_hint\":\"FeatureSet name\\n\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseCollections.FeatureSet\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"evalue\",\"ui_name\":\"E-value\",\"short_hint\":\"E-value cut off threshold\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"entries\",\"ui_name\":\"Number of entries to keep\",\"short_hint\":\"The number of entries to keep\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseGenomeUtil\",\"kb_service_method\":\"filter_BlastOutput\",\"kb_service_input_mapping\":[{\"input_parameter\":\"in_id\",\"target_property\":\"in_id\"},{\"input_parameter\":\"out_id\",\"target_property\":\"out_id\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"evalue\",\"target_property\":\"evalue\"},{\"input_parameter\":\"entries\",\"target_property\":\"entries\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"out_id\",\"target_property\":\"featureset_name\"}]}}', 'cellId' : 'kb-cell-19-43cf367a-3f36-47e7-8f39-f1f5484502a2'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "BlastOutput to FeatureSet", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"out_id": "", "evalue": null, "in_id": "", "entries": null}}, "time": 1465865886184}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"out_id": "", "evalue": null, "in_id": "", "entries": null}}, "time": 1455837447645}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Convert BlastOutput to FeatureSet with filtering conditions\n", "name": "BlastOutput to FeatureSet", "output_types": ["KBaseCollections.FeatureSet"], "namespace": null, "tooltip": "Convert BlastOutput to FeatureSet with filtering conditions\n", "input_types": ["GenomeUtil.BlastOutput"], "authors": [], "ver": "1.0.0", "id": "genome_util_blastoutput_to_featureset", "categories": ["active"]}, "widgets": {"input": "null", "output": "kbaseFeatureSet"}, "parameters": [{"field_type": "text", "ui_name": "BlastOutput object to convert\n", "allow_multiple": 0, "description": "BlastOutput object to convert\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["GenomeUtil.BlastOutput"]}, "disabled": 0, "short_hint": "BlastOutput object to convert\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "in_id", "advanced": 0}, {"field_type": "text", "ui_name": "FeatureSet name\n", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseCollections.FeatureSet"]}, "disabled": 0, "short_hint": "FeatureSet name\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "out_id", "advanced": 0}, {"field_type": "text", "ui_name": "E-value", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "E-value cut off threshold", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "evalue", "advanced": 0}, {"field_type": "text", "ui_name": "Number of entries to keep", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The number of entries to keep", "default_values": [""], "ui_class": "parameter", "optional": 1, "id": "entries", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseGenomeUtil", "kb_service_url": "", "kb_service_method": "filter_BlastOutput", "kb_service_input_mapping": [{"target_property": "in_id", "input_parameter": "in_id"}, {"target_property": "out_id", "input_parameter": "out_id"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "evalue", "input_parameter": "evalue"}, {"target_property": "entries", "input_parameter": "entries"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "featureset_name", "input_parameter": "out_id"}]}}}}}, {"source": "<div id='kb-cell-20-96d0460f-0cc8-4cc3-a15b-4f27ee1bde3f'></div>\n<script>$('#kb-cell-20-96d0460f-0cc8-4cc3-a15b-4f27ee1bde3f').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"genome_util_blastp_seq_against_genome\",\"name\":\"BLASTP search against a genome\",\"ver\":\"1.0.0\",\"subtitle\":\"BLASTP search against a genome\\n\",\"tooltip\":\"BLASTP search against a genome\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"GenomeUtil.BlastIndex\"],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseBlastOutput\"},\"parameters\":[{\"id\":\"blastindex_name\",\"ui_name\":\"Pre-indexed genome\\n\",\"short_hint\":\"Select the pre-indexed genome of interest\\n\",\"description\":\"A single genome or multiple genomes of interest must be indexed using    Build Genome Search Index    method.\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"GenomeUtil.BlastIndex\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"query\",\"ui_name\":\"Query Sequence\\n\",\"short_hint\":\"Copy/paste the amino-acid sequence in FASTA format\\n\",\"description\":\"\",\"field_type\":\"textarea\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"textarea_options\":{\"n_rows\":4,\"placeholder\":\"\"}},{\"id\":\"e-value\",\"ui_name\":\"E-value\",\"short_hint\":\"E-value cut off threshold. Results with an expected value above this threshold will not be returned.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"0.05\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_opening_penalty\",\"ui_name\":\"Gap opening penalty\",\"short_hint\":\"The cost to open new gap where gap is inserted in an alignment.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gap_extension_penalty\",\"ui_name\":\"Gap extension penalty\",\"short_hint\":\"The cost of extending an existing gap.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"-1\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"word_size\",\"ui_name\":\"Word size\",\"short_hint\":\"The size of the initial word that must be matched between the query sequence and target sequence. The default is 3.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"3\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_alignment_2show\",\"ui_name\":\"Number of alignments\",\"short_hint\":\"Maximum number of alignments to show. The default is 15.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"15\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"extending_hits\",\"ui_name\":\"Threshold for extending hits\",\"short_hint\":\"Specify threshold for extending hits.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"11\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"maximum_seq_2show\",\"ui_name\":\"Max target sequences\",\"short_hint\":\"Select the maximum number of aligned sequences to display.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"500\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"gapped_alignment\",\"ui_name\":\"Gapped alignment\",\"short_hint\":\"Perform gapped alignment.\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"filter_query_seq\",\"ui_name\":\"Filter query sequence\",\"short_hint\":\"Filter out segments of the query sequence that have low compositional complexity.\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"T\"],\"dropdown_options\":{\"options\":[{\"value\":\"F\",\"display\":\"False\"},{\"value\":\"T\",\"display\":\"True\"}]}},{\"id\":\"substitution_matrix\",\"ui_name\":\"Substitution matrix\",\"short_hint\":\"The name of the alignment matrix that contains a reward or penalty for each possible match or mismatch. The default is BLOSUM-62.\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":1,\"advanced\":1,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"Default\"],\"dropdown_options\":{\"options\":[{\"value\":\"Default\",\"display\":\"Default\"},{\"value\":\"BLOSUM-62\",\"display\":\"BLOSUM-62\"},{\"value\":\"BLOSUM-80\",\"display\":\"BLOSUM-80\"},{\"value\":\"PAM-30\",\"display\":\"PAM-30\"},{\"value\":\"PAM-70\",\"display\":\"PAM-70\"}]}},{\"id\":\"output_name\",\"ui_name\":\"Output object name\",\"short_hint\":\"Your desired output object name in the workspace.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"blast_output_\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseGenomeUtil\",\"kb_service_method\":\"blast_against_genome\",\"kb_service_input_mapping\":[{\"input_parameter\":\"blastindex_name\",\"target_property\":\"blastindex_name\"},{\"input_parameter\":\"query\",\"target_property\":\"query\"},{\"constant_value\":\"blastp\",\"target_property\":\"blast_program\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"e-value\",\"target_property\":\"e-value\"},{\"input_parameter\":\"gap_opening_penalty\",\"target_property\":\"gap_opening_penalty\"},{\"input_parameter\":\"gap_extension_penalty\",\"target_property\":\"gap_extension_penalty\"},{\"input_parameter\":\"word_size\",\"target_property\":\"word_size\"},{\"input_parameter\":\"maximum_alignment_2show\",\"target_property\":\"maximum_alignment_2show\"},{\"input_parameter\":\"substitution_matrix\",\"target_property\":\"substitution_matrix\"},{\"input_parameter\":\"gapped_alignment\",\"target_property\":\"gapped_alignment\"},{\"input_parameter\":\"filter_query_seq\",\"target_property\":\"filter_query_seq\"},{\"input_parameter\":\"extending_hits\",\"target_property\":\"extending_hits\"},{\"input_parameter\":\"maximum_seq_2show\",\"target_property\":\"maximum_seq_2show\"},{\"input_parameter\":\"output_name\",\"target_property\":\"output_name\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"output_name\",\"target_property\":\"blast_output_name\"}]}}', 'cellId' : 'kb-cell-20-96d0460f-0cc8-4cc3-a15b-4f27ee1bde3f'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "BLASTP search against a genome", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"extending_hits": "11", "gapped_alignment": "T", "substitution_matrix": "Default", "filter_query_seq": "T", "query": "", "word_size": "3", "blastindex_name": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "15", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1465865886185}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"extending_hits": "11", "gapped_alignment": "T", "substitution_matrix": "Default", "filter_query_seq": "T", "query": "", "word_size": "3", "blastindex_name": "", "gap_opening_penalty": "-1", "gap_extension_penalty": "-1", "e-value": "0.05", "maximum_alignment_2show": "15", "output_name": "blast_output_", "maximum_seq_2show": "500"}}, "time": 1455837447646}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "BLASTP search against a genome\n", "name": "BLASTP search against a genome", "output_types": [], "namespace": null, "tooltip": "BLASTP search against a genome\n", "input_types": ["GenomeUtil.BlastIndex"], "authors": [], "ver": "1.0.0", "id": "genome_util_blastp_seq_against_genome", "categories": ["active"]}, "widgets": {"input": "null", "output": "kbaseBlastOutput"}, "parameters": [{"field_type": "text", "ui_name": "Pre-indexed genome\n", "allow_multiple": 0, "description": "A single genome or multiple genomes of interest must be indexed using    Build Genome Search Index    method.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["GenomeUtil.BlastIndex"]}, "disabled": 0, "short_hint": "Select the pre-indexed genome of interest\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "blastindex_name", "advanced": 0}, {"field_type": "textarea", "ui_name": "Query Sequence\n", "allow_multiple": 0, "description": "", "disabled": 0, "short_hint": "Copy/paste the amino-acid sequence in FASTA format\n", "textarea_options": {"n_rows": 4, "placeholder": ""}, "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "query", "advanced": 0}, {"field_type": "text", "ui_name": "E-value", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "E-value cut off threshold. Results with an expected value above this threshold will not be returned.", "default_values": ["0.05"], "ui_class": "parameter", "optional": 1, "id": "e-value", "advanced": 0}, {"field_type": "text", "ui_name": "Gap opening penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The cost to open new gap where gap is inserted in an alignment.", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_opening_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Gap extension penalty", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The cost of extending an existing gap.", "default_values": ["-1"], "ui_class": "parameter", "optional": 1, "id": "gap_extension_penalty", "advanced": 1}, {"field_type": "text", "ui_name": "Word size", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "The size of the initial word that must be matched between the query sequence and target sequence. The default is 3.", "default_values": ["3"], "ui_class": "parameter", "optional": 1, "id": "word_size", "advanced": 1}, {"field_type": "text", "ui_name": "Number of alignments", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Maximum number of alignments to show. The default is 15.", "default_values": ["15"], "ui_class": "parameter", "optional": 1, "id": "maximum_alignment_2show", "advanced": 1}, {"field_type": "text", "ui_name": "Threshold for extending hits", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Specify threshold for extending hits.", "default_values": ["11"], "ui_class": "parameter", "optional": 1, "id": "extending_hits", "advanced": 1}, {"field_type": "text", "ui_name": "Max target sequences", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Select the maximum number of aligned sequences to display.", "default_values": ["500"], "ui_class": "parameter", "optional": 1, "id": "maximum_seq_2show", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Gapped alignment", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Perform gapped alignment.", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "gapped_alignment", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Filter query sequence", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "False", "value": "F"}, {"display": "True", "value": "T"}]}, "disabled": 0, "short_hint": "Filter out segments of the query sequence that have low compositional complexity.", "default_values": ["T"], "ui_class": "parameter", "optional": 1, "id": "filter_query_seq", "advanced": 1}, {"field_type": "dropdown", "ui_name": "Substitution matrix", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "Default", "value": "Default"}, {"display": "BLOSUM-62", "value": "BLOSUM-62"}, {"display": "BLOSUM-80", "value": "BLOSUM-80"}, {"display": "PAM-30", "value": "PAM-30"}, {"display": "PAM-70", "value": "PAM-70"}]}, "disabled": 0, "short_hint": "The name of the alignment matrix that contains a reward or penalty for each possible match or mismatch. The default is BLOSUM-62.", "default_values": ["Default"], "ui_class": "parameter", "optional": 1, "id": "substitution_matrix", "advanced": 1}, {"field_type": "text", "ui_name": "Output object name", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Your desired output object name in the workspace.", "default_values": ["blast_output_"], "ui_class": "parameter", "optional": 0, "id": "output_name", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseGenomeUtil", "kb_service_url": "", "kb_service_method": "blast_against_genome", "kb_service_input_mapping": [{"target_property": "blastindex_name", "input_parameter": "blastindex_name"}, {"target_property": "query", "input_parameter": "query"}, {"target_property": "blast_program", "constant_value": "blastp"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "e-value", "input_parameter": "e-value"}, {"target_property": "gap_opening_penalty", "input_parameter": "gap_opening_penalty"}, {"target_property": "gap_extension_penalty", "input_parameter": "gap_extension_penalty"}, {"target_property": "word_size", "input_parameter": "word_size"}, {"target_property": "maximum_alignment_2show", "input_parameter": "maximum_alignment_2show"}, {"target_property": "substitution_matrix", "input_parameter": "substitution_matrix"}, {"target_property": "gapped_alignment", "input_parameter": "gapped_alignment"}, {"target_property": "filter_query_seq", "input_parameter": "filter_query_seq"}, {"target_property": "extending_hits", "input_parameter": "extending_hits"}, {"target_property": "maximum_seq_2show", "input_parameter": "maximum_seq_2show"}, {"target_property": "output_name", "input_parameter": "output_name"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "blast_output_name", "input_parameter": "output_name"}]}}}}}, {"source": "<div id='kb-cell-21-b01642e5-47d1-4fbb-b16f-b4e5348876ba'></div>\n<script>$('#kb-cell-21-b01642e5-47d1-4fbb-b16f-b4e5348876ba').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"genome_util_index_genomes\",\"name\":\"Build Genome Search Index\",\"ver\":\"1.0.0\",\"subtitle\":\"Build Genome Search Index\\n\",\"tooltip\":\"Build Genome Search Index\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseGenomes.Genome\"],\"output_types\":[],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"null\"},\"parameters\":[{\"id\":\"genomes\",\"ui_name\":\"Genome\\n\",\"short_hint\":\"Select the genome you want to index\\n\",\"description\":\"A single or multiple genomes must be pre-indexed to use as &quot;pre-indexed target genomes&quot; to run any type of BLAST method.\\n\",\"field_type\":\"text\",\"allow_multiple\":1,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseGenomes.Genome\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"index_program\",\"ui_name\":\"Indexing program\",\"short_hint\":\"Converts Fasta files to binary files using formatdb and index the genome.\",\"description\":\"\",\"field_type\":\"dropdown\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"formatdb\"],\"dropdown_options\":{\"options\":[{\"value\":\"formatdb\",\"display\":\"formatdb\"}]}},{\"id\":\"description\",\"ui_name\":\"Index object description\",\"short_hint\":\"Name of genomes used for indexing.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"blastindex_name\",\"ui_name\":\"Output object name\",\"short_hint\":\"Your output object in workspace.\",\"description\":\"\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"\",\"kb_service_name\":\"KBaseGenomeUtil\",\"kb_service_method\":\"index_genomes\",\"kb_service_input_mapping\":[{\"input_parameter\":\"genomes\",\"target_property\":\"genome_ids\"},{\"input_parameter\":\"index_program\",\"target_property\":\"index_program\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"ws_id\"},{\"input_parameter\":\"description\",\"target_property\":\"description\"},{\"input_parameter\":\"blastindex_name\",\"target_property\":\"blastindex_name\"}],\"kb_service_output_mapping\":[{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceName\"},{\"input_parameter\":\"blastindex_name\",\"target_property\":\"blastindex_name\"}]}}', 'cellId' : 'kb-cell-21-b01642e5-47d1-4fbb-b16f-b4e5348876ba'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Genome Search Index", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"index_program": "formatdb", "genomes": [""], "description": "", "blastindex_name": ""}}, "time": 1465865886185}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"index_program": "formatdb", "genomes": [""], "description": "", "blastindex_name": ""}}, "time": 1455837447646}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Build Genome Search Index\n", "name": "Build Genome Search Index", "output_types": [], "namespace": null, "tooltip": "Build Genome Search Index\n", "input_types": ["KBaseGenomes.Genome"], "authors": [], "ver": "1.0.0", "id": "genome_util_index_genomes", "categories": ["active"]}, "widgets": {"input": "null", "output": "null"}, "parameters": [{"field_type": "text", "ui_name": "Genome\n", "allow_multiple": 1, "description": "A single or multiple genomes must be pre-indexed to use as \"pre-indexed target genomes\" to run any type of BLAST method.\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseGenomes.Genome"]}, "disabled": 0, "short_hint": "Select the genome you want to index\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "genomes", "advanced": 0}, {"field_type": "dropdown", "ui_name": "Indexing program", "allow_multiple": 0, "description": "", "dropdown_options": {"options": [{"display": "formatdb", "value": "formatdb"}]}, "disabled": 0, "short_hint": "Converts Fasta files to binary files using formatdb and index the genome.", "default_values": ["formatdb"], "ui_class": "parameter", "optional": 0, "id": "index_program", "advanced": 0}, {"field_type": "text", "ui_name": "Index object description", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Name of genomes used for indexing.", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "description", "advanced": 0}, {"field_type": "text", "ui_name": "Output object name", "allow_multiple": 0, "description": "", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": []}, "disabled": 0, "short_hint": "Your output object in workspace.", "default_values": [""], "ui_class": "parameter", "optional": 0, "id": "blastindex_name", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseGenomeUtil", "kb_service_url": "", "kb_service_method": "index_genomes", "kb_service_input_mapping": [{"target_property": "genome_ids", "input_parameter": "genomes"}, {"target_property": "index_program", "input_parameter": "index_program"}, {"target_property": "ws_id", "narrative_system_variable": "workspace"}, {"target_property": "description", "input_parameter": "description"}, {"target_property": "blastindex_name", "input_parameter": "blastindex_name"}], "kb_service_output_mapping": [{"target_property": "workspaceName", "narrative_system_variable": "workspace"}, {"target_property": "blastindex_name", "input_parameter": "blastindex_name"}]}}}}}, {"source": "<div id='kb-cell-22-4922c2a1-6d08-48a0-8c01-00a0b454ed21'></div>\n<script>$('#kb-cell-22-4922c2a1-6d08-48a0-8c01-00a0b454ed21').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"build_genome_set_from_tree_generic\",\"name\":\"Build Genome Set From Tree\",\"ver\":\"1.0.0\",\"subtitle\":\"Extract a set of genomes from a species tree.\\n\",\"tooltip\":\"Extract a set of genomes from a species tree.\\n\",\"icon\":{\"url\":\"img?method_id=build_genome_set_from_tree_generic&image_name=icon.png\"},\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseTrees.Tree\"],\"output_types\":[\"KBaseSearch.GenomeSet\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseGenomeSetBuilder\"},\"parameters\":[{\"id\":\"param0\",\"ui_name\":\"Species Tree\\n\",\"short_hint\":\"User-generated KBase phylogenetic species tree\\n\",\"description\":\"User-generated KBase phylogenetic species tree\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseTrees.Tree\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"param1\",\"ui_name\":\"Output Genome Set\\n\",\"short_hint\":\"A collection of Genome objects\\n\",\"description\":\"A collection of Genome objects\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseSearch.GenomeSet\"],\"is_output_name\":1,\"placeholder\":\"Name the set of genomes generated\\n\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"kb_service_url\":\"https://ci.kbase.us/services/trees\",\"kb_service_name\":\"KBaseTrees\",\"kb_service_method\":\"build_genome_set_from_tree\",\"kb_service_input_mapping\":[{\"input_parameter\":\"param0\",\"target_property\":\"tree_ref\",\"target_type_transform\":\"ref\"},{\"input_parameter\":\"param1\",\"generated_value\":{\"prefix\":\"genomeset_\"},\"target_property\":\"genomeset_ref\",\"target_type_transform\":\"ref\"}],\"kb_service_output_mapping\":[{\"input_parameter\":\"param1\",\"target_property\":\"genomeSetName\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"wsName\"},{\"constant_value\":1,\"target_property\":\"loadExisting\"}]}}', 'cellId' : 'kb-cell-22-4922c2a1-6d08-48a0-8c01-00a0b454ed21'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Genome Set From Tree", "icon": "<img src=\"https://ci.kbase.us/services/narrative_method_store/img?method_id=build_genome_set_from_tree_generic&amp;image_name=icon.png\" style=\"max-width: 50px; max-height: 50px; cursor: default;\">"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1465865886186}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"param1": "", "param0": ""}}, "time": 1455837447646}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Extract a set of genomes from a species tree.\n", "name": "Build Genome Set From Tree", "output_types": ["KBaseSearch.GenomeSet"], "namespace": null, "tooltip": "Extract a set of genomes from a species tree.\n", "input_types": ["KBaseTrees.Tree"], "authors": [], "ver": "1.0.0", "id": "build_genome_set_from_tree_generic", "categories": ["active"], "icon": {"url": "img?method_id=build_genome_set_from_tree_generic&image_name=icon.png"}}, "widgets": {"input": "null", "output": "kbaseGenomeSetBuilder"}, "parameters": [{"field_type": "text", "ui_name": "Species Tree\n", "allow_multiple": 0, "description": "User-generated KBase phylogenetic species tree\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseTrees.Tree"]}, "disabled": 0, "short_hint": "User-generated KBase phylogenetic species tree\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "param0", "advanced": 0}, {"field_type": "text", "ui_name": "Output Genome Set\n", "allow_multiple": 0, "description": "A collection of Genome objects\n", "text_options": {"is_output_name": 1, "placeholder": "Name the set of genomes generated\n", "regex_constraint": [], "valid_ws_types": ["KBaseSearch.GenomeSet"]}, "disabled": 0, "short_hint": "A collection of Genome objects\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "param1", "advanced": 0}], "fixed_parameters": [], "behavior": {"kb_service_name": "KBaseTrees", "kb_service_url": "https://ci.kbase.us/services/trees", "kb_service_method": "build_genome_set_from_tree", "kb_service_input_mapping": [{"target_property": "tree_ref", "input_parameter": "param0", "target_type_transform": "ref"}, {"target_property": "genomeset_ref", "input_parameter": "param1", "target_type_transform": "ref", "generated_value": {"prefix": "genomeset_"}}], "kb_service_output_mapping": [{"target_property": "genomeSetName", "input_parameter": "param1"}, {"target_property": "wsName", "narrative_system_variable": "workspace"}, {"target_property": "loadExisting", "constant_value": 1}]}}}}}, {"source": "<div id='kb-cell-23-6b01af39-0ea7-4cda-9d8a-88431b47909c'></div>\n<script>$('#kb-cell-23-6b01af39-0ea7-4cda-9d8a-88431b47909c').kbaseNarrativeMethodCell({'method' : '{\"info\":{\"id\":\"build_expression_submatrix\",\"name\":\"Build Expression Submatrix\",\"ver\":\"1.0.0\",\"subtitle\":\"Build Expression Submatrix\\n\",\"tooltip\":\"Build Expression Submatrix\\n\",\"categories\":[\"active\"],\"authors\":[],\"input_types\":[\"KBaseFeatureValues.ExpressionMatrix\",\"KBaseSearch.FeatureSet\"],\"output_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"namespace\":null},\"widgets\":{\"input\":\"null\",\"output\":\"kbaseExpressionMatrix\"},\"parameters\":[{\"id\":\"input_expression_matrix\",\"ui_name\":\"Expression Matrix\\n\",\"short_hint\":\"select the expression matrices to be merged\\n\",\"description\":\"select the expression matrices to be merged\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_selected_conditions\",\"ui_name\":\"Selected conditions\\n\",\"short_hint\":\"Selected conditions\\n\",\"description\":\"Selected conditions\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseSearch.FeatureSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_selected_genes\",\"ui_name\":\"Selected genes\\n\",\"short_hint\":\"Selected genes\\n\",\"description\":\"Selected genes\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":1,\"advanced\":0,\"disabled\":0,\"ui_class\":\"input\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseSearch.FeatureSet\"],\"is_output_name\":0,\"placeholder\":\"\",\"regex_constraint\":[]}},{\"id\":\"input_allow_missing_genes\",\"ui_name\":\"Allow missing genes\\n\",\"short_hint\":\"allow missing genes\\n\",\"description\":\"allow missing genes\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"input_allow_missing_conditions\",\"ui_name\":\"Allow missing conditions\\n\",\"short_hint\":\"allow missing conditions\\n\",\"description\":\"allow missing conditions\\n\",\"field_type\":\"checkbox\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"parameter\",\"default_values\":[\"\"],\"checkbox_options\":{\"checked_value\":1,\"unchecked_value\":0}},{\"id\":\"output_expression_matrix\",\"ui_name\":\"Expression sub matrix\\n\",\"short_hint\":\"Expression sub matrix\\n\",\"description\":\"Expression sub matrix\\n\",\"field_type\":\"text\",\"allow_multiple\":0,\"optional\":0,\"advanced\":0,\"disabled\":0,\"ui_class\":\"output\",\"default_values\":[\"\"],\"text_options\":{\"valid_ws_types\":[\"KBaseFeatureValues.ExpressionMatrix\"],\"is_output_name\":1,\"placeholder\":\"\",\"regex_constraint\":[]}}],\"fixed_parameters\":[],\"behavior\":{\"output_mapping\":[{\"input_parameter\":\"input_expression_matrix\",\"target_property\":\"originalExpressionMatrixId\"},{\"input_parameter\":\"input_selected_conditions\",\"target_property\":\"conditionSetId\"},{\"input_parameter\":\"input_selected_genes\",\"target_property\":\"geneSetId\"},{\"input_parameter\":\"input_allow_missing_genes\",\"target_property\":\"allowMissingGenes\"},{\"input_parameter\":\"input_allow_missing_conditions\",\"target_property\":\"allowMissingConditions\"},{\"input_parameter\":\"output_expression_matrix\",\"target_property\":\"expressionMatrixID\"},{\"narrative_system_variable\":\"workspace\",\"target_property\":\"workspaceID\"}]}}', 'cellId' : 'kb-cell-23-6b01af39-0ea7-4cda-9d8a-88431b47909c'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Build Expression Submatrix", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x method-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cube\"></i></i>"}, "kb-cell": {"widget_state": [{"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_allow_missing_genes": 0, "input_allow_missing_conditions": 0, "input_expression_matrix": "", "input_selected_genes": null, "output_expression_matrix": "", "input_selected_conditions": null}}, "time": 1465865886186}, {"state": {"runningState": {"outputState": true, "runState": "input"}, "jobDetails": null, "params": {"input_allow_missing_genes": 0, "input_allow_missing_conditions": 0, "input_expression_matrix": "", "input_selected_genes": null, "output_expression_matrix": "", "input_selected_conditions": null}}, "time": 1455837447646}], "widget": "null", "type": "function_input", "method": {"info": {"subtitle": "Build Expression Submatrix\n", "name": "Build Expression Submatrix", "output_types": ["KBaseFeatureValues.ExpressionMatrix"], "namespace": null, "tooltip": "Build Expression Submatrix\n", "input_types": ["KBaseFeatureValues.ExpressionMatrix", "KBaseSearch.FeatureSet"], "authors": [], "ver": "1.0.0", "id": "build_expression_submatrix", "categories": ["active"]}, "widgets": {"input": "null", "output": "kbaseExpressionMatrix"}, "parameters": [{"field_type": "text", "ui_name": "Expression Matrix\n", "allow_multiple": 0, "description": "select the expression matrices to be merged\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "select the expression matrices to be merged\n", "default_values": [""], "ui_class": "input", "optional": 0, "id": "input_expression_matrix", "advanced": 0}, {"field_type": "text", "ui_name": "Selected conditions\n", "allow_multiple": 0, "description": "Selected conditions\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseSearch.FeatureSet"]}, "disabled": 0, "short_hint": "Selected conditions\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "input_selected_conditions", "advanced": 0}, {"field_type": "text", "ui_name": "Selected genes\n", "allow_multiple": 0, "description": "Selected genes\n", "text_options": {"is_output_name": 0, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseSearch.FeatureSet"]}, "disabled": 0, "short_hint": "Selected genes\n", "default_values": [""], "ui_class": "input", "optional": 1, "id": "input_selected_genes", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Allow missing genes\n", "allow_multiple": 0, "description": "allow missing genes\n", "optional": 0, "disabled": 0, "short_hint": "allow missing genes\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "input_allow_missing_genes", "advanced": 0}, {"field_type": "checkbox", "ui_name": "Allow missing conditions\n", "allow_multiple": 0, "description": "allow missing conditions\n", "optional": 0, "disabled": 0, "short_hint": "allow missing conditions\n", "default_values": [""], "ui_class": "parameter", "checkbox_options": {"checked_value": 1, "unchecked_value": 0}, "id": "input_allow_missing_conditions", "advanced": 0}, {"field_type": "text", "ui_name": "Expression sub matrix\n", "allow_multiple": 0, "description": "Expression sub matrix\n", "text_options": {"is_output_name": 1, "placeholder": "", "regex_constraint": [], "valid_ws_types": ["KBaseFeatureValues.ExpressionMatrix"]}, "disabled": 0, "short_hint": "Expression sub matrix\n", "default_values": [""], "ui_class": "output", "optional": 0, "id": "output_expression_matrix", "advanced": 0}], "fixed_parameters": [], "behavior": {"output_mapping": [{"target_property": "originalExpressionMatrixId", "input_parameter": "input_expression_matrix"}, {"target_property": "conditionSetId", "input_parameter": "input_selected_conditions"}, {"target_property": "geneSetId", "input_parameter": "input_selected_genes"}, {"target_property": "allowMissingGenes", "input_parameter": "input_allow_missing_genes"}, {"target_property": "allowMissingConditions", "input_parameter": "input_allow_missing_conditions"}, {"target_property": "expressionMatrixID", "input_parameter": "output_expression_matrix"}, {"target_property": "workspaceID", "narrative_system_variable": "workspace"}]}}}}}, {"execution_count": 5, "cell_type": "code", "source": "from biokbase.workspace.client import Workspace\nws = Workspace('https://ci.kbase.us/services/ws')\nnar = ws.get_objects([{'ref': '2795/1'}])[0]", "outputs": [], "metadata": {"kbstate": {"selected": false}, "collapsed": true}}, {"execution_count": 6, "cell_type": "code", "source": "nar['info'][10]", "outputs": [{"execution_count": 6, "output_type": "execute_result", "data": {"text/plain": "{u'app.build_fba_model': u'1',\n u'app.build_plant_metabolic_model': u'1',\n u'app.build_species_tree': u'1',\n u'app.communities_build_functional_profile': u'1',\n u'app.communities_build_taxonomic_profile': u'1',\n u'app.community_fba_modeling': u'1',\n u'app.genome_assembly': u'1',\n u'app.genome_comparison': u'1',\n u'creator': u'wjriehl',\n u'data_dependencies': u'[]',\n u'description': u'',\n u'format': u'ipynb',\n u'job_info': u'{\"queue_time\": 0, \"running\": 0, \"completed\": 0, \"run_time\": 0, \"error\": 0}',\n u'method.KBaseRNASeq/align_reads_using_bowtie2': u'1',\n u'method.KBaseRNASeq/align_reads_using_tophat': u'1',\n u'method.align_reads_using_tophat': u'1',\n u'method.annotate_contigset': u'1',\n u'method.annotate_metagenome': u'1',\n u'method.annotate_plant_transcripts': u'1',\n u'method.associate_metadata_to_reads': u'1',\n u'method.build_expression_submatrix': u'1',\n u'method.build_genome_set_from_tree_generic': u'1',\n u'method.expression_toolkit_reconnect_to_genome': u'1',\n u'method.genome_util_blastn_seq_against_genome': u'1',\n u'method.genome_util_blastn_seq_against_seq': u'1',\n u'method.genome_util_blastoutput_to_featureset': u'1',\n u'method.genome_util_blastp_seq_against_genome': u'1',\n u'method.genome_util_index_genomes': u'1',\n u'method.reannotate_microbial_genome': u'1',\n u'name': u'Lots of Cells',\n u'type': u'KBaseNarrative.Narrative',\n u'ws_name': u'wjriehl:1447873317286'}"}, "metadata": {}}], "metadata": {"kbstate": {"selected": false}, "collapsed": false}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"kbstate": {"selected": true}, "collapsed": true}}, {"source": "<div id='kb-cell-31-9f4a08d5-3441-48b3-86b2-1f2e1d38d9bb'></div>\n<script>$('#kb-cell-31-9f4a08d5-3441-48b3-86b2-1f2e1d38d9bb').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-31-9f4a08d5-3441-48b3-86b2-1f2e1d38d9bb'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886187}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447646}]}}}, {"source": "<div id='kb-cell-30-6b8acec3-e459-4faf-bb6b-79094c5773f2'></div>\n<script>$('#kb-cell-30-6b8acec3-e459-4faf-bb6b-79094c5773f2').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-30-6b8acec3-e459-4faf-bb6b-79094c5773f2'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886187}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447647}]}}}, {"source": "<div id='kb-cell-29-d47d8632-d95f-4ffd-b0ad-0819fea2e51d'></div>\n<script>$('#kb-cell-29-d47d8632-d95f-4ffd-b0ad-0819fea2e51d').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-29-d47d8632-d95f-4ffd-b0ad-0819fea2e51d'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886188}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447647}]}}}, {"source": "<div id='kb-cell-28-3ec4fb0c-e101-4575-85f6-f5bf7b89d4a9'></div>\n<script>$('#kb-cell-28-3ec4fb0c-e101-4575-85f6-f5bf7b89d4a9').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-28-3ec4fb0c-e101-4575-85f6-f5bf7b89d4a9'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886188}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447647}]}}}, {"source": "<div id='kb-cell-27-8fdb061a-64b1-4a01-8402-278b60066fb7'></div>\n<script>$('#kb-cell-27-8fdb061a-64b1-4a01-8402-278b60066fb7').kbaseNarrativeAppCell({'appSpec' : '{\"info\":{\"id\":\"build_fba_model\",\"name\":\"Reconstruct Genome-scale Metabolic Model\",\"ver\":\"0.1.0\",\"subtitle\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"tooltip\":\"Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\\n\",\"header\":\"<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\\n\\n<p><a href=&quot;http://kbase.us/reconstruct-genome-scale-metabolic-model-app/&quot; target=&quot;_blank&quot;>Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"build_a_metabolic_model\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"gapfill_a_metabolic_model\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_model\",\"to\":\"input_model\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\n\"}]}', 'cellId' : 'kb-cell-27-8fdb061a-64b1-4a01-8402-278b60066fb7'});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "Reconstruct Genome-scale Metabolic Model", "selected": false, "icon": "<i class=\"fa-stack fa-2x\" style=\"cursor: default;\"><i class=\"fa fa-square fa-stack-2x app-icon\"></i><i class=\"fa fa-inverse fa-stack-1x fa-cubes\"></i></i>"}, "kb-cell": {"app": {"info": {"subtitle": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "name": "Reconstruct Genome-scale Metabolic Model", "tooltip": "Infer and gapfill a metabolic FBA model from a microbial genome in a specified growth condition.\n", "header": "<p>The Reconstruct Genome-scale Metabolic Model app builds a metabolic model, using the annotation data from an annotated Genome object to reconstruct the metabolic reactions that the cell is capable of performing.  It then performs gapfilling, which is the search for and subsequent bridging of missing metabolic reactions that were not found in the initial annotation search.</p>\n\n<p><a href=\"http://kbase.us/reconstruct-genome-scale-metabolic-model-app/\" target=\"_blank\">Tutorial for Reconstruct Genome-scale Metabolic Model App</a></p>\n", "ver": "0.1.0", "id": "build_fba_model", "categories": ["featured_apps"]}, "steps": [{"step_id": "step_1", "method_id": "build_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_1\n", "input_mapping": []}, {"step_id": "step_2", "method_id": "gapfill_a_metabolic_model", "description": "additional instructions/details regarding the step with id step_2\n", "input_mapping": [{"to": "input_model", "is_from_input": 1, "from": "output_model", "step_source": "step_1"}]}]}, "type": "kb_app", "widget_state": [{"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1465865886189}, {"state": {"step": {"step_1": {"inputState": {"template_model": null, "input_genome": "", "core_model": 0, "output_model": "", "full_db_model": 0}}, "step_2": {"inputState": {"comprehensive_gapfill": 0, "expression_condition": null, "discrete_variables": 1, "objective_fraction": "0.1", "universal_gene_threshold": 1, "output_model": "", "expression_matrix": null, "reaction_ko": null, "expression_threshold": "0.5", "source_model": null, "target_reaction": ["bio1"], "input_model": "", "gene_ko": null, "expression_uncertainty": "0.1", "input_media": null}}}, "runningState": {"appRunState": "input", "runningStep": null, "submittedText": ""}}, "time": 1455837447648}]}}}, {"source": "<div id=\"kb-cell-out-243e238b-cb65-4363-b82e-e707ba1affb8\"></div>\n<script>$(\"#kb-cell-out-243e238b-cb65-4363-b82e-e707ba1affb8\").kbaseNarrativeOutputCell({\"data\":{\"nearCellIdx\":44,\"widget\":\"kbaseNarrativeDataCell\",\"info\":{\"id\":2,\"name\":\"spades_output\",\"type\":\"KBaseGenomes.ContigSet-3.0\",\"save_date\":\"2016-06-13T23:46:57+0000\",\"version\":4,\"saved_by\":\"wjriehl\",\"ws_id\":2795,\"ws_name\":\"wjriehl:1447873317286\",\"chsum\":\"af3cee4dc6e6a1609632abe73958b794\",\"size\":3921209,\"meta\":{\"Name\":\"spades_output\",\"Source\":\"See provenance\",\"Source ID\":\"See provenance\",\"Number contigs\":\"226\"}}}, \"type\":\"viewer\", \"widget\":\"kbaseNarrativeDataCell\", \"cellId\":\"kb-cell-out-243e238b-cb65-4363-b82e-e707ba1affb8\", \"title\":\"Data Viewer\", \"time\":1465861621192});</script>", "cell_type": "markdown", "metadata": {"kbstate": {"title": "spades_output", "selected": false, "icon": "<i class=\"fa fa-2x fa-table data-viewer-icon\"></i>"}, "kb-cell": {"widget": "kbaseNarrativeDataCell", "type": "function_output", "widget_state": [{"state": null, "time": 1465865886189}]}}}, {"execution_count": 1, "cell_type": "code", "source": "from biokbase.workspace.client import Workspace\nws = Workspace('https://ci.kbase.us/services/ws')\nnar = ws.get_objects([{'ref': '2795/1'}])[0]", "outputs": [{"output_type": "stream", "name": "stderr", "text": "/usr/local/lib/python2.7/dist-packages/requests/packages/urllib3/util/ssl_.py:90: InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n  InsecurePlatformWarning\n"}], "metadata": {"kbstate": {"selected": false}, "collapsed": false}}, {"execution_count": 2, "cell_type": "code", "source": "nar['info']", "outputs": [{"execution_count": 2, "output_type": "execute_result", "data": {"text/plain": "[1,\n u'Narrative.1447873317286',\n u'KBaseNarrative.Narrative-4.0',\n u'2016-02-18T23:17:29+0000',\n 13,\n u'wjriehl',\n 2795,\n u'wjriehl:1447873317286',\n u'37c212981566728b6253ea803b69fb10',\n 428594,\n {u'app.build_fba_model/': u'6',\n  u'app.build_plant_metabolic_model/': u'1',\n  u'app.build_species_tree/': u'1',\n  u'app.communities_build_functional_profile/': u'1',\n  u'app.communities_build_taxonomic_profile/': u'1',\n  u'app.community_fba_modeling/': u'1',\n  u'app.genome_assembly/': u'1',\n  u'app.genome_comparison/': u'1',\n  u'creator': u'wjriehl',\n  u'data_dependencies': u'[]',\n  u'description': u'',\n  u'format': u'ipynb',\n  u'job_info': u'{\"queue_time\": 0, \"running\": 0, \"completed\": 0, \"run_time\": 0, \"error\": 0}',\n  u'jupyter.code': u'3',\n  u'method.CoExpression/expression_toolkit_cluster_WGCNA/82b1be5e133a18e45f48c11d83b2ba5f500cd66a': u'1',\n  u'method.KBaseRNASeq/align_reads_using_bowtie2/': u'1',\n  u'method.KBaseRNASeq/align_reads_using_tophat/': u'1',\n  u'method.KBaseRNASeq/build_bowtie2_index/2a4dd3e08aa985d5eb21bf17ddf083e2bd6cc24c': u'1',\n  u'method.MegaHit/run_megahit/74be37bbcb2c117d7af12344617569cdd6c77ed2': u'1',\n  u'method.MsneddonContigFilter/filter_contigs/10100999595c9031e51a877a8a278d2e06583f3a': u'1',\n  u'method.PangenomeOrthomcl/build_pangenome_with_orthomcl/93b84e4cbb0c20021580600b76fffda37832dbd8': u'1',\n  u'method.RSContigThing/filter_contigs/ecaaad932f995d61db10d03649ba9bd30baa6944': u'1',\n  u'method.align_reads_using_tophat/': u'1',\n  u'method.annotate_contigset/': u'1',\n  u'method.annotate_metagenome/': u'1',\n  u'method.annotate_plant_transcripts/': u'1',\n  u'method.associate_metadata_to_reads/': u'1',\n  u'method.build_expression_submatrix/': u'1',\n  u'method.build_feature_set/': u'1',\n  u'method.build_genome_set_from_tree_generic/': u'1',\n  u'method.expression_toolkit_reconnect_to_genome/': u'1',\n  u'method.fba_tools/build_metabolic_model/12d84163e243733f1f8616672ca528963be29f8d': u'1',\n  u'method.fba_tools/compare_fba_solutions/12d84163e243733f1f8616672ca528963be29f8d': u'1',\n  u'method.fba_tools/compare_flux_with_expression/12d84163e243733f1f8616672ca528963be29f8d': u'1',\n  u'method.genome_util_blastn_seq_against_genome/': u'1',\n  u'method.genome_util_blastn_seq_against_seq/': u'1',\n  u'method.genome_util_blastoutput_to_featureset/': u'1',\n  u'method.genome_util_blastp_seq_against_genome/': u'1',\n  u'method.genome_util_index_genomes/': u'1',\n  u'method.kb_cummerbund/create_expression_matrix/8532cc959c48626552041962b0b9e2e4cf99922c': u'1',\n  u'method.onerepotest/send_data/b7636c3f8d16491593900dd5cc89897b54e7856a': u'1',\n  u'method.onerepotest/send_data_sync/b7636c3f8d16491593900dd5cc89897b54e7856a': u'1',\n  u'method.reannotate_microbial_genome/': u'1',\n  u'name': u'Lots of Cells',\n  u'type': u'KBaseNarrative.Narrative',\n  u'ws_name': u'wjriehl:1447873317286'}]"}, "metadata": {}}], "metadata": {"kbstate": {"selected": false}, "collapsed": false}}, {"execution_count": 5, "cell_type": "code", "source": "nar['data']['metadata']", "outputs": [{"execution_count": 5, "output_type": "execute_result", "data": {"text/plain": "{u'creator': u'wjriehl',\n u'data_dependencies': [],\n u'description': u'',\n u'format': u'ipynb',\n u'job_ids': {u'apps': [],\n  u'job_usage': {u'queue_time': 0, u'run_time': 0},\n  u'methods': []},\n u'kernelspec': {u'display_name': u'Python 2',\n  u'language': u'python',\n  u'name': u'python2'},\n u'language_info': {u'codemirror_mode': {u'name': u'ipython', u'version': 2},\n  u'file_extension': u'.py',\n  u'mimetype': u'text/x-python',\n  u'name': u'python',\n  u'nbconvert_exporter': u'python',\n  u'pygments_lexer': u'ipython2',\n  u'version': u'2.7.6'},\n u'name': u'Lots of Cells',\n u'type': u'KBaseNarrative.Narrative',\n u'ws_name': u'wjriehl:1447873317286'}"}, "metadata": {}}], "metadata": {"kbstate": {"selected": false}, "collapsed": false}}, {"execution_count": 8, "cell_type": "code", "source": "nar['data']['cells'][0]['source']", "outputs": [{"execution_count": 8, "output_type": "execute_result", "data": {"text/plain": "u'<div id=\\'kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047\\'></div>\\n<script>$(\\'#kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047\\').kbaseNarrativeAppCell({\\'appSpec\\' : \\'{\"info\":{\"id\":\"genome_assembly\",\"name\":\"Assemble and Annotate Microbial Genome\",\"ver\":\"0.1.0\",\"subtitle\":\"Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\\\\n\",\"tooltip\":\"Assemble NGS reads into contigs and then perform structural and functional annotation of the assembled contigs.\\\\n\",\"header\":\"<p>The Assemble and Annotate Microbial Genome app assembles a set of Next-Generation Sequencing (NGS) short reads into contigs and then annotates the assembled contigs, calling genes and other genomic features and assigning biological functions. The user supplies a set of FASTA or FASTQ files of short reads and chooses from one of a variety of assembly algorithms. After the assembly, the contigs are automatically annotated by the KBase annotation pipeline, which includes assignment of biological functions derived from RAST (Rapid Annotations using Subsystems Technology). The resulting annotated genome can be exported in GenBank or FASTA format or used as input to other KBase apps such as Reconstruct Genome-scale Metabolic Model.</p>\\\\n\\\\n<p><a href=&quot;http://kbase.us/assemble-and-annotate-microbial-genome-app/&quot; target=&quot;_blank&quot;>Tutorial for Assemble and Annotate Microbial Genome App</a></p>\\\\n\",\"categories\":[\"featured_apps\"]},\"steps\":[{\"step_id\":\"step_1\",\"method_id\":\"assemble_contigset_from_reads\",\"input_mapping\":[],\"description\":\"additional instructions/details regarding the step with id step_1\\\\n\"},{\"step_id\":\"step_2\",\"method_id\":\"annotate_contigset\",\"input_mapping\":[{\"step_source\":\"step_1\",\"is_from_input\":1,\"from\":\"output_contigset\",\"to\":\"input_contigset\"}],\"description\":\"additional instructions/details regarding the step with id step_2\\\\n\"}]}\\', \\'cellId\\' : \\'kb-cell-0-780b4c0e-a3b3-45d7-80e6-58883933c047\\'});</script>'"}, "metadata": {}}], "metadata": {"kbstate": {"selected": false}, "collapsed": false}}, {"execution_count": null, "cell_type": "code", "source": "", "outputs": [], "metadata": {"kbstate": {"selected": true}, "collapsed": true}}], "metadata": {"kernelspec": {"display_name": "Python 2", "name": "python2", "language": "python"}, "language_info": {"mimetype": "text/x-python", "nbconvert_exporter": "python", "name": "python", "file_extension": ".py", "version": "2.7.6", "pygments_lexer": "ipython2", "codemirror_mode": {"version": 2, "name": "ipython"}}, "description": "", "format": "ipynb", "creator": "wjriehl", "data_dependencies": [], "ws_name": "wjriehl:1447873317286", "type": "KBaseNarrative.Narrative", "job_ids": {"job_usage": {"queue_time": 0, "run_time": 0}, "apps": [], "methods": []}, "name": "Lots of Cells"}}, "extracted_ids": {}}