############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class UserAndJobState(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            url = 'https://kbase.us/services/userandjobstate/'
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def ver(self, context=None):
        """
        Returns the version of the userandjobstate service.
        :returns: instance of String
        """
        return self._client.call_method(
            'UserAndJobState.ver',
            [], self._service_ver, context)

    def set_state(self, service, key, value, context=None):
        """
        Set the state of a key for a service without service authentication.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param key: instance of String
        :param value: instance of unspecified object
        """
        return self._client.call_method(
            'UserAndJobState.set_state',
            [service, key, value], self._service_ver, context)

    def set_state_auth(self, token, key, value, context=None):
        """
        Set the state of a key for a service with service authentication.
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param key: instance of String
        :param value: instance of unspecified object
        """
        return self._client.call_method(
            'UserAndJobState.set_state_auth',
            [token, key, value], self._service_ver, context)

    def get_state(self, service, key, auth, context=None):
        """
        Get the state of a key for a service.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param key: instance of String
        :param auth: instance of type "authed" (Specifies whether results
           returned should be from key/value pairs set with service
           authentication (true) or without (false).) -> type "boolean" (A
           boolean. 0 = false, other = true.)
        :returns: instance of unspecified object
        """
        return self._client.call_method(
            'UserAndJobState.get_state',
            [service, key, auth], self._service_ver, context)

    def has_state(self, service, key, auth, context=None):
        """
        Determine if a key exists for a service.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param key: instance of String
        :param auth: instance of type "authed" (Specifies whether results
           returned should be from key/value pairs set with service
           authentication (true) or without (false).) -> type "boolean" (A
           boolean. 0 = false, other = true.)
        :returns: instance of type "boolean" (A boolean. 0 = false, other =
           true.)
        """
        return self._client.call_method(
            'UserAndJobState.has_state',
            [service, key, auth], self._service_ver, context)

    def get_has_state(self, service, key, auth, context=None):
        """
        Get the state of a key for a service, and do not throw an error if the
        key doesn't exist. If the key doesn't exist, has_key will be false
        and the key value will be null.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param key: instance of String
        :param auth: instance of type "authed" (Specifies whether results
           returned should be from key/value pairs set with service
           authentication (true) or without (false).) -> type "boolean" (A
           boolean. 0 = false, other = true.)
        :returns: multiple set - (1) parameter "has_key" of type "boolean" (A
           boolean. 0 = false, other = true.), (2) parameter "value" of
           unspecified object
        """
        return self._client.call_method(
            'UserAndJobState.get_has_state',
            [service, key, auth], self._service_ver, context)

    def remove_state(self, service, key, context=None):
        """
        Remove a key value pair without service authentication.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param key: instance of String
        """
        return self._client.call_method(
            'UserAndJobState.remove_state',
            [service, key], self._service_ver, context)

    def remove_state_auth(self, token, key, context=None):
        """
        Remove a key value pair with service authentication.
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param key: instance of String
        """
        return self._client.call_method(
            'UserAndJobState.remove_state_auth',
            [token, key], self._service_ver, context)

    def list_state(self, service, auth, context=None):
        """
        List all keys.
        :param service: instance of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        :param auth: instance of type "authed" (Specifies whether results
           returned should be from key/value pairs set with service
           authentication (true) or without (false).) -> type "boolean" (A
           boolean. 0 = false, other = true.)
        :returns: instance of list of String
        """
        return self._client.call_method(
            'UserAndJobState.list_state',
            [service, auth], self._service_ver, context)

    def list_state_services(self, auth, context=None):
        """
        List all state services.
        :param auth: instance of type "authed" (Specifies whether results
           returned should be from key/value pairs set with service
           authentication (true) or without (false).) -> type "boolean" (A
           boolean. 0 = false, other = true.)
        :returns: instance of list of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        """
        return self._client.call_method(
            'UserAndJobState.list_state_services',
            [auth], self._service_ver, context)

    def create_job2(self, params, context=None):
        """
        Create a new job status report.
        :param params: instance of type "CreateJobParams" (Parameters for the
           create_job2 method. Optional parameters: auth_strategy authstrat -
           the authorization strategy to use for the job. Omit to use the
           standard UJS authorization. If an authorization strategy is
           supplied, in most cases an authparam must be supplied as well.
           auth_param - a parameter for the authorization strategy. usermeta
           meta - metadata for the job.) -> structure: parameter "authstrat"
           of type "auth_strategy" (An authorization strategy to use for
           jobs. Other than the DEFAULT strategy (ACLs local to the UJS and
           managed by the UJS sharing functions), currently the only other
           strategy is the 'kbaseworkspace' strategy, which consults the
           workspace service for authorization information.), parameter
           "authparam" of type "auth_param" (An authorization parameter. The
           contents of this parameter differ by auth_strategy, but for the
           workspace strategy it is the workspace id (an integer) as a
           string.), parameter "meta" of type "usermeta" (User provided
           metadata about a job. Arbitrary key-value pairs provided by the
           user.) -> mapping from String to String
        :returns: instance of type "job_id" (A job id.)
        """
        return self._client.call_method(
            'UserAndJobState.create_job2',
            [params], self._service_ver, context)

    def create_job(self, context=None):
        """
        Create a new job status report.
        @deprecated create_job2
        :returns: instance of type "job_id" (A job id.)
        """
        return self._client.call_method(
            'UserAndJobState.create_job',
            [], self._service_ver, context)

    def start_job(self, job, token, status, desc, progress, est_complete, context=None):
        """
        Start a job and specify the job parameters.
        :param job: instance of type "job_id" (A job id.)
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        :param desc: instance of type "job_description" (A job description
           string supplied by the reporting service. No more than 1000
           characters.)
        :param progress: instance of type "InitProgress" (Initialization
           information for progress tracking. Currently 3 choices:
           progress_type ptype - one of 'none', 'percent', or 'task'
           max_progress max- required only for task based tracking. The total
           number of tasks until the job is complete.) -> structure:
           parameter "ptype" of type "progress_type" (The type of progress
           that is being tracked. One of: 'none' - no numerical progress
           tracking 'task' - Task based tracking, e.g. 3/24 'percent' -
           percentage based tracking, e.g. 5/100%), parameter "max" of type
           "max_progress" (The maximum possible progress of a job.)
        :param est_complete: instance of type "timestamp" (A time in the
           format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to
           UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time))
        """
        return self._client.call_method(
            'UserAndJobState.start_job',
            [job, token, status, desc, progress, est_complete], self._service_ver, context)

    def create_and_start_job(self, token, status, desc, progress, est_complete, context=None):
        """
        Create and start a job.
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        :param desc: instance of type "job_description" (A job description
           string supplied by the reporting service. No more than 1000
           characters.)
        :param progress: instance of type "InitProgress" (Initialization
           information for progress tracking. Currently 3 choices:
           progress_type ptype - one of 'none', 'percent', or 'task'
           max_progress max- required only for task based tracking. The total
           number of tasks until the job is complete.) -> structure:
           parameter "ptype" of type "progress_type" (The type of progress
           that is being tracked. One of: 'none' - no numerical progress
           tracking 'task' - Task based tracking, e.g. 3/24 'percent' -
           percentage based tracking, e.g. 5/100%), parameter "max" of type
           "max_progress" (The maximum possible progress of a job.)
        :param est_complete: instance of type "timestamp" (A time in the
           format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to
           UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time))
        :returns: instance of type "job_id" (A job id.)
        """
        return self._client.call_method(
            'UserAndJobState.create_and_start_job',
            [token, status, desc, progress, est_complete], self._service_ver, context)

    def update_job_progress(self, job, token, status, prog, est_complete, context=None):
        """
        Update the status and progress for a job.
        :param job: instance of type "job_id" (A job id.)
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        :param prog: instance of type "progress" (The amount of progress the
           job has made since the last update. This will be summed to the
           total progress so far.)
        :param est_complete: instance of type "timestamp" (A time in the
           format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to
           UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time))
        """
        return self._client.call_method(
            'UserAndJobState.update_job_progress',
            [job, token, status, prog, est_complete], self._service_ver, context)

    def update_job(self, job, token, status, est_complete, context=None):
        """
        Update the status for a job.
        :param job: instance of type "job_id" (A job id.)
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        :param est_complete: instance of type "timestamp" (A time in the
           format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to
           UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time))
        """
        return self._client.call_method(
            'UserAndJobState.update_job',
            [job, token, status, est_complete], self._service_ver, context)

    def get_job_description(self, job, context=None):
        """
        Get the description of a job.
        :param job: instance of type "job_id" (A job id.)
        :returns: multiple set - (1) parameter "service" of type
           "service_name" (A service name. Alphanumerics and the underscore
           are allowed.), (2) parameter "ptype" of type "progress_type" (The
           type of progress that is being tracked. One of: 'none' - no
           numerical progress tracking 'task' - Task based tracking, e.g.
           3/24 'percent' - percentage based tracking, e.g. 5/100%), (3)
           parameter "max" of type "max_progress" (The maximum possible
           progress of a job.), (4) parameter "desc" of type
           "job_description" (A job description string supplied by the
           reporting service. No more than 1000 characters.), (5) parameter
           "started" of type "timestamp" (A time in the format
           YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to UTC in
           the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time))
        """
        return self._client.call_method(
            'UserAndJobState.get_job_description',
            [job], self._service_ver, context)

    def get_job_status(self, job, context=None):
        """
        Get the status of a job.
        :param job: instance of type "job_id" (A job id.)
        :returns: multiple set - (1) parameter "last_update" of type
           "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where Z is
           the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time)), (2) parameter "stage" of type "job_stage" (A string that
           describes the stage of processing of the job. One of 'created',
           'started', 'completed', 'canceled' or 'error'.), (3) parameter
           "status" of type "job_status" (A job status string supplied by the
           reporting service. No more than 200 characters.), (4) parameter
           "progress" of type "total_progress" (The total progress of a
           job.), (5) parameter "est_complete" of type "timestamp" (A time in
           the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time
           to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST
           time) 2013-04-03T08:56:32+0000 (UTC time)), (6) parameter
           "complete" of type "boolean" (A boolean. 0 = false, other =
           true.), (7) parameter "error" of type "boolean" (A boolean. 0 =
           false, other = true.)
        """
        return self._client.call_method(
            'UserAndJobState.get_job_status',
            [job], self._service_ver, context)

    def complete_job(self, job, token, status, error, res, context=None):
        """
        Complete the job. After the job is completed, total_progress always
        equals max_progress. If detailed_err is anything other than null,
        the job is considered to have errored out.
        :param job: instance of type "job_id" (A job id.)
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        :param error: instance of type "detailed_err" (Detailed information
           about a job error, such as a stacktrace, that will not fit in the
           job_status. No more than 100K characters.)
        :param res: instance of type "Results" (A pointer to job results. All
           arguments are optional. Applications should use the default shock
           and workspace urls if omitted. list<string> shocknodes - the
           shocknode(s) where the results can be found. No more than 1000
           characters. string shockurl - the url of the shock service where
           the data was saved.  No more than 1000 characters. list<string>
           workspaceids - the workspace ids where the results can be found.
           No more than 1000 characters. string workspaceurl - the url of the
           workspace service where the data was saved.  No more than 1000
           characters. list<Result> - a set of job results. This format
           allows for specifying results at multiple server locations and
           providing a free text description of the result.) -> structure:
           parameter "shocknodes" of list of String, parameter "shockurl" of
           String, parameter "workspaceids" of list of String, parameter
           "workspaceurl" of String, parameter "results" of list of type
           "Result" (A place where the results of a job may be found. All
           fields except description are required. string server_type - the
           type of server storing the results. Typically either "Shock" or
           "Workspace". No more than 100 characters. string url - the url of
           the server. No more than 1000 characters. string id - the id of
           the result in the server. Typically either a workspace id or a
           shock node. No more than 1000 characters. string description - a
           free text description of the result. No more than 1000
           characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.complete_job',
            [job, token, status, error, res], self._service_ver, context)

    def cancel_job(self, job, status, context=None):
        """
        Cancel a job.
        :param job: instance of type "job_id" (A job id.)
        :param status: instance of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.)
        """
        return self._client.call_method(
            'UserAndJobState.cancel_job',
            [job, status], self._service_ver, context)

    def get_results(self, job, context=None):
        """
        Get the job results.
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of type "Results" (A pointer to job results. All
           arguments are optional. Applications should use the default shock
           and workspace urls if omitted. list<string> shocknodes - the
           shocknode(s) where the results can be found. No more than 1000
           characters. string shockurl - the url of the shock service where
           the data was saved.  No more than 1000 characters. list<string>
           workspaceids - the workspace ids where the results can be found.
           No more than 1000 characters. string workspaceurl - the url of the
           workspace service where the data was saved.  No more than 1000
           characters. list<Result> - a set of job results. This format
           allows for specifying results at multiple server locations and
           providing a free text description of the result.) -> structure:
           parameter "shocknodes" of list of String, parameter "shockurl" of
           String, parameter "workspaceids" of list of String, parameter
           "workspaceurl" of String, parameter "results" of list of type
           "Result" (A place where the results of a job may be found. All
           fields except description are required. string server_type - the
           type of server storing the results. Typically either "Shock" or
           "Workspace". No more than 100 characters. string url - the url of
           the server. No more than 1000 characters. string id - the id of
           the result in the server. Typically either a workspace id or a
           shock node. No more than 1000 characters. string description - a
           free text description of the result. No more than 1000
           characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.get_results',
            [job], self._service_ver, context)

    def get_detailed_error(self, job, context=None):
        """
        Get the detailed error message, if any
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of type "detailed_err" (Detailed information about
           a job error, such as a stacktrace, that will not fit in the
           job_status. No more than 100K characters.)
        """
        return self._client.call_method(
            'UserAndJobState.get_detailed_error',
            [job], self._service_ver, context)

    def get_job_info2(self, job, context=None):
        """
        Get information about a job.
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of type "job_info2" (Information about a job.) ->
           tuple of size 13: parameter "job" of type "job_id" (A job id.),
           parameter "users" of type "user_info" (Who owns a job and who
           canceled a job (null if not canceled).) -> tuple of size 2:
           parameter "owner" of type "username" (Login name of a KBase user
           account.), parameter "canceledby" of type "username" (Login name
           of a KBase user account.), parameter "service" of type
           "service_name" (A service name. Alphanumerics and the underscore
           are allowed.), parameter "stage" of type "job_stage" (A string
           that describes the stage of processing of the job. One of
           'created', 'started', 'completed', 'canceled' or 'error'.),
           parameter "status" of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.),
           parameter "times" of type "time_info" (Job timing information.) ->
           tuple of size 3: parameter "started" of type "timestamp" (A time
           in the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in
           time to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500
           (EST time) 2013-04-03T08:56:32+0000 (UTC time)), parameter
           "last_update" of type "timestamp" (A time in the format
           YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to UTC in
           the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time)), parameter "est_complete" of
           type "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where
           Z is the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time)), parameter "progress" of type "progress_info" (Job progress
           information.) -> tuple of size 3: parameter "prog" of type
           "total_progress" (The total progress of a job.), parameter "max"
           of type "max_progress" (The maximum possible progress of a job.),
           parameter "ptype" of type "progress_type" (The type of progress
           that is being tracked. One of: 'none' - no numerical progress
           tracking 'task' - Task based tracking, e.g. 3/24 'percent' -
           percentage based tracking, e.g. 5/100%), parameter "complete" of
           type "boolean" (A boolean. 0 = false, other = true.), parameter
           "error" of type "boolean" (A boolean. 0 = false, other = true.),
           parameter "auth" of type "auth_info" (Job authorization strategy
           information.) -> tuple of size 2: parameter "strat" of type
           "auth_strategy" (An authorization strategy to use for jobs. Other
           than the DEFAULT strategy (ACLs local to the UJS and managed by
           the UJS sharing functions), currently the only other strategy is
           the 'kbaseworkspace' strategy, which consults the workspace
           service for authorization information.), parameter "param" of type
           "auth_param" (An authorization parameter. The contents of this
           parameter differ by auth_strategy, but for the workspace strategy
           it is the workspace id (an integer) as a string.), parameter
           "meta" of type "usermeta" (User provided metadata about a job.
           Arbitrary key-value pairs provided by the user.) -> mapping from
           String to String, parameter "desc" of type "job_description" (A
           job description string supplied by the reporting service. No more
           than 1000 characters.), parameter "res" of type "Results" (A
           pointer to job results. All arguments are optional. Applications
           should use the default shock and workspace urls if omitted.
           list<string> shocknodes - the shocknode(s) where the results can
           be found. No more than 1000 characters. string shockurl - the url
           of the shock service where the data was saved.  No more than 1000
           characters. list<string> workspaceids - the workspace ids where
           the results can be found. No more than 1000 characters. string
           workspaceurl - the url of the workspace service where the data was
           saved.  No more than 1000 characters. list<Result> - a set of job
           results. This format allows for specifying results at multiple
           server locations and providing a free text description of the
           result.) -> structure: parameter "shocknodes" of list of String,
           parameter "shockurl" of String, parameter "workspaceids" of list
           of String, parameter "workspaceurl" of String, parameter "results"
           of list of type "Result" (A place where the results of a job may
           be found. All fields except description are required. string
           server_type - the type of server storing the results. Typically
           either "Shock" or "Workspace". No more than 100 characters. string
           url - the url of the server. No more than 1000 characters. string
           id - the id of the result in the server. Typically either a
           workspace id or a shock node. No more than 1000 characters. string
           description - a free text description of the result. No more than
           1000 characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.get_job_info2',
            [job], self._service_ver, context)

    def get_job_info(self, job, context=None):
        """
        Get information about a job.
        @deprecated get_job_info2
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of type "job_info" (Information about a job.
           @deprecated job_info2) -> tuple of size 14: parameter "job" of
           type "job_id" (A job id.), parameter "service" of type
           "service_name" (A service name. Alphanumerics and the underscore
           are allowed.), parameter "stage" of type "job_stage" (A string
           that describes the stage of processing of the job. One of
           'created', 'started', 'completed', 'canceled' or 'error'.),
           parameter "started" of type "timestamp" (A time in the format
           YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to UTC in
           the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time)), parameter "status" of type
           "job_status" (A job status string supplied by the reporting
           service. No more than 200 characters.), parameter "last_update" of
           type "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where
           Z is the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time)), parameter "prog" of type "total_progress" (The total
           progress of a job.), parameter "max" of type "max_progress" (The
           maximum possible progress of a job.), parameter "ptype" of type
           "progress_type" (The type of progress that is being tracked. One
           of: 'none' - no numerical progress tracking 'task' - Task based
           tracking, e.g. 3/24 'percent' - percentage based tracking, e.g.
           5/100%), parameter "est_complete" of type "timestamp" (A time in
           the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time
           to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST
           time) 2013-04-03T08:56:32+0000 (UTC time)), parameter "complete"
           of type "boolean" (A boolean. 0 = false, other = true.), parameter
           "error" of type "boolean" (A boolean. 0 = false, other = true.),
           parameter "desc" of type "job_description" (A job description
           string supplied by the reporting service. No more than 1000
           characters.), parameter "res" of type "Results" (A pointer to job
           results. All arguments are optional. Applications should use the
           default shock and workspace urls if omitted. list<string>
           shocknodes - the shocknode(s) where the results can be found. No
           more than 1000 characters. string shockurl - the url of the shock
           service where the data was saved.  No more than 1000 characters.
           list<string> workspaceids - the workspace ids where the results
           can be found. No more than 1000 characters. string workspaceurl -
           the url of the workspace service where the data was saved.  No
           more than 1000 characters. list<Result> - a set of job results.
           This format allows for specifying results at multiple server
           locations and providing a free text description of the result.) ->
           structure: parameter "shocknodes" of list of String, parameter
           "shockurl" of String, parameter "workspaceids" of list of String,
           parameter "workspaceurl" of String, parameter "results" of list of
           type "Result" (A place where the results of a job may be found.
           All fields except description are required. string server_type -
           the type of server storing the results. Typically either "Shock"
           or "Workspace". No more than 100 characters. string url - the url
           of the server. No more than 1000 characters. string id - the id of
           the result in the server. Typically either a workspace id or a
           shock node. No more than 1000 characters. string description - a
           free text description of the result. No more than 1000
           characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.get_job_info',
            [job], self._service_ver, context)

    def list_jobs2(self, params, context=None):
        """
        List jobs.
        :param params: instance of type "ListJobsParams" (Input parameters
           for the list_jobs2 method. Optional parameters: list<service_name>
           services - the services from which to list jobs. Omit to list jobs
           from all services. job_filter filter - the filter to apply to the
           set of jobs. auth_strategy authstrat - return jobs with the
           specified authorization strategy. If this parameter is omitted,
           jobs with the default strategy will be returned. list<auth_params>
           authparams - only return jobs with one of the specified
           authorization parameters. An authorization strategy must be
           provided if authparams is specified. In most cases, at least one
           authorization parameter must be supplied and there is an upper
           limit to the number of paramters allowed. In the case of the
           kbaseworkspace strategy, these limits are 1 and 10, respectively.)
           -> structure: parameter "services" of list of type "service_name"
           (A service name. Alphanumerics and the underscore are allowed.),
           parameter "filter" of type "job_filter" (A string-based filter for
           listing jobs. If the string contains: 'R' - running jobs are
           returned. 'C' - completed jobs are returned. 'N' - canceled jobs
           are returned. 'E' - jobs that errored out are returned. 'S' -
           shared jobs are returned. The string can contain any combination
           of these codes in any order. If the string contains none of the
           codes or is null, all self-owned jobs are returned. If only the S
           filter is present, all jobs are returned. The S filter is ignored
           for jobs not using the default authorization strategy.), parameter
           "authstrat" of type "auth_strategy" (An authorization strategy to
           use for jobs. Other than the DEFAULT strategy (ACLs local to the
           UJS and managed by the UJS sharing functions), currently the only
           other strategy is the 'kbaseworkspace' strategy, which consults
           the workspace service for authorization information.), parameter
           "authparams" of list of type "auth_param" (An authorization
           parameter. The contents of this parameter differ by auth_strategy,
           but for the workspace strategy it is the workspace id (an integer)
           as a string.)
        :returns: instance of list of type "job_info2" (Information about a
           job.) -> tuple of size 13: parameter "job" of type "job_id" (A job
           id.), parameter "users" of type "user_info" (Who owns a job and
           who canceled a job (null if not canceled).) -> tuple of size 2:
           parameter "owner" of type "username" (Login name of a KBase user
           account.), parameter "canceledby" of type "username" (Login name
           of a KBase user account.), parameter "service" of type
           "service_name" (A service name. Alphanumerics and the underscore
           are allowed.), parameter "stage" of type "job_stage" (A string
           that describes the stage of processing of the job. One of
           'created', 'started', 'completed', 'canceled' or 'error'.),
           parameter "status" of type "job_status" (A job status string
           supplied by the reporting service. No more than 200 characters.),
           parameter "times" of type "time_info" (Job timing information.) ->
           tuple of size 3: parameter "started" of type "timestamp" (A time
           in the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in
           time to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500
           (EST time) 2013-04-03T08:56:32+0000 (UTC time)), parameter
           "last_update" of type "timestamp" (A time in the format
           YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to UTC in
           the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time)), parameter "est_complete" of
           type "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where
           Z is the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time)), parameter "progress" of type "progress_info" (Job progress
           information.) -> tuple of size 3: parameter "prog" of type
           "total_progress" (The total progress of a job.), parameter "max"
           of type "max_progress" (The maximum possible progress of a job.),
           parameter "ptype" of type "progress_type" (The type of progress
           that is being tracked. One of: 'none' - no numerical progress
           tracking 'task' - Task based tracking, e.g. 3/24 'percent' -
           percentage based tracking, e.g. 5/100%), parameter "complete" of
           type "boolean" (A boolean. 0 = false, other = true.), parameter
           "error" of type "boolean" (A boolean. 0 = false, other = true.),
           parameter "auth" of type "auth_info" (Job authorization strategy
           information.) -> tuple of size 2: parameter "strat" of type
           "auth_strategy" (An authorization strategy to use for jobs. Other
           than the DEFAULT strategy (ACLs local to the UJS and managed by
           the UJS sharing functions), currently the only other strategy is
           the 'kbaseworkspace' strategy, which consults the workspace
           service for authorization information.), parameter "param" of type
           "auth_param" (An authorization parameter. The contents of this
           parameter differ by auth_strategy, but for the workspace strategy
           it is the workspace id (an integer) as a string.), parameter
           "meta" of type "usermeta" (User provided metadata about a job.
           Arbitrary key-value pairs provided by the user.) -> mapping from
           String to String, parameter "desc" of type "job_description" (A
           job description string supplied by the reporting service. No more
           than 1000 characters.), parameter "res" of type "Results" (A
           pointer to job results. All arguments are optional. Applications
           should use the default shock and workspace urls if omitted.
           list<string> shocknodes - the shocknode(s) where the results can
           be found. No more than 1000 characters. string shockurl - the url
           of the shock service where the data was saved.  No more than 1000
           characters. list<string> workspaceids - the workspace ids where
           the results can be found. No more than 1000 characters. string
           workspaceurl - the url of the workspace service where the data was
           saved.  No more than 1000 characters. list<Result> - a set of job
           results. This format allows for specifying results at multiple
           server locations and providing a free text description of the
           result.) -> structure: parameter "shocknodes" of list of String,
           parameter "shockurl" of String, parameter "workspaceids" of list
           of String, parameter "workspaceurl" of String, parameter "results"
           of list of type "Result" (A place where the results of a job may
           be found. All fields except description are required. string
           server_type - the type of server storing the results. Typically
           either "Shock" or "Workspace". No more than 100 characters. string
           url - the url of the server. No more than 1000 characters. string
           id - the id of the result in the server. Typically either a
           workspace id or a shock node. No more than 1000 characters. string
           description - a free text description of the result. No more than
           1000 characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.list_jobs2',
            [params], self._service_ver, context)

    def list_jobs(self, services, filter, context=None):
        """
        List jobs. Leave 'services' empty or null to list jobs from all
        services.
        @deprecated list_jobs2
        :param services: instance of list of type "service_name" (A service
           name. Alphanumerics and the underscore are allowed.)
        :param filter: instance of type "job_filter" (A string-based filter
           for listing jobs. If the string contains: 'R' - running jobs are
           returned. 'C' - completed jobs are returned. 'N' - canceled jobs
           are returned. 'E' - jobs that errored out are returned. 'S' -
           shared jobs are returned. The string can contain any combination
           of these codes in any order. If the string contains none of the
           codes or is null, all self-owned jobs are returned. If only the S
           filter is present, all jobs are returned. The S filter is ignored
           for jobs not using the default authorization strategy.)
        :returns: instance of list of type "job_info" (Information about a
           job. @deprecated job_info2) -> tuple of size 14: parameter "job"
           of type "job_id" (A job id.), parameter "service" of type
           "service_name" (A service name. Alphanumerics and the underscore
           are allowed.), parameter "stage" of type "job_stage" (A string
           that describes the stage of processing of the job. One of
           'created', 'started', 'completed', 'canceled' or 'error'.),
           parameter "started" of type "timestamp" (A time in the format
           YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time to UTC in
           the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST time)
           2013-04-03T08:56:32+0000 (UTC time)), parameter "status" of type
           "job_status" (A job status string supplied by the reporting
           service. No more than 200 characters.), parameter "last_update" of
           type "timestamp" (A time in the format YYYY-MM-DDThh:mm:ssZ, where
           Z is the difference in time to UTC in the format +/-HHMM, eg:
           2012-12-17T23:24:06-0500 (EST time) 2013-04-03T08:56:32+0000 (UTC
           time)), parameter "prog" of type "total_progress" (The total
           progress of a job.), parameter "max" of type "max_progress" (The
           maximum possible progress of a job.), parameter "ptype" of type
           "progress_type" (The type of progress that is being tracked. One
           of: 'none' - no numerical progress tracking 'task' - Task based
           tracking, e.g. 3/24 'percent' - percentage based tracking, e.g.
           5/100%), parameter "est_complete" of type "timestamp" (A time in
           the format YYYY-MM-DDThh:mm:ssZ, where Z is the difference in time
           to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500 (EST
           time) 2013-04-03T08:56:32+0000 (UTC time)), parameter "complete"
           of type "boolean" (A boolean. 0 = false, other = true.), parameter
           "error" of type "boolean" (A boolean. 0 = false, other = true.),
           parameter "desc" of type "job_description" (A job description
           string supplied by the reporting service. No more than 1000
           characters.), parameter "res" of type "Results" (A pointer to job
           results. All arguments are optional. Applications should use the
           default shock and workspace urls if omitted. list<string>
           shocknodes - the shocknode(s) where the results can be found. No
           more than 1000 characters. string shockurl - the url of the shock
           service where the data was saved.  No more than 1000 characters.
           list<string> workspaceids - the workspace ids where the results
           can be found. No more than 1000 characters. string workspaceurl -
           the url of the workspace service where the data was saved.  No
           more than 1000 characters. list<Result> - a set of job results.
           This format allows for specifying results at multiple server
           locations and providing a free text description of the result.) ->
           structure: parameter "shocknodes" of list of String, parameter
           "shockurl" of String, parameter "workspaceids" of list of String,
           parameter "workspaceurl" of String, parameter "results" of list of
           type "Result" (A place where the results of a job may be found.
           All fields except description are required. string server_type -
           the type of server storing the results. Typically either "Shock"
           or "Workspace". No more than 100 characters. string url - the url
           of the server. No more than 1000 characters. string id - the id of
           the result in the server. Typically either a workspace id or a
           shock node. No more than 1000 characters. string description - a
           free text description of the result. No more than 1000
           characters.) -> structure: parameter "server_type" of String,
           parameter "url" of String, parameter "id" of String, parameter
           "description" of String
        """
        return self._client.call_method(
            'UserAndJobState.list_jobs',
            [services, filter], self._service_ver, context)

    def list_job_services(self, context=None):
        """
        List all job services. Note that only services with jobs owned by the
        user or shared with the user via the default auth strategy will be
        listed.
        :returns: instance of list of type "service_name" (A service name.
           Alphanumerics and the underscore are allowed.)
        """
        return self._client.call_method(
            'UserAndJobState.list_job_services',
            [], self._service_ver, context)

    def share_job(self, job, users, context=None):
        """
        Share a job. Sharing a job to the same user twice or with the job owner
        has no effect. Attempting to share a job not using the default auth
        strategy will fail.
        :param job: instance of type "job_id" (A job id.)
        :param users: instance of list of type "username" (Login name of a
           KBase user account.)
        """
        return self._client.call_method(
            'UserAndJobState.share_job',
            [job, users], self._service_ver, context)

    def unshare_job(self, job, users, context=None):
        """
        Stop sharing a job. Removing sharing from a user that the job is not
        shared with or the job owner has no effect. Attemping to unshare a job
        not using the default auth strategy will fail.
        :param job: instance of type "job_id" (A job id.)
        :param users: instance of list of type "username" (Login name of a
           KBase user account.)
        """
        return self._client.call_method(
            'UserAndJobState.unshare_job',
            [job, users], self._service_ver, context)

    def get_job_owner(self, job, context=None):
        """
        Get the owner of a job.
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of type "username" (Login name of a KBase user
           account.)
        """
        return self._client.call_method(
            'UserAndJobState.get_job_owner',
            [job], self._service_ver, context)

    def get_job_shared(self, job, context=None):
        """
        Get the list of users with which a job is shared. Only the job owner
        may access this method. Returns an empty list for jobs not using the
        default auth strategy.
        :param job: instance of type "job_id" (A job id.)
        :returns: instance of list of type "username" (Login name of a KBase
           user account.)
        """
        return self._client.call_method(
            'UserAndJobState.get_job_shared',
            [job], self._service_ver, context)

    def delete_job(self, job, context=None):
        """
        Delete a job. Will fail if the job is not complete. Only the job owner
        can delete a job.
        :param job: instance of type "job_id" (A job id.)
        """
        return self._client.call_method(
            'UserAndJobState.delete_job',
            [job], self._service_ver, context)

    def force_delete_job(self, token, job, context=None):
        """
        Force delete a job - will succeed unless the job has not been started.
        In that case, the service must start the job and then delete it, since
        a job is not "owned" by any service until it is started. Only the job
        owner can delete a job.
        :param token: instance of type "service_token" (A globus ID token
           that validates that the service really is said service.)
        :param job: instance of type "job_id" (A job id.)
        """
        return self._client.call_method(
            'UserAndJobState.force_delete_job',
            [token, job], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('UserAndJobState.status',
            [], self._service_ver, context)
