# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# These are the shared memory dictionaries used by the proxy_mgr module. The
# rbtrees that implement dictionarires are pretty compact, and we're just storing
# short strings and int/booleans so these numbers should be vastly more than we
# need
# These sized are semi arbitrary, shooting for at least something like 1000 entries
lua_shared_dict session_map 1m;
lua_shared_dict docker_map 2m;
lua_shared_dict token_cache 2m;
lua_shared_dict proxy_mgr 100k;
lua_shared_dict lock_map 2m;

# load lua files
lua_package_path "/home/vagrant/dockerstuff/narrative/docker/?;/home/vagrant/dockerstuff/narrative/docker/?.lua;;";
#lua_package_path "/home/ubuntu/narrative/docker/?;/home/ubuntu/narrative/docker/?.lua;;";
# initilize proxymgr - set shared dictionaries
init_by_lua '
    json = require("json")
    proxymgr = require("proxy_mgr")
    proxymgr:initialize{
        provision_count = 20,
        container_max = 5000,
        lock_name = "lock_map",
        session_map = ngx.shared.session_map,
        docker_map = ngx.shared.docker_map,
        token_cache = ngx.shared.token_cache,
        proxy_mgr = ngx.shared.proxy_mgr
    }
';
# start worker processes
init_worker_by_lua '
    proxymgr:check_marker()
    proxymgr:check_provisioner(0)
';

server {
	#listen   80; ## listen for ipv4; this line is default and implied
	#listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /usr/share/nginx/html;
	# index index.html index.htm;

	# Make site accessible from http://localhost/
	server_name localhost localhost.kbase.us;

	# Setup a DNS resolver
	resolver 8.8.8.8;
	# Dynamic proxy manager
	location /proxy_map {
	     default_type 'application/json';
	     allow 127.0.0.1;

	     set $uri_base '/proxy_map';
	     content_by_lua 'proxymgr:set_proxy()';

	}
    location /narrative_shutdown {
         default_type 'application/json';
         allow 127.0.0.1;

         set $uri_base '/narrative_shutdown';
         content_by_lua 'proxymgr:narrative_shutdown()';
    }

	location /narrative/ {
	     default_type 'text/plain';
  	     set $target '';
         access_by_lua 'proxymgr:use_proxy()';

         proxy_set_header X-Forwarded-Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-Server $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-NginX-Proxy true;
         proxy_pass http://$target;
         proxy_redirect off;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
         proxy_read_timeout 86400;
    }

	#location / {
#		# First attempt to serve request as file, then
#		# as directory, then fall back to index.html
#		#try_files $uri $uri/ /index.html;
#		# Uncomment to enable naxsi on this location
#		# include /etc/nginx/naxsi.rules
#	}


}

# Proxy	for the nginx remote api
server {
        listen 127.0.0.1:65000;
	#ssl on;
	#ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
	#ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

	#ssl_session_timeout 5m;

	#ssl_protocols SSLv3 TLSv1;
	#ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
	#ssl_prefer_server_ciphers on;

        server_name docker_remote;
	# auth_basic_user_file /etc/nginx/htpasswd;
        location / {
            proxy_pass http://unix:/var/run/docker.sock:/;
	#    auth_basic 'private';
        }
}

# Proxy for globus online - non-blocking lua code doesn't handle https, so
# we build an internal proxy to the Globus Nexus API endpoint
server {
	listen 127.0.0.1:65001;

	location / {
		proxy_pass https://nexus.api.globusonline.org/;
		proxy_set_header	Host	nexus.api.globusonline.org;
		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
	}
}
