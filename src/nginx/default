# You may add here your
# server {
#	...
# }
# statements for each of your virtual hosts to this file

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# These are the shared memory dictionaries used by the proxy_mgr module. The
# rbtrees that implement dictionarires are pretty compact, and we're just storing
# short strings and int/booleans so these numbers should be vastly more than we
# need
# These sized are semi arbitrary, shooting for at least something like 1000 entries
lua_shared_dict session_map 1m;
lua_shared_dict docker_map 2m;
lua_shared_dict token_cache 2m;
lua_shared_dict proxy_mgr 100k;
lua_shared_dict lock_map 2m;

# load lua files
lua_package_path "/home/vagrant/dockerstuff/narrative/docker/?;/home/vagrant/dockerstuff/narrative/docker/?.lua;;";
#lua_package_path "/home/ubuntu/narrative/docker/?;/home/ubuntu/narrative/docker/?.lua;;";
# initilize proxymgr - set shared dictionaries
init_by_lua '
    json = require("json")
    proxymgr = require("proxy_mgr")
    proxymgr:initialize{
        provision_count = 20,
        container_max = 5000,
        lock_name = "lock_map",
        session_map = ngx.shared.session_map,
        docker_map = ngx.shared.docker_map,
        token_cache = ngx.shared.token_cache,
        proxy_mgr = ngx.shared.proxy_mgr
    }
';
# start worker processes
init_worker_by_lua '
    proxymgr:check_marker()
    proxymgr:check_provisioner(0)
';

    server {
        listen 443;
        server_name next.kbase.us localhost;

        # this resolver is the internal rancher resolver
        resolver 169.254.169.250;

        # taken from next-www
        client_max_body_size 100000m;
        client_body_temp_path /tmp 1 2;
        proxy_max_temp_file_size 0;
        proxy_headers_hash_max_size 4096;
        proxy_headers_hash_bucket_size 4096;
        # added kkeller 30sep2015 for kbase-2777
        proxy_request_buffering off;

        ssl on;
        # Letsencrypt generated certs
        ssl_certificate /etc/letsencrypt/live/next.kbase.us/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/next.kbase.us/privkey.pem;

        ssl_session_timeout 5m;
        #ssl_protocols TLSv1;
        #ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
        ssl_prefer_server_ciphers on;

        root /kb/deployment;
        index home.html home.shtml;

    location /search  {
               internal;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-Proto $scheme;
                add_header Access-Control-Allow-Origin "*";
                # Limits on rows/start (by number of chars) to prevent deep paging craziness
                if ($arg_start ~ ....+) {
                        return 403;
                }
                if ($arg_rows ~ ....+) {
                        return 403;
                }

        
                #Explicitly list args to disallow
                if ($arg_qt != "") {
                        return 403;
                }
                
                # Disallow specific params that begin with a pattern, ie stream.file stream.body etc
                if ($args ~ [\&\?]stream.*?=(.*)) {
                        return 403;
                }
               proxy_pass http://140.221.43.241:7077;
               #proxy_pass http://wellner.org;
       }

       location /bad_request {
               internal;
               content_by_lua '
               ngx.log(ngx.ERR, "badrequest")
               ';

               return 404;
       }

       location /solrauth {
               default_type text/html;
        #the below optimization will allow nginx to spend less time
        #executing lua code for get requests as only certain IP
        #ip addresses will be allowed. but the lua code is necessary 
        #for other requests and doesn't get executed, returning a 405
        #with this block and the lua code cannot reside in the block
        #so for now, the lua code evaluates all requests
        #this block also cannot contain rewrite
                #limit_except GET {
                #        allow 140.221.78.15;
                #        allow 130.202.232.1;
                #        allow 130.202.135.30;
                #        allow 140.221.11.197;
                #        allow 73.209.131.219;
                #        allow 128.3.56.130;
                #        allow 128.3.56.251;
                #        allow 177.231.6.11;
                #        deny all;
        #}
               content_by_lua '
               local session_id, err = proxymgr:get_session()
               local hdrs = ngx.req.get_headers()
               local reqType = ngx.var.request_method
               local token = {}
               ngx.log(ngx.ERR, string.format("id = %s",session_id))
               local capture = "/search" .. string.sub(ngx.var.uri, 10)
               if ngx.var.QUERY_STRING ~= nil then
                 capture = capture .. "?" .. ngx.var.QUERY_STRING
               end
               if reqType == "POST" or reqType == "DELETE"
               then
                       if (session_id == nil or (session_id ~= "rw2" and session_id ~= "dan")) then
                               ngx.log(ngx.ERR, "no auth found")
                               res = ngx.location.capture("/bad_request")
                       else
                               ngx.log(ngx.ERR, "auth found")
                               ngx.req.read_body()
                               if reqType == "POST" then
                                 res = ngx.location.capture(capture, {body=ngx.var.request_body, method = ngx.HTTP_POST})
                               else
                                 res = ngx.location.capture(capture, {body=ngx.var.request_body, method = ngx.HTTP_DELETE})
                               end
                       end
               else
                       ngx.log(ngx.ERR, "get request")
                       local capture = "/search" .. string.sub(ngx.var.uri, 10)
                       if ngx.var.QUERY_STRING ~= nil then
                         capture = capture .. "?" .. ngx.var.QUERY_STRING
                       end
                       ngx.log(ngx.ERR, capture)
                       res = ngx.location.capture(capture)
               end
               ngx.say(res.body)
               ';
        }

        location / {
            root /kb/deployment/services/kbase-ui;
            index index.html;
            #ssi on;
            ssi_silent_errors off;
            allow all;

        }

        # add cdn location
        location /cdn {
            alias /data/cdn/;
            autoindex on;
            autoindex_format json;
            types {
                application/javascript js;
                text/plain map;
                text/css css;
            }
        }

        location /auth/ {
            proxy_pass http://auth2:8080/;
            proxy_cookie_path /login /auth/login;
            proxy_cookie_path /link /auth/link;
            }
        # Dynamic service rule.  This usees rancher DNS names to redirect
        location ~ /dynserv/(.+) {
            proxy_pass http://$1:5000/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Dynamic proxy manager
        location /proxy_map {
            default_type 'application/json';
            allow 127.0.0.1;
            deny all;

            set $uri_base '/proxy_map';
            content_by_lua 'proxymgr:set_proxy()';

        }
        # Shutdown utility
        location /narrative_shutdown {
            default_type 'application/json';
            allow 127.0.0.1;

            set $uri_base '/narrative_shutdown';
            content_by_lua 'proxymgr:narrative_shutdown()';

        }
        location /narrative/ws1 {
            return  301 https://next.kbase.us/narrativelegacy/ws1;
                }
        location /narrative/ws.379.obj.1 {
            return  301 https://next.kbase.us/narrativelegacy/ws.379.obj.1;
                }

        # Narrative redirect rule
        location /narrative/ {
            default_type 'text/plain';
            error_page 401 /index.html;
            set $target '';

            access_by_lua '
                    proxymgr:use_proxy()
            ';
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://$target;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }
        location /narrativelegacy/ {
            default_type 'text/plain';
            error_page 401 /index.html;
            set $target '';

            access_by_lua '
                    proxymgr2:use_proxy()
            ';
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-Server $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            proxy_pass http://$target;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
        }

        # Start of core service proxies
        #
#       location /services/authorization {
#           # host and port to fastcgi server
#           rewrite /services/authorization(.*) $1 break;
#           fastcgi_pass authorization:7039;
#           fastcgi_param PATH_INFO $fastcgi_script_name;
#           fastcgi_param REQUEST_METHOD $request_method;
#           fastcgi_param QUERY_STRING $query_string;
#           fastcgi_param CONTENT_TYPE $content_type;
#           fastcgi_param CONTENT_LENGTH $content_length;
#           fastcgi_param SERVER_NAME $server_name;
#           fastcgi_param SERVER_PORT $server_port;
#           fastcgi_param SERVER_PROTOCOL $server_port;
#           fastcgi_pass_header Authorization;
#           fastcgi_intercept_errors off;
#           fastcgi_param REMOTE_ADDR $remote_addr;
#       }
        # Use production auth for now
        location /services/authorization {
            proxy_pass https://kbase.us/services/authorization;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/shock-api {
            proxy_pass http://shock:7044/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/awe-api {
            proxy_pass http://awe:7107/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/userandjobstate {
            proxy_pass http://ujs:7083/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/ws {
            proxy_pass http://ws:7058/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/handlemngr {
            proxy_pass http://handlemngr:9001/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/handle_service {
            proxy_pass http://handleservice:7109/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/handleservice {
            proxy_pass http://handleservice:7109/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/narrative_method_store {
            proxy_pass http://narrativemethodstore:7125/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/catalog {
            proxy_pass http://catalog:5000/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/service_wizard {
            proxy_pass http://servicewizard:5000/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/narrativejobproxy {
            allow 172.17.0.0/16;
            deny all;
            proxy_pass http://narrativejobproxy:7068/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/njs_wrapper {
            proxy_pass http://njswrapper:8200/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/user_profile {
            proxy_pass http://userprofile:7126/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/data_import_export {
            proxy_pass http://dataimportexport:8200/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        location /services/kb-ftp-api/v0/ {
            proxy_pass http://ftp.kbase.us:3001/;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    # End of https next server block

server {
	#listen   80; ## listen for ipv4; this line is default and implied
	#listen   [::]:80 default ipv6only=on; ## listen for ipv6

	root /usr/share/nginx/html;
	# index index.html index.htm;

	# Make site accessible from http://localhost/
	server_name localhost localhost.kbase.us;

	# Setup a DNS resolver
	resolver 8.8.8.8;
	# Dynamic proxy manager
	location /proxy_map {
	     default_type 'application/json';
	     allow 127.0.0.1;

	     set $uri_base '/proxy_map';
	     content_by_lua 'proxymgr:set_proxy()';

	}
    location /narrative_shutdown {
         default_type 'application/json';
         allow all;

         set $uri_base '/narrative_shutdown';
         content_by_lua 'proxymgr:narrative_shutdown()';
    }
    location /check_narrative/ {
       	default_type 'text/plain';
       	set $target '';
       	access_by_lua 'proxymgr:check_proxy()';

        proxy_set_header X-Forwarded-Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-Server $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-NginX-Proxy true;
         proxy_pass http://$target;
         proxy_redirect off;
         proxy_http_version 1.1;
         # proxy_set_header Upgrade $http_upgrade;
         # proxy_set_header Connection "upgrade";
         proxy_read_timeout 86400;
    }
    location /narrative/ {
        default_type 'text/plain';
        set $target '';
         access_by_lua 'proxymgr:use_proxy()';

         proxy_set_header X-Forwarded-Host $host;
         proxy_set_header X-Real-IP $remote_addr;
         proxy_set_header X-Forwarded-Server $host;
         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
         proxy_set_header Host $http_host;
         proxy_set_header X-NginX-Proxy true;
         proxy_pass http://$target;
         proxy_redirect off;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
         proxy_read_timeout 86400;
    }

	#location / {
#		# First attempt to serve request as file, then
#		# as directory, then fall back to index.html
#		#try_files $uri $uri/ /index.html;
#		# Uncomment to enable naxsi on this location
#		# include /etc/nginx/naxsi.rules
#	}


}

# Proxy	for the nginx remote api
server {
        listen 127.0.0.1:65000;
	#ssl on;
	#ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
	#ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;

	#ssl_session_timeout 5m;

	#ssl_protocols SSLv3 TLSv1;
	#ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv3:+EXP;
	#ssl_prefer_server_ciphers on;

        server_name docker_remote;
	# auth_basic_user_file /etc/nginx/htpasswd;
        location / {
            proxy_pass http://unix:/var/run/docker.sock:/;
	#    auth_basic 'private';
        }
}

# Proxy for globus online - non-blocking lua code doesn't handle https, so
# we build an internal proxy to the Globus Nexus API endpoint
server {
	listen 127.0.0.1:65001;

	location / {
		proxy_pass https://nexus.api.globusonline.org/;
		proxy_set_header	Host	nexus.api.globusonline.org;
		proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
	}
}
