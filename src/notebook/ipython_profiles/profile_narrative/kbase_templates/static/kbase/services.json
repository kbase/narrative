{"KBase Commands": {"methods": [{"description": "Execute given KBase command.", "title": "Execute KBase Command", "visible": true, "returns": {"output0": {"type": "string", "description": "Results"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DisplayTextWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Command", "type": "string", "description": "command to run"}}}}, {"description": "View available KBase commands.", "title": "View KBase Commands", "visible": true, "returns": {"output0": {"type": "string", "description": "Command List"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "CategoryViewWidget"}, "parameters": {}}}, {"description": "View your files in temp invocation file space.", "title": "View Files", "visible": true, "returns": {"output0": {"type": "string", "description": "File List"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param0": {"default": "name", "ui_name": "Sort By", "type": "string", "description": "sort files by name or date, default is name"}}}}, {"description": "View a .png image file from temp invocation file space.", "title": "View PNG File", "visible": true, "returns": {"output0": {"type": "string", "description": "File List"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param0": {"default": "", "ui_name": "File", "type": "string", "description": "file to display"}}}}, {"description": "Download a file from temp invocation file space.", "title": "Download File", "visible": true, "returns": {"output0": {"type": "string", "description": "Status"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DownloadFileWidget"}, "parameters": {"param0": {"default": "", "ui_name": "File", "type": "string", "description": "file to download"}}}}, {"description": "Upload a file to temp invocation file space.", "title": "Upload File", "visible": true, "returns": {"output0": {"type": "string", "description": "Status"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "UploadFileWidget"}, "parameters": {}}}, {"description": "Rename a file in temp invocation file space.", "title": "Rename File", "visible": true, "returns": {"output0": {"type": "string", "description": "Status"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DisplayTextWidget"}, "parameters": {"param1": {"default": "", "ui_name": "New", "type": "string", "description": "new filename"}, "param0": {"default": "", "ui_name": "Old", "type": "string", "description": "old filename"}}}}, {"description": "Delete a file from temp invocation file space.", "title": "Delete File", "visible": true, "returns": {"output0": {"type": "string", "description": "Status"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DisplayTextWidget"}, "parameters": {"param0": {"default": "", "ui_name": "File", "type": "string", "description": "file to delete"}}}}], "version": ["0", "0", "1"], "name": "KBase Commands", "desc": "Functions for executing KBase commands and manipulating the results"}, "GWAS Services": {"methods": [{"description": "Perform filtering on Minor allele frequency (MAF). Minor allele frequency (MAF) refers to the frequency at which the least common <a href=\"http://en.wikipedia.org/wiki/Allele\">allele</a> occurs in a given population.", "title": "Prepare Variation data for GWAS", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace ID of filtered data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param3": {"default": "", "ui_name": "comment", "type": "string", "description": "Comment"}, "param2": {"default": "", "ui_name": "out", "type": "KBaseGwasData.GwasPopulationVariation", "description": "Population variation, filtered"}, "param1": {"default": "", "ui_name": "variation", "type": "KBaseGwasData.GwasPopulationVariation", "description": "Population variation object"}, "param0": {"default": 0.0, "ui_name": "maf", "type": "a number", "description": "Minor allele frequency"}}}}, {"description": "Computes the n by n kinship matrix for a set of n related subjects. The kinship matrix defines pairwise genetic relatedness among individuals and is estimated by using all genotyped markers. This requires the filtered SNPs as input.", "title": "Calculate Kinship matrix", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param2": {"default": "", "ui_name": "comment", "type": "string", "description": "Comment"}, "param1": {"default": "", "ui_name": "out", "type": "KBaseGwasData.GwasPopulationKinship", "description": "Computed Kinship matrix"}, "param0": {"default": "", "ui_name": "filtered_variation", "type": "KBaseGwasData.GwasPopulationVariation", "description": "Population variation, filtered"}}}}, {"description": "Computes association between each SNP and a trait of interest that has been scored across a large number of individuals. This method takes Filtered SNP object, kinship matrix, trait object as input and computes association.", "title": "Run GWAS analysis", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param3": {"default": "", "ui_name": "out", "type": "KBaseGwasData.GwasTopVariations", "description": "Output"}, "param2": {"default": "", "ui_name": "traits", "type": "KBaseGwasData.GwasPopulationTrait", "description": "Trait object id"}, "param1": {"default": "", "ui_name": "kinship_matrix", "type": "KBaseGwasData.GwasPopulationKinship", "description": "Kinship matrix object id"}, "param0": {"default": "", "ui_name": "genotype", "type": "KBaseGwasData.GwasPopulationVariation", "description": "Population variation object"}}}}, {"description": "Widget to visualize top SNPs related to a trait on the manhattan plot. On the X-axis of the plot are all contigs, and on the Y-axis is -log10(pvalue) of SNPs-association for the trait.", "title": "Trait Manhattan Plot", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace objectID of gwas results"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "Manhattan"}, "parameters": {"param1": {"default": "", "ui_name": "gwas_result", "type": "KBaseGwasData.GwasTopVariations", "description": "GWAS analysis (MLM) result"}, "param0": {"default": "", "ui_name": "workspaceID", "type": "string", "description": "workspaceID (use current if empty)"}}}}, {"description": "This method takes the top SNPs obtained after GWAS analysis as input (TopVariations) object, -log (pvalue) cutoff and a distance parameter as input. For each significant SNP that passes the p-value cutoff, genes are searched in the window specified by the distance parameter.", "title": "GWAS Variation To Genes", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace objectID of gwas results"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param6": {"default": "", "ui_name": "fs_out", "type": "KBaseSearch.FeatureSet", "description": "Output FeatureSet workspace object name"}, "param5": {"default": "", "ui_name": "gl_out", "type": "KBaseGwasData.GwasGeneList", "description": "Output GwasGeneLint workspace object name"}, "param4": {"default": "10000", "ui_name": "distance", "type": "a number", "description": "Distance in bp around SNP to look for genes"}, "param3": {"default": "4", "ui_name": "pmin", "type": "a number", "description": "Minimum pvalue (-log10)"}, "param2": {"default": "100", "ui_name": "num2snps", "type": "a number", "description": "Number to snps"}, "param1": {"default": "", "ui_name": "gwasObjectID", "type": "KBaseGwasData.GwasTopVariations", "description": "GWAS analysis MLM result object"}, "param0": {"default": "", "ui_name": "workspaceID", "type": "string", "description": "Workspace (use current if empty)"}}}}, {"description": "This method displays a gene list along with functional annotation in a table.", "title": "Gene table", "visible": true, "returns": {"output0": {"type": "string", "description": "Rows for display"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param0": {"default": "", "ui_name": "obj_id", "type": "KBaseGwasData.GwasGeneList", "description": "Gene List workspace object identifier."}}}}, {"description": "This method displays a gene list along with functional annotation in a table.", "title": "GeneList to Networks", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param1": {"default": "", "ui_name": "out_id", "type": "KBaseNetworks.Network", "description": "Output Networks object identifier"}, "param0": {"default": "", "ui_name": "obj_id", "type": "KBaseGwasData.GwasGeneList", "description": "Gene List workspace object identifier."}}}}, {"description": "This method displays a FeatureSet gene list along with functional annotation in a table.", "title": "FeatureSet table", "visible": true, "returns": {"output0": {"type": "string", "description": "Rows for display"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param0": {"default": "", "ui_name": "obj_id", "type": "KBaseSearch.FeatureSet", "description": "FeatureSet workspace object identifier."}}}}, {"description": "This method converts user gene list to FeatureSet typed object.", "title": "User genelist to FeatureSet", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param1": {"default": "", "ui_name": "out_id", "type": "KBaseSearch.FeatureSet", "description": "Output FeatureSet object identifier"}, "param0": {"default": "", "ui_name": "gene_ids", "type": "string", "description": "List of genes (comma separated)"}}}}, {"description": "This method annotate GO terms and execute GO enrichment test", "title": "FeatureSet GO Analysis", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param4": {"default": "", "ui_name": "out_id", "type": "KBaseSearch.FeatureSet", "description": "Output FeatureSet object identifier"}, "param3": {"default": "", "ui_name": "domain", "type": "string", "description": "Domain list (comma separated, biological_process,molecular_function,cellular_component)"}, "param2": {"default": "", "ui_name": "ec", "type": "string", "description": "Evidence code list (comma separated, IEA,ISS,IDA,IEP,IPI,RCA ..)"}, "param1": {"default": "", "ui_name": "p_value", "type": "string", "description": "p-value cutoff"}, "param0": {"default": "", "ui_name": "feature_set_id", "type": "KBaseSearch.FeatureSet", "description": "FeatureSet workspace object id"}}}}, {"description": "Query all available network data in KBase central store.", "title": "FeatureSet to Networks", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param1": {"default": "", "ui_name": "out_id", "type": "KBaseNetworks.Network", "description": "Output Networks object identifier"}, "param0": {"default": "", "ui_name": "feature_set_id", "type": "KBaseSearch.FeatureSet", "description": "FeatureSet workspace object id"}}}}, {"description": "This method annotate GO terms and execute GO enrichment test", "title": "FeatureSet Network Enrichment", "visible": true, "returns": {"output0": {"type": "string", "description": "New workspace object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param4": {"default": "", "ui_name": "out_id", "type": "KBaseSearch.FeatureSet", "description": "Output FeatureSet object identifier"}, "param3": {"default": "", "ui_name": "ref_network", "type": "KBaseNetworks.Network", "description": "Reference Network object name"}, "param2": {"default": "", "ui_name": "ref_wsid", "type": "string", "description": "Reference Network workspace id (optional, default to current workspace)"}, "param1": {"default": "", "ui_name": "p_value", "type": "string", "description": "p-value cutoff"}, "param0": {"default": "", "ui_name": "feature_set_id", "type": "KBaseSearch.FeatureSet", "description": "FeatureSet workspace object id"}}}}, {"description": "This widget visualizes network objects generated by FeatureSet to Networks.", "title": "Gene network", "visible": true, "returns": {"output0": {"type": "string", "description": "Rows for display"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePlantsNetworkNarrative"}, "parameters": {"param0": {"default": "", "ui_name": "nto", "type": "KBaseNetworks.Network", "description": "Network Typed Object"}}}}], "version": ["0", "0", "1"], "name": "GWAS Services", "desc": "Plants GWAS service"}, "Plants Coexpression Service": {"methods": [{"description": "Filter expression table to differentially expressed genes", "title": "Filter Differentially Expressed Genes", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param3": {"default": "", "ui_name": "p_value", "type": "string", "description": "p-value cutoff (choose this or num_genes above)"}, "param2": {"default": "", "ui_name": "num_genes", "type": "string", "description": "Target number of genes (choose this or p-value below)"}, "param1": {"default": "", "ui_name": "filtering_method", "type": "string", "description": "Filtering method ('anova' for ANOVA or 'lor' for log-odd ratio)"}, "param0": {"default": "", "ui_name": "series_obj_id", "type": "KBaseExpression.ExpressionSeries", "description": "Object id of the expression series data"}}}}, {"description": "Construct co-expression network and a set of densely interconnected clusters in co-expression network based on expression table object", "title": "Construct Co-expression Network and Clusters", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param4": {"default": "", "ui_name": "num_module", "type": "string", "description": "The number of cluster"}, "param3": {"default": "", "ui_name": "cut_off", "type": "string", "description": "Lower cutoff to keep edges"}, "param2": {"default": "", "ui_name": "clust_method", "type": "string", "description": "Clustering algorithm ('hclust' for hierachical clustering or 'WGNCA')"}, "param1": {"default": "", "ui_name": "net_method", "type": "string", "description": "Network construction algorithm ('simple' for Pearson correlation coefficient or 'WGCNA')"}, "param0": {"default": "", "ui_name": "series_obj_id", "type": "KBaseExpression.ExpressionSeries", "description": "Object id of the expression Series data"}}}}, {"description": "Add Gene Ontology annotation to network gene nodes", "title": "Annotate Network Genes with Ontology Terms", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param0": {"default": "", "ui_name": "net_obj_id", "type": "KBaseNetworks.Network", "description": "Network object id"}}}}, {"description": "Identify Gene Ontology terms enriched in individual network clusters", "title": "Annotate Clusters with Enriched Ontology Terms", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param3": {"default": "", "ui_name": "domain", "type": "string", "description": "Domain list (comma separated, biological_process, ...)"}, "param2": {"default": "", "ui_name": "ec", "type": "string", "description": "Evidence code list (comma separated, IEA, ...)"}, "param1": {"default": "", "ui_name": "p_value", "type": "string", "description": "p-value cutoff"}, "param0": {"default": "", "ui_name": "net_obj_id", "type": "KBaseNetworks.Network", "description": "Cluster object id"}}}}, {"description": "Construct subnetwork connecting genes in user-selected clusters", "title": "Construct Subnetwork from User Selected Clusters", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePlantsNTO"}, "parameters": {"param1": {"default": "", "ui_name": "cluster_id_list", "type": "string", "description": "Comma-separated list of user-selected cluster ids"}, "param0": {"default": "", "ui_name": "net_obj_id", "type": "KBaseNetworks.Network", "description": "Cluster object id"}}}}, {"description": "Display information for network clusters.", "title": "Display Functional Modules", "visible": true, "returns": {"output0": {"type": "string", "description": "Rows for display"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePlantsNTO"}, "parameters": {"param0": {"default": "", "ui_name": "nto", "type": "KBaseNetworks.Network", "description": "Network Typed Object"}}}}], "version": ["0", "0", "1"], "name": "Plants Coexpression Service", "desc": "Plants Coexpression service"}, "Microbes Services": {"methods": [{"description": "Use the AssemblyRAST service to assemble a set of contigs from sequenced reads. This starts a job that might run for several hours. When it finishes, the assembled ContigSet will be stored in your data space. [1]", "title": "Simplified Assembly From Reads", "visible": false, "returns": {"output0": {"type": "string", "description": "An assembly job"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "AssemblyWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Assembly Input file", "type": "KBaseAssembly.AssemblyInput", "description": "A list of files with read information [1.1]"}}}}, {"description": "This assembles a ContigSet into a Genome object in your workspace. This should be run before trying to annotate a Genome. [2]", "title": "Assemble Genome from Fasta", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Assembled output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, an ID will be chosen randomly. [2.2]"}, "param0": {"default": "", "ui_name": "Contig File ID", "type": "string", "description": "A FASTA file with contig data [2.1]"}}}}, {"description": "Upload a ContigSet from FASTA-file into your workspace. This function should be run before wrapping the ContigSet as a Genome object. [19]", "title": "Upload Contigs (FASTA-file)", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ContigSetUploadWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Contig Set Object ID", "type": "KBaseGenomes.ContigSet", "description": "Output contig set ID. If empty, an ID will be chosen randomly. [19.1]"}}}}, {"description": "Upload a Genome and ContigSet from GBK-file (or files in case of zip) into your workspace. This function should be run before adding KBase annotations to this Genome. [25]", "title": "Upload Genome (GBK-file)", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeUploadWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Genome Object ID", "type": "KBaseGenomes.Genome", "description": "Output Genome ID. If empty, an ID will be chosen randomly. [25.1]"}}}}, {"description": "Import a Genome and ContigSet from NCBI into your workspace. [26]", "title": "Import NCBI Genome", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": "NcbiGenomeImportInput", "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Genome Object ID", "type": "KBaseGenomes.Genome", "description": "Output Genome ID. If empty, an ID will be chosen automatically. [26.2]"}, "param0": {"default": "", "ui_name": "NCBI Genome Name", "type": "string", "description": "Name of public genome accessible on NCBI FTP. [26.1]"}}}}, {"description": "Build a Genome object from a ContigSet, creating structural and functional annotations. The annotation job may run for an hour or longer. When the annotation job finishes, the annotated Genome object will be stored in your workspace. [3]", "title": "Annotate ContigSet", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param3": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, an ID will be chosen randomly. [3.3]"}, "param2": {"default": "", "ui_name": "Genetic Code", "type": "string", "description": "enter the genetic code for your new genome (default is 11) [3.2]"}, "param1": {"default": "", "ui_name": "Scientific Name", "type": "string", "description": "enter the scientific name to assign to your new genome [3.2]"}, "param0": {"default": "", "ui_name": "Contig Set Object", "type": "KBaseGenomes.ContigSet", "description": "An object with contig data [3.1]"}}}}, {"description": "Annotate a Genome object with structural and functional gene annotations. The annotation job may run for an hour or longer. When the annotation job finishes, the annotated Genome object will be stored in your workspace. [4]", "title": "Annotate Genome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Annotated output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, annotation will be added into original genome object. [4.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "Source genome ID [4.1]"}}}}, {"description": "Add KBase annotations to a genome.  This function will start a job that might run for an hour or longer. When the job finishes, the Genome with KBase annotations will be stored in your workspace. [21]", "title": "Add KBase Annotation", "visible": false, "returns": {"output0": {"type": "a genome", "description": "Annotated output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, annotation will be added into original genome object. [21.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "Source genome ID [21.1]"}}}}, {"description": "View and explore a Genome object in your workspace. [5]", "title": "View Genome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Same genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param0": {"default": "", "ui_name": "Genome", "type": "KBaseGenomes.Genome", "description": "select the genome you want to view [5.1]"}}}}, {"description": "View and explore the KBase Subsystem categories associated with genes in your genome.", "title": "View KBase Subsystem Data", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Same genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "KBaseSEEDFunctions"}, "parameters": {"param0": {"default": "", "ui_name": "Genome", "type": "KBaseGenomes.Genome", "description": "select the genome you want to view"}}}}, {"description": "Given an annotated Genome, build a draft metabolic model which can be analyzed with FBA. [6]", "title": "Build a Metabolic Model", "visible": false, "returns": {"output0": {"type": "KBaseFBA.FBAModel", "description": "Generated Metabolic Model ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param1": {"default": "", "ui_name": "Output Metabolic Model Name", "type": "KBaseFBA.FBAModel", "description": "select a name for the generated metabolic model (optional) [6.2]"}, "param0": {"default": "", "ui_name": "Genome Name", "type": "KBaseGenomes.Genome", "description": "Source genome name [6.1]"}}}}, {"description": "Functionality to assign a new genome to an imported model. A proteome comparison is done between the orginal model genome and the new desired genome. Metoblic reactions from original model get mapped to genes in the new genome'.  [19]", "title": "Translate Model to New Genome", "visible": false, "returns": {"output0": {"type": "KBaseFBA.FBAModel", "description": "Output Translated Model"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param3": {"default": "", "ui_name": "Translated Model ID", "type": "KBaseFBA.FBAModel", "description": "ID to which translated model should be saved"}, "param2": {"default": "", "ui_name": "Remove No-gene Reactions", "type": "string", "description": "specify \"yes\" if reactions with no genes should be removed"}, "param1": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [19.3]"}, "param0": {"default": "", "ui_name": "FBA Model ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from first genome [19.1]"}}}}, {"description": "Bring up a detailed view of your phenotype set within the narrative.", "title": "View Phenotype Set", "visible": false, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSet", "description": "Phenotype Set Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePhenotypeSet"}, "parameters": {"param0": {"default": "", "ui_name": "Phenotype Set", "type": "KBasePhenotypes.PhenotypeSet", "description": "the phenotype set to view"}}}}, {"description": "Simulate the growth of a model on a phenotype set.", "title": "Simulate growth on a Phenotype Set", "visible": false, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Generated Phenotype Simulation Set ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseSimulationSet"}, "parameters": {"param2": {"default": "", "ui_name": "Phenotype Simulation Result", "type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Name for result of phenotype simulation (optional)"}, "param1": {"default": "", "ui_name": "Phenotype Set", "type": "KBasePhenotypes.PhenotypeSet", "description": "Phenotype Set"}, "param0": {"default": "", "ui_name": "FBA Model", "type": "KBaseFBA.FBAModel", "description": "FBA model"}}}}, {"description": "Bring up a detailed view of your Phenotype Simulation results within the narrative.", "title": "View Phenotype Simulation Results", "visible": false, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Phenotype Simulation Set Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseSimulationSet"}, "parameters": {"param0": {"default": "", "ui_name": "Phenotype Simulation Set", "type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "the phenotype results to view"}}}}, {"description": "Import genomes from the RAST annotation pipeline.", "title": "Import RAST Genomes", "visible": false, "returns": {"output0": {"type": "string", "description": "Uploaded RAST Genome"}}, "type": "object", "properties": {"widgets": {"input": "rastGenomeImportInput", "output": "GenomeAnnotation"}, "parameters": {"param2": {"default": "", "ui_name": "RAST Password", "type": "string", "description": "Your RAST Password"}, "param1": {"default": "", "ui_name": "RAST Username", "type": "string", "description": "Your RAST Username"}, "param0": {"default": "", "ui_name": "RAST Genome IDs", "type": "string", "description": "list of genome ids (comma seperated)"}}}}, {"description": "Import genomes from the pubSEED database.", "title": "Import SEED Genomes", "visible": false, "returns": {"output0": {"type": "string", "description": "Uploaded SEED Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param0": {"default": "", "ui_name": "SEED Genome IDs", "type": "string", "description": "list of genome ids (comma seperated)"}}}}, {"description": "Rapidly compute gene families for a set of phylogenetically close genomes", "title": "Compute Pangenome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Pangenome Object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param1": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID for output pangenome"}, "param0": {"default": "", "ui_name": "Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "a Genome Set to compute pangenome for"}}}}, {"description": "Show Pangenome object. [29]", "title": "View Pangenome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Compare Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID of pangenome object [29.1]"}}}}, {"description": "Export gene sets from Pangenome as external FeatureSet objects. [26]", "title": "Export genes sets from Pangenome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Compare Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID of pangenome object [26.1]"}}}}, {"description": "Compare two or models and compute core, noncore unique reactions, functional roles with their subsystem information.", "title": "Compare Models", "visible": false, "returns": {"output0": {"type": "string", "description": "Uploaded Model Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "compmodels"}, "parameters": {"param0": {"default": "", "ui_name": "Model IDs", "type": "KBaseFBA.FBAModel", "description": "list of model ids (comma seperated)"}}}}, {"description": "Genome Comparison analysis based on the PanGenome input.", "title": "Genome Comparison from Pangenome", "visible": false, "returns": {"output0": {"type": "KBaseGenomes.GenomeComparison", "description": "Uploaded Genome Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "compgenomePa"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "Pangenome ID"}}}}, {"description": "Bring up a detailed view of your metabolic model within the narrative. [7]", "title": "View Metabolic Model Details", "visible": false, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to view [7.1]"}}}}, {"description": "Delete reactions from selected Metabolic Model", "title": "Delete Reaction", "visible": false, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param2": {"default": "", "ui_name": "Edited Model", "type": "KBaseFBA.FBAModel", "description": "ID of model with deleted reactions"}, "param1": {"default": "", "ui_name": "Reaction(s) ID(s)", "type": "string", "description": "Reactions to be deleted. Add multiple reactions seperated by ;"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to edit"}}}}, {"description": "Assemble a set of compounds to use as a media set for performing FBA on a metabolic model. [8]", "title": "Build Media", "visible": false, "returns": {"output0": {"type": "KBaseBiochem.Media", "description": "Metadata from new Media object"}}, "type": "object", "properties": {"widgets": {"input": "kbaseBuildMediaInput", "output": "kbaseMediaViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Media ID", "type": "KBaseBiochem.Media", "description": "Base media type [8.1]"}}}}, {"description": "Bring up a detailed view of a Media set within the narrative. [9]", "title": "View Media", "visible": false, "returns": {"output0": {"type": "KBaseBiochem.Media", "description": "A Media object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMediaViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Media ID", "type": "KBaseBiochem.Media", "description": "Media type [9.1]"}}}}, {"description": "Run Flux Balance Analysis on a metabolic model. [10]", "title": "Run Flux Balance Analysis", "visible": false, "returns": {"output0": {"type": "string", "description": "something"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseFbaTabsNarrative"}, "parameters": {"param11": {"default": "", "ui_name": "PROM constraint", "type": "KBaseFBA.PromConstraint", "description": "specify the PROM constraint to apply for regulation of the metabolic model  (optional) [10.12]"}, "param10": {"default": "no", "ui_name": "All rxns reversible?", "type": "string", "description": "set to 'yes' or '1' to allow all model reactions to be reversible (optional) [10.11]"}, "param7": {"default": "0", "ui_name": "Default Max Uptake", "type": "string", "description": "specify the default maximum nutrient uptake flux (optional) [10.8]"}, "param6": {"default": "-100", "ui_name": "Default Min Uptake", "type": "string", "description": "specify the default minumum nutrient uptake flux (optional) [10.7]"}, "param5": {"default": "100", "ui_name": "Default Maximum flux", "type": "string", "description": "specify the default maximum intracellular flux (optional) [10.6]"}, "param4": {"default": "", "ui_name": "Reaction Knockouts", "type": "string", "description": "specify reaction knockouts by reaction ID delimited by semicolons(;) (optional) [10.5]"}, "param3": {"default": "", "ui_name": "Gene Knockouts", "type": "string", "description": "specify gene knockouts by the gene's feature ID delimited by semicolons(;) (optional) [10.4]"}, "param2": {"default": "", "ui_name": "Output FBA Result Name", "type": "KBaseFBA.FBA", "description": "select a name for the FBA result object (optional) [10.3]"}, "param1": {"default": "", "ui_name": "Media", "type": "KBaseBiochem.Media", "description": "the media condition in which to run FBA (optional, default is an artificial complete media) [10.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model you wish to run [10.1]"}, "param9": {"default": "yes", "ui_name": "Maximize Objective?", "type": "string", "description": "set to 'no' or '0' to run FBA without maximizing the objective function (optional) [10.10]"}, "param8": {"default": "no", "ui_name": "Minimize Flux?", "type": "string", "description": "set to 'yes' or '1' to run FBA by minimizing flux (optional) [10.9]"}}}}, {"description": "Bring up a detailed view of your FBA result within the narrative. [11]", "title": "View FBA Result Details", "visible": false, "returns": {"output0": {"type": "string", "description": "something"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseFbaTabsNarrative"}, "parameters": {"param0": {"default": "", "ui_name": "FBA Result", "type": "KBaseFBA.FBA", "description": "the FBA Result to view [11.1]"}}}}, {"description": "Compare two FBA results, showing differences in fluxes for reactions.", "title": "Compare FBA Results", "visible": false, "returns": {"output0": {"type": "string", "description": "FBA Result Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseCompareFBAs"}, "parameters": {"param1": {"default": "", "ui_name": "Second FBA result", "type": "KBaseFBA.FBA", "description": "Second FBA result"}, "param0": {"default": "", "ui_name": "First FBA result", "type": "KBaseFBA.FBA", "description": "First FBA result"}}}}, {"description": "Run Gapfilling on an metabolic model.  Gapfill attempts to identify the minimal number of reactions needed to add to your metabolic model in order for the model to predict growth in the given media condition (or in complete media if no Media is provided).  Gapfilling is an optimization procedure that can produce many possible solutions.  After a gapfilling job is submitted and run, you can view the results by viewing a metabolic model details, and incorporate the new reactions by running the Integrate Gapfill Solution function. [12]", "title": "Gapfill a Metabolic Model", "visible": false, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param4": {"default": "", "ui_name": "Output Model ID", "type": "string", "description": "select a name for the model result object (optional)"}, "param3": {"default": "", "ui_name": "Integrate Solution", "type": "string", "description": "automatically integrate solution (yes/no)"}, "param2": {"default": "", "ui_name": "Source Gapfill Model", "type": "KBaseFBA.FBAModel", "description": "model to gapfill from"}, "param1": {"default": "", "ui_name": "Media", "type": "KBaseBiochem.Media", "description": "the media condition in which to gapfill [12.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to gapfill [12.1]"}}}}, {"description": "Integrate a Gapfill solution into your metabolic model [13]", "title": "Integrate Gapfill Solution", "visible": false, "returns": {"output0": {"type": "string", "description": "gapfilled model ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseIntegrateGapfillOutput"}, "parameters": {"param2": {"default": "", "ui_name": "Output Model Result Name", "type": "KBaseFBA.FBAModel", "description": "select a name for the gapfilled object (optional) [13.3]"}, "param1": {"default": "e.g model.gf.2.gfsol.1", "ui_name": "Gapfill ID", "type": "KBaseFBA.Gapfilling", "description": "select the ID of the gapfill solution (found in the Gapfilling tab in the model viewer, usually in the form 'modelId.gf.2.gfsol.1') [13.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to integrate gapfill solutions into [13.1]"}}}}, {"description": "Start a job to run Blast between the proteomes of two genomes. The comparison information includes best-bidirectional hits. [17]", "title": "Compare Two Proteomes", "visible": false, "returns": {"output0": {"type": "Proteome comparison result", "description": "Output Proteome Comparison ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeComparisonWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Output Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Output proteome comparison ID. If empty, an ID will be chosen randomly. [17.3]"}, "param1": {"default": "", "ui_name": "Genome2 ID", "type": "KBaseGenomes.Genome", "description": "Source genome2 ID [17.2]"}, "param0": {"default": "", "ui_name": "Genome1 ID", "type": "KBaseGenomes.Genome", "description": "Source genome1 ID [17.1]"}}}}, {"description": "Show the hit map result of running a comparison between two proteomes, which includes information about best-bidirectional hits. [18]", "title": "View Proteome Comparison", "visible": false, "returns": {"output0": {"type": "Proteome comparison result", "description": "Output Proteome Comparison ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeComparisonWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [18.1]"}}}}, {"description": "Compare genes mapped to the same reactions from two metabolic models according to the comparison result between proteomes. See also the function 'Compare Two Proteomes'.  [19]", "title": "Compare Two Metabolic Models", "visible": false, "returns": {"output0": {"type": "string", "description": "Output Comparison Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "FbaModelComparisonWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [19.3]"}, "param1": {"default": "", "ui_name": "FBA Model 2 ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from second genome [19.2]"}, "param0": {"default": "", "ui_name": "FBA Model 1 ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from first genome [19.1]"}}}}, {"description": "Insert a Genome into a global genome tree composed of 49 conserved COGs [20]", "title": "Insert Genome into Species Tree", "visible": false, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param2": {"default": "", "ui_name": "Output species tree ID", "type": "KBaseTrees.Tree", "description": "Output species tree ID. If empty, an ID will be chosen randomly. [20.3]"}, "param1": {"default": "", "ui_name": "Neighbor public genome count", "type": "string", "description": "number of closest public genomes the tree will contain. (optional, default value is 100) [20.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "a Genome to insert into the tree [20.1]"}}}}, {"description": "View a Tree from your workspace [21]", "title": "View Tree", "visible": false, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param0": {"default": "", "ui_name": "Tree ID", "type": "KBaseTrees.Tree", "description": "a Tree id [21.1]"}}}}, {"description": "Build a genome set from the contents of the species tree, copying any CDM genomes into local workspace.", "title": "Build Genome Set From Tree", "visible": false, "returns": {"output0": {"type": "string", "description": "Genome Set Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeSetBuilder"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "ID to use when saving genome set"}, "param0": {"default": "", "ui_name": "Species Tree", "type": "KBaseTrees.Tree", "description": "a species tree with close genomes"}}}}, {"description": "Construct a Genome Set object [22]", "title": "Build Genome Set Object", "visible": false, "returns": {"output0": {"type": "string", "description": "Genome set Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeSetBuilder"}, "parameters": {"param0": {"default": "", "ui_name": "Output genome set ID", "type": "KBaseSearch.GenomeSet", "description": "Output genome set ID. If empty, an ID will be chosen randomly. [22.1]"}}}}, {"description": "Insert a Genome Set into a global genome tree composed of 50 conserved COGs [23]", "title": "Insert Set of Genomes into Species Tree", "visible": false, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param2": {"default": "", "ui_name": "Output species tree ID", "type": "KBaseTrees.Tree", "description": "Output species tree ID. If empty, an ID will be chosen randomly. [23.3]"}, "param1": {"default": "", "ui_name": "Neighbor public genome count", "type": "string", "description": "number of closest public genomes the tree will contain. (optional, default value is 100) [23.2]"}, "param0": {"default": "", "ui_name": "Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "a Genome Set to insert into the tree [23.1]"}}}}, {"description": "Given a gene expression series and a regulome, build a PROM constraint for FBA. [24]", "title": "Build a PROM constraint", "visible": false, "returns": {"output0": {"type": "KBaseFBA.PromConstraint", "description": "Generated PROM constraint ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePromConstraint"}, "parameters": {"param2": {"default": "", "ui_name": "Regulome Name", "type": "KBaseRegulation.Regulome", "description": "Regulome ID [24.3]"}, "param1": {"default": "", "ui_name": "Gene Expression Series Name", "type": "KBaseExpression.ExpressionSeries", "description": "Gene Expression Series ID [24.2]"}, "param0": {"default": "", "ui_name": "Genome Name", "type": "KBaseGenomes.Genome", "description": "Genome ID [24.1]"}}}}, {"description": "Construct multiple sequence alignment object based on set of proteins. [27]", "title": "Align Protein Sequences", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMSA"}, "parameters": {"param2": {"default": "", "ui_name": "Output MSA ID", "type": "KBaseTrees.MSA", "description": "Multiple sequence alignment object ID. If empty, an ID will be chosen randomly. [27.3]"}, "param1": {"default": "", "ui_name": "Multiple Alignment Method", "type": "string", "description": "name of alignment method (one of Muscle, Clustal, ProbCons, T-Coffee, Mafft), leave it blank for default Clustal method [27.2]"}, "param0": {"default": "", "ui_name": "Feture Set Object", "type": "KBaseSearch.FeatureSet", "description": "An object with protein features [27.1]"}}}}, {"description": "View multiple sequence alignment. [29]", "title": "View Multiple Alignment", "visible": false, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMSA"}, "parameters": {"param0": {"default": "", "ui_name": "MSA ID", "type": "KBaseTrees.MSA", "description": "Multiple sequence alignment object ID.[29.1]"}}}}, {"description": "Build phylogenetic tree for multiple alignmnet of protein sequences [28]", "title": "Build Gene Tree", "visible": false, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param1": {"default": "", "ui_name": "Output gene tree ID", "type": "KBaseTrees.Tree", "description": "Output gene tree ID. If empty, an ID will be chosen randomly. [28.2]"}, "param0": {"default": "", "ui_name": "MSA ID", "type": "KBaseTrees.MSA", "description": "a Multiple sequence alignment [28.1]"}}}}], "version": ["0", "0", "1"], "name": "Microbes Services", "desc": "Demo workflow microbes service"}, "Variation Expression Services": {"methods": [{"description": "Calculate variations :param workspace: name of workspace; default is current :type workspace: kbtypes.Unicode :ui_name workspace: Workspace :param Input_file: Input to the raw sequencing data (paired end, comma sep) :type Input_file: kbtypes.Unicode :param paired :  Paired-End say 'yes'; else 'no'; default is 'no' :ui_name paired : Paired-End (?) :type paired : kbtypes.Unicode :default paired : no :param Input_organism: Input organism (kb_id) :type Input_organism: kbtypes.Unicode :ui_name Input_organism : Reference :return: Workspace id :rtype: kbtypes.Unicode", "title": "Calculate Variations", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param3": {"default": "", "ui_name": "Reference", "type": "string", "description": "Input organism (kb_id)"}, "param2": {"default": "no", "ui_name": "Paired-End (?)", "type": "string", "description": "Paired-End say 'yes'; else 'no'; default is 'no'"}, "param1": {"default": "", "ui_name": "Input_file", "type": "string", "description": "Input to the raw sequencing data (paired end, comma sep)"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "name of workspace; default is current"}}}}, {"description": "Aligns the raw sequencing read (fastq) file (per sample) to the reference genome using the splice junction mapper Tophat and assembles the reads to transcripts using Cufflinks. Input the RNASeq fastq files loaded from uploader and generate alignment files  and gene expression files", "title": "Calculate Gene Expression", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param5": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}, "param4": {"default": "", "ui_name": "Source/Source Id", "type": "string", "description": "Source and Source Id"}, "param3": {"default": "", "ui_name": "Reference", "type": "string", "description": "Reference Genome (kbase id)"}, "param2": {"default": "", "ui_name": "Input files", "type": "string", "description": "Input the raw sequencing data (fastq)"}, "param1": {"default": "no", "ui_name": "Paired-End (?)", "type": "string", "description": "Paired-End say 'yes'; else 'no'; default is 'no'"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of workspace; default is current"}}}}, {"description": "Generates the histogram for an ExpressionSample. x-axis  - Gene Expression level (FPKM ) y-axis  - Number of genes with a particular expression level", "title": "Plot Gene Expression Histogram", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseHistogram"}, "parameters": {"param2": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}, "param1": {"default": "", "ui_name": "Gene Expression file", "type": "string", "description": "Gene Expression file"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of workspace, default is current"}}}}, {"description": "Merges the assembled transcripts together and calls Cuffdiff to identify differentially expressed genes in a RNA-Seq experiment", "title": "Identify Differential Expression", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param5": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}, "param4": {"default": "", "ui_name": "Reference", "type": "string", "description": "Reference Genome (kbase id)"}, "param3": {"default": "", "ui_name": "Gene Expressionfiles", "type": "string", "description": "Gene Expression files"}, "param2": {"default": "", "ui_name": "Alignment files", "type": "string", "description": "Alignment files"}, "param1": {"default": "", "ui_name": "Experiment Name", "type": "string", "description": "Experiment title"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of the workspace, default is current"}}}}, {"description": "Bundles the gene expression profiles of all the RNA-Seq samples to a RNA-Seq experiment. Input the Expression Samples and details about the experiment to create a RNASeq series", "title": "Create Expression Series ", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param7": {"default": "", "ui_name": "Publication Date", "type": "string", "description": "External Source Date"}, "param6": {"default": "", "ui_name": "Source Id", "type": "string", "description": "source_Id"}, "param5": {"default": "", "ui_name": "Experiment Summary", "type": "string", "description": "Summary of the Experiment"}, "param4": {"default": "", "ui_name": "Experiment Design", "type": "string", "description": "Design of the Experiment"}, "param3": {"default": "", "ui_name": "Experiment Title", "type": "string", "description": "Title"}, "param2": {"default": "", "ui_name": "Reference Genome (kbase id)", "type": "string", "description": "Reference genome"}, "param1": {"default": "", "ui_name": "Expression Samples", "type": "string", "description": "Expression Sample ids"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of the workspace; default is current"}, "param8": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}}}}, {"description": "It takes the Expression series id as input and builds a complete gene expression data table", "title": "Generate Data Table ", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param4": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}, "param3": {"default": "", "ui_name": "Reference", "type": "string", "description": "Reference Genome (kbase id)"}, "param2": {"default": "", "ui_name": "Expression Series ID", "type": "string", "description": "Expression Series Id"}, "param1": {"default": "", "ui_name": "Name", "type": "string", "description": "Datatable Name"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of the workspace; default is current"}}}}, {"description": "It takes the complete data table as input and filters the significant differentially expressed genes", "title": "Filter Expression Data Table ", "visible": true, "returns": {"output0": {"type": "string", "description": "Workspace id"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param2": {"default": "", "ui_name": "Output file prefix", "type": "string", "description": "Output File prefix"}, "param1": {"default": "", "ui_name": "DataTable Name", "type": "string", "description": "Datatable Name"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of workspace; default is current"}}}}, {"description": "It takes the filtered expression data table and generates the heatmap", "title": "Render Heatmap", "visible": true, "returns": {"output0": {"type": "string", "description": "Rows for display"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseHeatmap"}, "parameters": {"param1": {"default": "", "ui_name": "Filtered Datatable", "type": "string", "description": "Filtered Datatable"}, "param0": {"default": "", "ui_name": "Workspace", "type": "string", "description": "Name of the workspace; default is current"}}}}], "version": ["0", "0", "1"], "name": "Variation Expression Services", "desc": "Variation and Expression service"}, "Communities Services": {"methods": [{"description": "Transform a metagenomic abundance profile into an annotation table object. The annotation table can be used as input for metabolic modeling modeling.", "title": "Abundance Profile 2 Annotation Table", "visible": true, "returns": {"output0": {"type": "string", "description": "Annotation table"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Abundance Profile", "type": "Communities.Profile", "description": "ID for input abundance profile"}}}}, {"description": "Import metagenome list object into workspace.", "title": "Import Metagenome List", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome List Uploading Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "MetagenomeListUploadWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Metagenome List Name", "type": "string", "description": "name of metagenome list object"}}}}, {"description": "Retrieve all SEED/Subsystems functional annotations for a given metagenome ID. Alternatively, filter annotations for specific taxa. For input into modeling service.", "title": "Export Functional Profile for Modeling", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Annotation Set Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param7": {"default": "no", "ui_name": "Remainder", "type": "string", "description": "lump together remaining taxa after top N"}, "param6": {"default": "15", "ui_name": "Alignment Length", "type": "string", "description": "value for minimum alignment length cutoff, default is 15"}, "param5": {"default": "60", "ui_name": "% Identity", "type": "string", "description": "percent value for minimum % identity cutoff, default is 60"}, "param4": {"default": "5", "ui_name": "E-Value", "type": "string", "description": "negative exponent value for maximum e-value cutoff, default is 5"}, "param3": {"default": "genus", "ui_name": "Annotation Level", "type": "string", "description": "taxon level to group annotations by"}, "param2": {"default": "10", "ui_name": "Top Taxa", "type": "string", "description": "produce annotations for top N abundant taxa"}, "param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of annotation set table"}, "param0": {"default": "", "ui_name": "Metagenome", "type": "Communities.Metagenome", "description": "Communities.Metagenome object name"}}}}, {"description": "EMIRGE (Miller et al., Genome Biol. 2011) extracts 16S sequences from a WGS metagenome and reconstructs full-length small subunit gene sequences. It also provides estimates of relative taxon abundances.", "title": "EMIRGE 16S Extraction", "visible": true, "returns": {"output0": {"type": "string", "description": "EMIRGE Results"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Output 16S Sequences", "type": "string", "description": "object name of resulting 16S sequences"}, "param1": {"default": "", "ui_name": "Input FASTQ Pair 2", "type": "Communities.SequenceFile", "description": "Communities.SequenceFile object name, fastq mate pair 2"}, "param0": {"default": "", "ui_name": "Input FASTQ Pair 1", "type": "Communities.SequenceFile", "description": "Communities.SequenceFile object name, fastq mate pair 1"}}}}, {"description": "Create a KEGG annotated functional abundance profile for 16S data in BIOM format using PICRUSt. The input OTUs are created by QIIME using a closed-reference OTU picking against the Greengenes database (pre-clustered at 97% identity).", "title": "PICRUSt Predicted Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "PICRUSt Prediction Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of resulting BIOM profile"}, "param0": {"default": "", "ui_name": "Input BIOM", "type": "Communities.Profile", "description": "object name of OTU table"}}}}, {"description": "Closed-reference OTU picking against the Greengenes database (pre-clustered at 97% identity).", "title": "QIIME OTU picking", "visible": true, "returns": {"output0": {"type": "string", "description": "QIIME OTU table, biom file"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of resulting BIOM profile"}, "param1": {"default": "", "ui_name": "Input Metagenome", "type": "Communities.Metagenome", "description": "Metagenome object"}, "param0": {"default": "", "ui_name": "Input Sequence", "type": "Communities.SequenceFile", "description": "object name of input sequence file"}}}}, {"description": "Create SEED/Subsystems functional annotations from a KEGG metagenome abundance profile. For input into modeling service.", "title": "Transform Abundance Profile to Functional Profile for Modeling", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Annotation Set Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of annotation set table"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Create a draft metabolic model from metagenome Subsystems annotations.", "title": "Create Metabolic Model", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Model"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of model"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.ProfileTable", "description": "object name of Communities.ProfileTable"}}}}, {"description": "Fill in missing core metabolism functions in a draft model.", "title": "Gapfill Metabolic Model", "visible": true, "returns": {"output0": {"type": "string", "description": "Gapfilled Metagenome Model"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Model Name", "type": "KBaseFBA.FBAModel", "description": "object name of model"}}}}, {"description": "Compare two or more metabolic models with appropriate statistical tests.", "title": "Compare Metabolic Model", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Model Comparison"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Model 2 Name", "type": "KBaseFBA.FBAModel", "description": "object name of second KBaseFBA.FBAModel"}, "param0": {"default": "", "ui_name": "Model 1 Name", "type": "KBaseFBA.FBAModel", "description": "object name of first KBaseFBA.FBAModel"}}}}, {"description": "Compare two or more metabolic networks via overlay on graphical KEGG Map.", "title": "KEGG Mapper", "visible": true, "returns": {"output0": {"type": "string", "description": "KEGG Map"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "KeggMapWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Model 2 Name", "type": "KBaseFBA.FBAModel", "description": "object name of second KBaseFBA.FBAModel"}, "param0": {"default": "", "ui_name": "Model 1 Name", "type": "KBaseFBA.FBAModel", "description": "object name of first KBaseFBA.FBAModel"}}}}, {"description": "Retrieve annotation abundance data for selected metagenomes.", "title": "Retrieve Annotation Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param11": {"default": "yes", "ui_name": "Normalize", "type": "string", "description": "log transform the abundance data"}, "param10": {"default": "15", "ui_name": "Alignment Length", "type": "string", "description": "value for minimum alignment length cutoff, default is 15"}, "param7": {"default": "", "ui_name": "Filter Source", "type": "string", "description": "data source of filter names list"}, "param6": {"default": "", "ui_name": "Filter Level", "type": "string", "description": "hierarchical level of filter names list"}, "param5": {"default": "", "ui_name": "Filter List", "type": "Communities.Data", "description": "object name of list of names to filter results by"}, "param4": {"default": "SEED", "ui_name": "Source Name", "type": "string", "description": "data source to filter results by"}, "param3": {"default": "genus", "ui_name": "Annotation Level", "type": "string", "description": "annotation hierarchical level to retrieve abundances for"}, "param2": {"default": "taxa", "ui_name": "Annotation Type", "type": "string", "description": "annotation of abundance profile, one of 'taxa' or 'functions'"}, "param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of abundance profile table"}, "param0": {"default": "", "ui_name": "Metagenome List", "type": "Communities.Collection", "description": "object name of Communities.Collection"}, "param9": {"default": "60", "ui_name": "% Identity", "type": "string", "description": "percent value for minimum % identity cutoff, default is 60"}, "param8": {"default": "5", "ui_name": "E-Value", "type": "string", "description": "negative exponent value for maximum e-value cutoff, default is 5"}}}}, {"description": "Apply matR-based statistical tests to abundance profile data.", "title": "Statistical Significance Test", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Significance Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param5": {"default": "desc", "ui_name": "Sort Direction", "type": "string", "description": "direction of sorting. 'asc' for ascending sort, 'desc' for descending sort"}, "param4": {"default": "", "ui_name": "Sort by Column", "type": "string", "description": "column number to sort output by, default is last column"}, "param3": {"default": "Kruskal-Wallis", "ui_name": "Stat Test", "type": "string", "description": "supported statistical tests, one of: Kruskal-Wallis, t-test-paired, Wilcoxon-paired, t-test-unpaired, Mann-Whitney-unpaired-Wilcoxon, ANOVA-one-way, default is Kruskal-Wallis"}, "param2": {"default": "", "ui_name": "Metadata", "type": "string", "description": "metadata field to group metagenomes by"}, "param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of abundance profile table with significance"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Sort and/or subselect annotation abundance data and outputs from statistical analyses.", "title": "Sub-select Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Significance Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param6": {"default": "no", "ui_name": "Output List", "type": "string", "description": "create only list of annotations from ordering and sub-selection"}, "param5": {"default": "", "ui_name": "Rows", "type": "string", "description": "number of rows from the top to return from input table, default is all"}, "param4": {"default": "", "ui_name": "Columns", "type": "string", "description": "number of columns from the left to return from input table, default is all"}, "param3": {"default": "desc", "ui_name": "Sort Direction", "type": "string", "description": "direction of sorting. 'asc' for ascending sort, 'desc' for descending sort"}, "param2": {"default": "", "ui_name": "Sort by Column", "type": "string", "description": "column number to sort output by, (0 for last column), default is no sorting"}, "param1": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of altered profile"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Add given key-value metadata to inputed abundace profile for inputed metagenome list.", "title": "Add Metadata to Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param3": {"default": "", "ui_name": "Value", "type": "string", "description": "value of metadata field to add"}, "param2": {"default": "", "ui_name": "Label", "type": "string", "description": "name of metadata field to add"}, "param1": {"default": "", "ui_name": "Profile Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}, "param0": {"default": "", "ui_name": "Metagenome List", "type": "Communities.Collection", "description": "object name of Communities.Collection"}}}}, {"description": "View metadata from an abundance profile as a table", "title": "View Abundance Profile Metadata", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Metadata Table"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "View a slice of a BIOM format abundance profile as a table", "title": "View Abundance Profile Values", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Table"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GeneTableWidget"}, "parameters": {"param5": {"default": "yes", "ui_name": "Show Stats", "type": "string", "description": "include significance stats in table view"}, "param4": {"default": "", "ui_name": "Column End", "type": "string", "description": "column position to end table with, default is last"}, "param3": {"default": "", "ui_name": "Column Start", "type": "string", "description": "column position to start table with, default is first"}, "param2": {"default": "", "ui_name": "Row End", "type": "string", "description": "row position to end table with, default is last"}, "param1": {"default": "", "ui_name": "Row Start", "type": "string", "description": "row position to start table with, default is first"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Merge two or more BIOM format abundance profiles", "title": "Merge Abundance Profiles", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param4": {"default": "", "ui_name": "Output Name", "type": "string", "description": "object name of merged abundance profile table"}, "param3": {"default": "", "ui_name": "Fourth Profile", "type": "Communities.Profile", "description": "object name of Communities.Profile, optional"}, "param2": {"default": "", "ui_name": "Third Profile", "type": "Communities.Profile", "description": "object name of Communities.Profile, optional"}, "param1": {"default": "", "ui_name": "Second Profile", "type": "Communities.Profile", "description": "object name of Communities.Profile, required"}, "param0": {"default": "", "ui_name": "First Profile", "type": "Communities.Profile", "description": "object name of Communities.Profile required"}}}}, {"description": "Generate rank abundance profile from annotation abundance data.", "title": "Rank Abundance from Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Rank Abundance Profile"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GraphWidget"}, "parameters": {"param4": {"default": "average", "ui_name": "Order By", "type": "string", "description": "rank by either the position of metagenome in profile (integer) or 'average' or 'max' of metagenomes"}, "param3": {"default": "10", "ui_name": "Top Annotations", "type": "string", "description": "produce profile for top N abundant annotations"}, "param2": {"default": "no", "ui_name": "Label Name", "type": "string", "description": "label by metagenome name and not ID"}, "param1": {"default": "", "ui_name": "Annotation Level", "type": "string", "description": "annotation hierarchical level to retrieve abundances for"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Generate boxplots from annotation abundance data.", "title": "Boxplots from Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Boxplot"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param1": {"default": "no", "ui_name": "Label Name", "type": "string", "description": "label by metagenome name and not ID"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Generate a heatmap-dendrogram from annotation abundance data.", "title": "Heatmap from Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Heatmap"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param5": {"default": "no", "ui_name": "Label", "type": "string", "description": "label rows"}, "param4": {"default": "yes", "ui_name": "Order", "type": "string", "description": "order columns"}, "param3": {"default": "ward", "ui_name": "Cluster", "type": "string", "description": "cluster method, one of: ward, single, complete, mcquitty, median, centroid"}, "param2": {"default": "euclidean", "ui_name": "Distance", "type": "string", "description": "distance/dissimilarity metric, one of: bray-curtis, euclidean, maximum, manhattan, canberra, minkowski, difference"}, "param1": {"default": "no", "ui_name": "Label Name", "type": "string", "description": "label by metagenome name and not ID"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Generate an interactive heatmap-dendrogram from annotation abundance data.", "title": "Interactive Heatmap from Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile Heatmap"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DrilldownHeatmapWidget"}, "parameters": {"param2": {"default": "yes", "ui_name": "Label", "type": "string", "description": "label rows"}, "param1": {"default": "no", "ui_name": "Label Name", "type": "string", "description": "label by metagenome name and not ID"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Generate a PCoA from annotation abundance data.", "title": "PCoA from Abundance Profile", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Abundance Profile PCoA"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ImageViewWidget"}, "parameters": {"param3": {"default": "no", "ui_name": "3D", "type": "string", "description": "create 3-D PCoA"}, "param2": {"default": "euclidean", "ui_name": "Distance", "type": "string", "description": "distance/dissimilarity metric, one of: bray-curtis, euclidean, maximum, manhattan, canberra, minkowski, difference"}, "param1": {"default": "", "ui_name": "Metadata", "type": "string", "description": "metadata field to group metagenomes by"}, "param0": {"default": "", "ui_name": "Input Name", "type": "Communities.Profile", "description": "object name of Communities.Profile"}}}}, {"description": "Overview of metagenome statistics, numeric and plotted.", "title": "View Metagenome", "visible": true, "returns": {"output0": {"type": "string", "description": "Metagenome Overview"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "MGOverviewWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Metagenome ID", "type": "string", "description": "id of a metagenome"}}}}, {"description": "Translates metagenome profile into an OTU annotation object for modeling.", "title": "Profile to OTU annotations", "visible": true, "returns": {"output0": {"type": "string", "description": "Output OTU annotation object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param1": {"default": "", "ui_name": "Output OTU annotation object", "type": "KBaseGenomes.MetagenomeAnnotation", "description": "name of OTU annotation object to be generated"}, "param0": {"default": "", "ui_name": "Metagenome Profile Table", "type": "Communities.ProfileTable", "description": "ID of the metagenome profile"}}}}, {"description": "Constructs models for abundant OTUs in metagenome based on functions of reference genome hits.", "title": "OTU annotations to Models", "visible": true, "returns": {"output0": {"type": "string", "description": "Output OTU and tail models"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ValueListWidget"}, "parameters": {"param3": {"default": "", "ui_name": "Min Reactions", "type": "string", "description": "minimum reactions for OTU model (default is 100)"}, "param2": {"default": "", "ui_name": "Min Abundance", "type": "string", "description": "minimum abundance for OTU model  (default is 3)"}, "param1": {"default": "", "ui_name": "Max OTU Models", "type": "string", "description": "maximum number of OTU models (default is 2)"}, "param0": {"default": "", "ui_name": "OTU Annotation", "type": "KBaseGenomes.MetagenomeAnnotation", "description": "name of OTU annotation object"}}}}, {"description": "Constructs models for abundant OTUs in metagenome based on functions of reference genome hits.", "title": "Merge to Community Model", "visible": true, "returns": {"output0": {"type": "an FBA model ID", "description": "Community Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param2": {"default": "", "ui_name": "Community Model Output ID", "type": "string", "description": "output ID of generated community model"}, "param1": {"default": "", "ui_name": "Species abundance", "type": "string", "description": "list of species relative abundance (; separated)"}, "param0": {"default": "", "ui_name": "Model IDs", "type": "string", "description": "list of species model ids (; seperated)"}}}}], "version": ["0", "0", "1"], "name": "Communities Services", "desc": "Demo workflow communities service"}, "app_service": {"methods": [{"description": "Makes a call to the app service", "title": "app_call", "visible": true, "returns": {"output0": {"type": "string", "description": "running job info"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param2": {"default": "", "ui_name": "Param values", "type": "string", "description": "Param values"}, "param1": {"default": "", "ui_name": "The Method Specs", "type": "string", "description": "The Method Specs"}, "param0": {"default": "", "ui_name": "The App Spec", "type": "string", "description": "The App Spec"}}}}], "version": ["0", "0", "1"], "name": "app_service", "desc": "KBase App Calls"}, "generic_service": {"methods": [{"description": "Generic service method calls", "title": "method_call", "visible": true, "returns": {"output0": {"type": "string", "description": "Service method response"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param1": {"default": "", "ui_name": "Parameter values JSON string", "type": "string", "description": "Parameter values JSON string"}, "param0": {"default": "", "ui_name": "Method descriptor JSON string", "type": "string", "description": "Method descriptor JSON string"}}}}], "version": ["0", "0", "1"], "name": "generic_service", "desc": "Generic service method calls"}, "Microbes Comparative Genomics": {"methods": [{"description": "Rapidly compute gene families for a set of phylogenetically close genomes", "title": "Compute Pangenome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Pangenome Object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param1": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID for output pangenome"}, "param0": {"default": "", "ui_name": "Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "a Genome Set to compute pangenome for"}}}}, {"description": "Show Pangenome object. [29]", "title": "View Pangenome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Compare Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID of pangenome object [29.1]"}}}}, {"description": "Export gene sets from Pangenome as external FeatureSet objects. [26]", "title": "Export gene sets from Pangenome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Pangenome", "description": "Generated Compare Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePanGenome"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "ID of pangenome object [26.1]"}}}}, {"description": "Genome Comparison analysis based on the PanGenome input.", "title": "Genome Comparison from Pangenome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.GenomeComparison", "description": "Uploaded Genome Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeComparisonViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Pangenome ID", "type": "KBaseGenomes.Pangenome", "description": "Pangenome ID"}}}}, {"description": "View genome comparison results.", "title": "View Genome Comparison", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.GenomeComparison", "description": "Uploaded Genome Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeComparisonViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Genome comparison ID", "type": "KBaseGenomes.GenomeComparison", "description": "Genome comparison ID"}}}}, {"description": "Start a job to run Blast between the proteomes of two genomes. The comparison information includes best-bidirectional hits. [17]", "title": "Compare Two Proteomes", "visible": true, "returns": {"output0": {"type": "Proteome comparison result", "description": "Output Proteome Comparison ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeComparisonWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Output Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Output proteome comparison ID. If empty, an ID will be chosen randomly. [17.3]"}, "param1": {"default": "", "ui_name": "Genome2 ID", "type": "KBaseGenomes.Genome", "description": "Source genome2 ID [17.2]"}, "param0": {"default": "", "ui_name": "Genome1 ID", "type": "KBaseGenomes.Genome", "description": "Source genome1 ID [17.1]"}}}}, {"description": "Show the hit map result of running a comparison between two proteomes, which includes information about best-bidirectional hits. [18]", "title": "View Proteome Comparison", "visible": true, "returns": {"output0": {"type": "Proteome comparison result", "description": "Output Proteome Comparison ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeComparisonWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [18.1]"}}}}, {"description": "Insert a Genome into a global genome tree composed of 49 conserved COGs [20]", "title": "Insert Genome into Species Tree", "visible": true, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param2": {"default": "", "ui_name": "Output species tree ID", "type": "KBaseTrees.Tree", "description": "Output species tree ID. If empty, an ID will be chosen randomly. [20.3]"}, "param1": {"default": "", "ui_name": "Neighbor public genome count", "type": "string", "description": "number of closest public genomes the tree will contain. (optional, default value is 100) [20.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "a Genome to insert into the tree [20.1]"}}}}, {"description": "View a Tree from your workspace [21]", "title": "View Tree", "visible": true, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param0": {"default": "", "ui_name": "Tree ID", "type": "KBaseTrees.Tree", "description": "a Tree id [21.1]"}}}}, {"description": "Build a genome set from the contents of the species tree, copying any CDM genomes into local workspace.", "title": "Build Genome Set From Tree", "visible": true, "returns": {"output0": {"type": "string", "description": "Genome Set Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeSetBuilder"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "ID to use when saving genome set"}, "param0": {"default": "", "ui_name": "Species Tree", "type": "KBaseTrees.Tree", "description": "a species tree with close genomes"}}}}, {"description": "Construct a Genome Set object [22]", "title": "Build Genome Set Object", "visible": true, "returns": {"output0": {"type": "string", "description": "Genome set Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseGenomeSetBuilder"}, "parameters": {"param0": {"default": "", "ui_name": "Output genome set ID", "type": "KBaseSearch.GenomeSet", "description": "Output genome set ID. If empty, an ID will be chosen randomly. [22.1]"}}}}, {"description": "Insert a Genome Set into a global genome tree composed of 50 conserved COGs [23]", "title": "Insert Set of Genomes into Species Tree", "visible": true, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param2": {"default": "", "ui_name": "Output species tree ID", "type": "KBaseTrees.Tree", "description": "Output species tree ID. If empty, an ID will be chosen randomly. [23.3]"}, "param1": {"default": "", "ui_name": "Neighbor public genome count", "type": "string", "description": "number of closest public genomes the tree will contain. (optional, default value is 100) [23.2]"}, "param0": {"default": "", "ui_name": "Genome Set ID", "type": "KBaseSearch.GenomeSet", "description": "a Genome Set to insert into the tree [23.1]"}}}}, {"description": "Construct multiple sequence alignment object based on set of proteins. [27]", "title": "Align Protein Sequences", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMSA"}, "parameters": {"param2": {"default": "", "ui_name": "Output MSA ID", "type": "KBaseTrees.MSA", "description": "Multiple sequence alignment object ID. If empty, an ID will be chosen randomly. [27.3]"}, "param1": {"default": "", "ui_name": "Multiple Alignment Method", "type": "string", "description": "name of alignment method (one of Muscle, Clustal, ProbCons, T-Coffee, Mafft), leave it blank for default Clustal method [27.2]"}, "param0": {"default": "", "ui_name": "Feture Set Object", "type": "KBaseSearch.FeatureSet", "description": "An object with protein features [27.1]"}}}}, {"description": "View multiple sequence alignment. [29]", "title": "View Multiple Alignment", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMSA"}, "parameters": {"param0": {"default": "", "ui_name": "MSA ID", "type": "KBaseTrees.MSA", "description": "Multiple sequence alignment object ID.[29.1]"}}}}, {"description": "Build phylogenetic tree for multiple alignmnet of protein sequences [28]", "title": "Build Gene Tree", "visible": true, "returns": {"output0": {"type": "string", "description": "Species Tree Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseTree"}, "parameters": {"param1": {"default": "", "ui_name": "Output gene tree ID", "type": "KBaseTrees.Tree", "description": "Output gene tree ID. If empty, an ID will be chosen randomly. [28.2]"}, "param0": {"default": "", "ui_name": "MSA ID", "type": "KBaseTrees.MSA", "description": "a Multiple sequence alignment [28.1]"}}}}], "version": ["0", "0", "1"], "name": "Microbes Comparative Genomics", "desc": "Demo workflow microbes service"}, "Microbes Annotation": {"methods": [{"description": "Build a Genome object from a ContigSet, creating structural and functional annotations. The annotation job may run for an hour or longer. When the annotation job finishes, the annotated Genome object will be stored in your workspace. [3]", "title": "Annotate ContigSet", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param3": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, an ID will be chosen randomly. [3.3]"}, "param2": {"default": "", "ui_name": "Genetic Code", "type": "string", "description": "enter the genetic code for your new genome (default is 11) [3.2]"}, "param1": {"default": "", "ui_name": "Scientific Name", "type": "string", "description": "enter the scientific name to assign to your new genome [3.2]"}, "param0": {"default": "", "ui_name": "Contig Set Object", "type": "KBaseGenomes.ContigSet", "description": "An object with contig data [3.1]"}}}}, {"description": "Annotate a Genome object with structural and functional gene annotations. The annotation job may run for an hour or longer. When the annotation job finishes, the annotated Genome object will be stored in your workspace. [4]", "title": "Annotate Genome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Annotated output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, annotation will be added into original genome object. [4.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "Source genome ID [4.1]"}}}}, {"description": "Add KBase annotations to a genome.  This function will start a job that might run for an hour or longer. When the job finishes, the Genome with KBase annotations will be stored in your workspace. [21]", "title": "Add KBase Annotation", "visible": true, "returns": {"output0": {"type": "a genome", "description": "Annotated output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, annotation will be added into original genome object. [21.2]"}, "param0": {"default": "", "ui_name": "Genome ID", "type": "KBaseGenomes.Genome", "description": "Source genome ID [21.1]"}}}}, {"description": "View and explore a Genome object in your workspace. [5]", "title": "View Genome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Same genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param0": {"default": "", "ui_name": "Genome", "type": "KBaseGenomes.Genome", "description": "select the genome you want to view [5.1]"}}}}, {"description": "View and explore the KBase Subsystem categories associated with genes in your genome.", "title": "View KBase Subsystem Data", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Same genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "KBaseSEEDFunctions"}, "parameters": {"param0": {"default": "", "ui_name": "Genome", "type": "KBaseGenomes.Genome", "description": "select the genome you want to view"}}}}], "version": ["0", "0", "1"], "name": "Microbes Annotation", "desc": "Demo workflow microbes service"}, "Microbes Metabolic Modeling": {"methods": [{"description": "Given an annotated Genome, build a draft metabolic model which can be analyzed with FBA. [6]", "title": "Build a Metabolic Model", "visible": true, "returns": {"output0": {"type": "KBaseFBA.FBAModel", "description": "Generated Metabolic Model ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param1": {"default": "", "ui_name": "Output Metabolic Model Name", "type": "KBaseFBA.FBAModel", "description": "select a name for the generated metabolic model (optional) [6.2]"}, "param0": {"default": "", "ui_name": "Genome Name", "type": "KBaseGenomes.Genome", "description": "Source genome name [6.1]"}}}}, {"description": "Functionality to assign a new genome to an imported model. A proteome comparison is done between the orginal model genome and the new desired genome. Metoblic reactions from original model get mapped to genes in the new genome'.  [19]", "title": "Translate Model to New Genome", "visible": true, "returns": {"output0": {"type": "KBaseFBA.FBAModel", "description": "Output Translated Model"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param3": {"default": "", "ui_name": "Translated Model ID", "type": "KBaseFBA.FBAModel", "description": "ID to which translated model should be saved"}, "param2": {"default": "", "ui_name": "Remove No-gene Reactions", "type": "string", "description": "specify \"yes\" if reactions with no genes should be removed"}, "param1": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [19.3]"}, "param0": {"default": "", "ui_name": "FBA Model ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from first genome [19.1]"}}}}, {"description": "Bring up a detailed view of your phenotype set within the narrative.", "title": "View Phenotype Set", "visible": true, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSet", "description": "Phenotype Set Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePhenotypeSet"}, "parameters": {"param0": {"default": "", "ui_name": "Phenotype Set", "type": "KBasePhenotypes.PhenotypeSet", "description": "the phenotype set to view"}}}}, {"description": "Simulate the growth of a model on a phenotype set.", "title": "Simulate growth on a Phenotype Set", "visible": true, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Generated Phenotype Simulation Set ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseSimulationSet"}, "parameters": {"param2": {"default": "", "ui_name": "Phenotype Simulation Result", "type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Name for result of phenotype simulation (optional)"}, "param1": {"default": "", "ui_name": "Phenotype Set", "type": "KBasePhenotypes.PhenotypeSet", "description": "Phenotype Set"}, "param0": {"default": "", "ui_name": "FBA Model", "type": "KBaseFBA.FBAModel", "description": "FBA model"}}}}, {"description": "Bring up a detailed view of your Phenotype Simulation results within the narrative.", "title": "View Phenotype Simulation Results", "visible": true, "returns": {"output0": {"type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "Phenotype Simulation Set Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseSimulationSet"}, "parameters": {"param0": {"default": "", "ui_name": "Phenotype Simulation Set", "type": "KBasePhenotypes.PhenotypeSimulationSet", "description": "the phenotype results to view"}}}}, {"description": "Compare two or models and compute core, noncore unique reactions, functional roles with their subsystem information.", "title": "Compare Models", "visible": true, "returns": {"output0": {"type": "string", "description": "Uploaded Model Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "compmodels"}, "parameters": {"param0": {"default": "", "ui_name": "Model IDs", "type": "KBaseFBA.FBAModel", "description": "list of model ids (comma seperated)"}}}}, {"description": "Bring up a detailed view of your metabolic model within the narrative. [7]", "title": "View Metabolic Model Details", "visible": true, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to view [7.1]"}}}}, {"description": "Delete reactions from selected Metabolic Model", "title": "Delete Reaction", "visible": true, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param2": {"default": "", "ui_name": "Edited Model", "type": "KBaseFBA.FBAModel", "description": "ID of model with deleted reactions"}, "param1": {"default": "", "ui_name": "Reaction(s) ID(s)", "type": "string", "description": "Reactions to be deleted. Add multiple reactions seperated by ;"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to edit"}}}}, {"description": "Assemble a set of compounds to use as a media set for performing FBA on a metabolic model. [8]", "title": "Build Media", "visible": true, "returns": {"output0": {"type": "KBaseBiochem.Media", "description": "Metadata from new Media object"}}, "type": "object", "properties": {"widgets": {"input": "kbaseBuildMediaInput", "output": "kbaseMediaViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Media ID", "type": "KBaseBiochem.Media", "description": "Base media type [8.1]"}}}}, {"description": "Bring up a detailed view of a Media set within the narrative. [9]", "title": "View Media", "visible": true, "returns": {"output0": {"type": "KBaseBiochem.Media", "description": "A Media object"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseMediaViewer"}, "parameters": {"param0": {"default": "", "ui_name": "Media ID", "type": "KBaseBiochem.Media", "description": "Media type [9.1]"}}}}, {"description": "Run Flux Balance Analysis on a metabolic model. [10]", "title": "Run Flux Balance Analysis", "visible": true, "returns": {"output0": {"type": "string", "description": "something"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseFbaTabsNarrative"}, "parameters": {"param11": {"default": "", "ui_name": "PROM constraint", "type": "KBaseFBA.PromConstraint", "description": "specify the PROM constraint to apply for regulation of the metabolic model  (optional) [10.12]"}, "param10": {"default": "no", "ui_name": "All rxns reversible?", "type": "string", "description": "set to 'yes' or '1' to allow all model reactions to be reversible (optional) [10.11]"}, "param7": {"default": "0", "ui_name": "Default Max Uptake", "type": "string", "description": "specify the default maximum nutrient uptake flux (optional) [10.8]"}, "param6": {"default": "-100", "ui_name": "Default Min Uptake", "type": "string", "description": "specify the default minumum nutrient uptake flux (optional) [10.7]"}, "param5": {"default": "100", "ui_name": "Default Maximum flux", "type": "string", "description": "specify the default maximum intracellular flux (optional) [10.6]"}, "param4": {"default": "", "ui_name": "Reaction Knockouts", "type": "string", "description": "specify reaction knockouts by reaction ID delimited by semicolons(;) (optional) [10.5]"}, "param3": {"default": "", "ui_name": "Gene Knockouts", "type": "string", "description": "specify gene knockouts by the gene's feature ID delimited by semicolons(;) (optional) [10.4]"}, "param2": {"default": "", "ui_name": "Output FBA Result Name", "type": "KBaseFBA.FBA", "description": "select a name for the FBA result object (optional) [10.3]"}, "param1": {"default": "", "ui_name": "Media", "type": "KBaseBiochem.Media", "description": "the media condition in which to run FBA (optional, default is an artificial complete media) [10.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model you wish to run [10.1]"}, "param9": {"default": "yes", "ui_name": "Maximize Objective?", "type": "string", "description": "set to 'no' or '0' to run FBA without maximizing the objective function (optional) [10.10]"}, "param8": {"default": "no", "ui_name": "Minimize Flux?", "type": "string", "description": "set to 'yes' or '1' to run FBA by minimizing flux (optional) [10.9]"}}}}, {"description": "Bring up a detailed view of your FBA result within the narrative. [11]", "title": "View FBA Result Details", "visible": true, "returns": {"output0": {"type": "string", "description": "something"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseFbaTabsNarrative"}, "parameters": {"param0": {"default": "", "ui_name": "FBA Result", "type": "KBaseFBA.FBA", "description": "the FBA Result to view [11.1]"}}}}, {"description": "Compare two FBA results, showing differences in fluxes for reactions.", "title": "Compare FBA Results", "visible": true, "returns": {"output0": {"type": "string", "description": "FBA Result Comparison Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseCompareFBAs"}, "parameters": {"param1": {"default": "", "ui_name": "Second FBA result", "type": "KBaseFBA.FBA", "description": "Second FBA result"}, "param0": {"default": "", "ui_name": "First FBA result", "type": "KBaseFBA.FBA", "description": "First FBA result"}}}}, {"description": "Run Gapfilling on an metabolic model.  Gapfill attempts to identify the minimal number of reactions needed to add to your metabolic model in order for the model to predict growth in the given media condition (or in complete media if no Media is provided).  Gapfilling is an optimization procedure that can produce many possible solutions.  After a gapfilling job is submitted and run, you can view the results by viewing a metabolic model details, and incorporate the new reactions by running the Integrate Gapfill Solution function. [12]", "title": "Gapfill a Metabolic Model", "visible": true, "returns": {"output0": {"type": "an FBA model ID", "description": "Metabolic Model Data"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseModelTabs"}, "parameters": {"param4": {"default": "", "ui_name": "Output Model ID", "type": "string", "description": "select a name for the model result object (optional)"}, "param3": {"default": "", "ui_name": "Integrate Solution", "type": "string", "description": "automatically integrate solution (yes/no)"}, "param2": {"default": "", "ui_name": "Source Gapfill Model", "type": "KBaseFBA.FBAModel", "description": "model to gapfill from"}, "param1": {"default": "", "ui_name": "Media", "type": "KBaseBiochem.Media", "description": "the media condition in which to gapfill [12.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to gapfill [12.1]"}}}}, {"description": "Integrate a Gapfill solution into your metabolic model [13]", "title": "Integrate Gapfill Solution", "visible": true, "returns": {"output0": {"type": "string", "description": "gapfilled model ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbaseIntegrateGapfillOutput"}, "parameters": {"param2": {"default": "", "ui_name": "Output Model Result Name", "type": "KBaseFBA.FBAModel", "description": "select a name for the gapfilled object (optional) [13.3]"}, "param1": {"default": "e.g model.gf.2.gfsol.1", "ui_name": "Gapfill ID", "type": "KBaseFBA.Gapfilling", "description": "select the ID of the gapfill solution (found in the Gapfilling tab in the model viewer, usually in the form 'modelId.gf.2.gfsol.1') [13.2]"}, "param0": {"default": "", "ui_name": "Metabolic Model", "type": "KBaseFBA.FBAModel", "description": "the metabolic model to integrate gapfill solutions into [13.1]"}}}}, {"description": "Compare genes mapped to the same reactions from two metabolic models according to the comparison result between proteomes. See also the function 'Compare Two Proteomes'.  [19]", "title": "Compare Two Metabolic Models", "visible": true, "returns": {"output0": {"type": "string", "description": "Output Comparison Result"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "FbaModelComparisonWidget"}, "parameters": {"param2": {"default": "", "ui_name": "Proteome Comparison ID", "type": "GenomeComparison.ProteomeComparison", "description": "Proteome comparison ID [19.3]"}, "param1": {"default": "", "ui_name": "FBA Model 2 ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from second genome [19.2]"}, "param0": {"default": "", "ui_name": "FBA Model 1 ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id from first genome [19.1]"}}}}, {"description": "Given a gene expression series and a regulome, build a PROM constraint for FBA. [24]", "title": "Build a PROM constraint", "visible": true, "returns": {"output0": {"type": "KBaseFBA.PromConstraint", "description": "Generated PROM constraint ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "kbasePromConstraint"}, "parameters": {"param2": {"default": "", "ui_name": "Regulome Name", "type": "KBaseRegulation.Regulome", "description": "Regulome ID [24.3]"}, "param1": {"default": "", "ui_name": "Gene Expression Series Name", "type": "KBaseExpression.ExpressionSeries", "description": "Gene Expression Series ID [24.2]"}, "param0": {"default": "", "ui_name": "Genome Name", "type": "KBaseGenomes.Genome", "description": "Genome ID [24.1]"}}}}, {"description": "Generates an SBML file for the specified model.", "title": "Generate SBML file", "visible": true, "returns": {"output0": {"type": "string", "description": "SBML File Downlaod"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "DownloadFileWidget"}, "parameters": {"param0": {"default": "", "ui_name": "FBA Model ID", "type": "KBaseFBA.FBAModel", "description": "an FBA model id"}}}}], "version": ["0", "0", "1"], "name": "Microbes Metabolic Modeling", "desc": "Demo workflow microbes service"}, "Microbes Assembly & Genome Import": {"methods": [{"description": "Use the AssemblyRAST service to assemble a set of contigs from sequenced reads. This starts a job that might run for several hours. When it finishes, the assembled ContigSet will be stored in your data space. [1]", "title": "Simplified Assembly From Reads", "visible": true, "returns": {"output0": {"type": "string", "description": "An assembly job"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "AssemblyWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Assembly Input file", "type": "KBaseAssembly.AssemblyInput", "description": "A list of files with read information [1.1]"}}}}, {"description": "This assembles a ContigSet into a Genome object in your workspace. This should be run before trying to annotate a Genome. [2]", "title": "Assemble Genome from Fasta", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Assembled output genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": null}, "parameters": {"param1": {"default": "", "ui_name": "Output Genome ID", "type": "KBaseGenomes.Genome", "description": "Annotated output genome ID. If empty, an ID will be chosen randomly. [2.2]"}, "param0": {"default": "", "ui_name": "Contig File ID", "type": "string", "description": "A FASTA file with contig data [2.1]"}}}}, {"description": "Upload a ContigSet from FASTA-file into your workspace. This function should be run before wrapping the ContigSet as a Genome object. [19]", "title": "Upload Contigs (FASTA-file)", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "ContigSetUploadWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Contig Set Object ID", "type": "KBaseGenomes.ContigSet", "description": "Output contig set ID. If empty, an ID will be chosen randomly. [19.1]"}}}}, {"description": "Upload a Genome and ContigSet from GBK-file (or files in case of zip) into your workspace. This function should be run before adding KBase annotations to this Genome. [25]", "title": "Upload Genome (GBK-file)", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeUploadWidget"}, "parameters": {"param0": {"default": "", "ui_name": "Genome Object ID", "type": "KBaseGenomes.Genome", "description": "Output Genome ID. If empty, an ID will be chosen randomly. [25.1]"}}}}, {"description": "Import a Genome and ContigSet from NCBI into your workspace. [26]", "title": "Import NCBI Genome", "visible": true, "returns": {"output0": {"type": "string", "description": "Preparation message"}}, "type": "object", "properties": {"widgets": {"input": "NcbiGenomeImportInput", "output": "GenomeAnnotation"}, "parameters": {"param1": {"default": "", "ui_name": "Genome Object ID", "type": "KBaseGenomes.Genome", "description": "Output Genome ID. If empty, an ID will be chosen automatically. [26.2]"}, "param0": {"default": "", "ui_name": "NCBI Genome Name", "type": "string", "description": "Name of public genome accessible on NCBI FTP. [26.1]"}}}}, {"description": "Import genomes from the RAST annotation pipeline.", "title": "Import RAST Genomes", "visible": true, "returns": {"output0": {"type": "string", "description": "Uploaded RAST Genome"}}, "type": "object", "properties": {"widgets": {"input": "rastGenomeImportInput", "output": "GenomeAnnotation"}, "parameters": {"param2": {"default": "", "ui_name": "RAST Password", "type": "string", "description": "Your RAST Password"}, "param1": {"default": "", "ui_name": "RAST Username", "type": "string", "description": "Your RAST Username"}, "param0": {"default": "", "ui_name": "RAST Genome IDs", "type": "string", "description": "list of genome ids (comma seperated)"}}}}, {"description": "Import genomes from the pubSEED database.", "title": "Import SEED Genomes", "visible": true, "returns": {"output0": {"type": "string", "description": "Uploaded SEED Genome"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param0": {"default": "", "ui_name": "SEED Genome IDs", "type": "string", "description": "list of genome ids (comma seperated)"}}}}, {"description": "View and explore a Genome object in your workspace. [5]", "title": "View Genome", "visible": true, "returns": {"output0": {"type": "KBaseGenomes.Genome", "description": "Same genome ID"}}, "type": "object", "properties": {"widgets": {"input": null, "output": "GenomeAnnotation"}, "parameters": {"param0": {"default": "", "ui_name": "Genome", "type": "KBaseGenomes.Genome", "description": "select the genome you want to view [5.1]"}}}}], "version": ["0", "0", "1"], "name": "Microbes Assembly & Genome Import", "desc": "Demo workflow microbes service"}}